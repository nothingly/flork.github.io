<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>经济学</title>
    <link href="/2022/10/10/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    <url>/2022/10/10/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>经济学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络安全</title>
    <link href="/2022/10/10/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <url>/2022/10/10/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2022/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/2022/10/10/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    <url>/2022/10/10/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能</title>
    <link href="/2022/10/10/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    <url>/2022/10/10/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大数据</title>
    <link href="/2022/10/10/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/10/10/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>政治学</title>
    <link href="/2022/10/10/%E6%94%BF%E6%B2%BB%E5%AD%A6/%E6%94%BF%E6%B2%BB%E5%AD%A6/"/>
    <url>/2022/10/10/%E6%94%BF%E6%B2%BB%E5%AD%A6/%E6%94%BF%E6%B2%BB%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>政治学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>苏格拉底</title>
    <link href="/2022/10/10/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/"/>
    <url>/2022/10/10/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>苏格拉底</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>理想国</title>
    <link href="/2022/10/10/%E7%90%86%E6%83%B3%E5%9B%BD/%E7%90%86%E6%83%B3%E5%9B%BD/"/>
    <url>/2022/10/10/%E7%90%86%E6%83%B3%E5%9B%BD/%E7%90%86%E6%83%B3%E5%9B%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>理想国</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>西方哲学</title>
    <link href="/2022/10/10/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6/"/>
    <url>/2022/10/10/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>西方哲学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>法学</title>
    <link href="/2022/10/10/%E6%B3%95%E5%AD%A6/%E6%B3%95%E5%AD%A6/"/>
    <url>/2022/10/10/%E6%B3%95%E5%AD%A6/%E6%B3%95%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>法学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>儒家</title>
    <link href="/2022/10/10/%E5%84%92%E5%AE%B6/%E5%84%92%E5%AE%B6/"/>
    <url>/2022/10/10/%E5%84%92%E5%AE%B6/%E5%84%92%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>儒家</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>王阳明心学</title>
    <link href="/2022/10/10/%E5%BF%83%E5%AD%A6/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/"/>
    <url>/2022/10/10/%E5%BF%83%E5%AD%A6/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>王阳明心学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>道家</title>
    <link href="/2022/10/10/%E9%81%93%E5%AE%B6/%E9%81%93%E5%AE%B6/"/>
    <url>/2022/10/10/%E9%81%93%E5%AE%B6/%E9%81%93%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>道家</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>佛家</title>
    <link href="/2022/10/10/%E4%BD%9B%E5%AE%B6/%E4%BD%9B%E5%AE%B6/"/>
    <url>/2022/10/10/%E4%BD%9B%E5%AE%B6/%E4%BD%9B%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>佛家</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>社会学</title>
    <link href="/2022/10/10/%E7%A4%BE%E4%BC%9A%E5%AD%A6/%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    <url>/2022/10/10/%E7%A4%BE%E4%BC%9A%E5%AD%A6/%E7%A4%BE%E4%BC%9A%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>社会学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>变态心理学</title>
    <link href="/2022/10/10/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%8F%98%E6%80%81%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    <url>/2022/10/10/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%8F%98%E6%80%81%E5%BF%83%E7%90%86%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>心理学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>见或不见</title>
    <link href="/2022/10/09/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E8%A7%81%E6%88%96%E4%B8%8D%E8%A7%81/"/>
    <url>/2022/10/09/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E8%A7%81%E6%88%96%E4%B8%8D%E8%A7%81/</url>
    
    <content type="html"><![CDATA[<p><strong>你见，或者不见我。</strong></p><p><strong>我就在那里，不悲不喜。</strong></p><p><strong>你念，或者不念我。</strong></p><p><strong>情就在那里，不来不去。</strong></p><p><strong>你爱或者不爱我，爱就在那里，不增不减。</strong></p><p><strong>你跟，或者不跟我。</strong></p><p><strong>我的手就在你的手里，不舍不弃。</strong></p><p><strong>来我怀里，或者，让我住进你的心里。</strong></p><p><strong>默然相爱，寂静喜欢。</strong></p><p><strong>你见，或者不见我。</strong></p><p>我就在那里，不悲不喜。</p><p>你念，或者不念我。</p><p>情就在那里，不来不去。</p><p>你爱或者不爱我，爱就在那里，不增不减。</p><p>你跟，或者不跟我。</p><p>我的手就在你的手里，不舍不弃。</p><p>来我怀里，或者，让我住进你的心里。</p><p><strong>默然相爱，寂静喜欢。</strong></p>]]></content>
    
    
    <categories>
      
      <category>现代诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>现代诗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你见或不见</title>
    <link href="/2022/10/09/%E9%A9%AC%E5%85%8B%E6%80%9D/%E4%BD%A0%E8%A7%81%E6%88%96%E8%80%85%E4%B8%8D%E8%A7%81/"/>
    <url>/2022/10/09/%E9%A9%AC%E5%85%8B%E6%80%9D/%E4%BD%A0%E8%A7%81%E6%88%96%E8%80%85%E4%B8%8D%E8%A7%81/</url>
    
    <content type="html"><![CDATA[<ul><li>喜欢你与你无关</li><li>抽象到个人</li><li>深究原因：</li><li>资本主义，从宗教把人拉出家庭，社会关系到教会，有独立的个体思想</li><li>共产主义：加入到组织中</li></ul>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/README/"/>
    <url>/2022/10/09/README/</url>
    
    <content type="html"><![CDATA[<h1 id="WoniuDoctor"><a href="#WoniuDoctor" class="headerlink" title="WoniuDoctor"></a>WoniuDoctor</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>第三阶段开发项目,<strong>蜗牛医生</strong>，小组开发者必须遵守以下开发规范，在仓库创建自己的分支，每个人推送代码仅允许push到自己的分支，严禁push到master，代码日更，记得完成下列附属文件：</p><ul><li>Debug日志</li><li>Mysql日志</li><li>代码进度日志</li></ul><h2 id="版本管理规范"><a href="#版本管理规范" class="headerlink" title="版本管理规范"></a>版本管理规范</h2><p>依赖版本</p><h2 id="Git-Commit代码提交规范"><a href="#Git-Commit代码提交规范" class="headerlink" title="Git Commit代码提交规范"></a>Git Commit代码提交规范</h2><p>git commit -m “提交注释”</p><h3 id="格式说明"><a href="#格式说明" class="headerlink" title="格式说明"></a>格式说明</h3><h3 id="主要type"><a href="#主要type" class="headerlink" title="主要type"></a>主要type</h3><p>feat:     增加新功能<br>fix:      修复bug</p><h3 id="特殊type"><a href="#特殊type" class="headerlink" title="特殊type"></a>特殊type</h3><p>docs:     只改动了文档相关的内容<br>style:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号<br>build:    构造工具的或者外部依赖的改动，例如webpack，npm<br>refactor: 代码重构时使用,重构（即不是新增功能，也不是修改bug的代码变动）<br>revert:   执行git revert打印的message</p><h3 id="暂不使用type"><a href="#暂不使用type" class="headerlink" title="暂不使用type"></a>暂不使用type</h3><p>test:     添加测试或者修改现有测试<br>perf:     提高性能的改动<br>ci:       与CI（持续集成服务）有关的改动<br>chore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动</p><h2 id="分支管理规范"><a href="#分支管理规范" class="headerlink" title="分支管理规范"></a>分支管理规范</h2><p>远程仓库只允许出现五种类型的分支：</p><ul><li><strong>主分支</strong>：项目的主要分支也就是master分支。用于正式发布，该分支禁止任何人直接提交，提交合并请求由对应项目主管人员确认合并。</li><li><strong>开发分支</strong>：项目的开发迭代分支，用于开发发布，常规开发任务的代码直接提交至该分支或者由临时分支合并至该分支。</li><li><strong>测试分支</strong>：项目的测试迭代分支，用户测试发布，该分支禁止任何人直接提交，提交合并请求由对应项目主管人员确认合并。</li><li><strong>归档分支</strong>：项目的里程碑版本保留分支，由测试负责人、项目负责人、产品负责人直接定义版本，从测试分支归档出新分支。</li><li><strong>临时分支</strong>：由项目的开发人员建立的临时分支，禁止交叉提交，谁建立的分支便由谁负责管理，用于合并至开发分支，合并完成之后禁止新提交应当立刻删除。</li></ul><h4 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h4><p>主分支全局仓库唯一，分支名称固定为<strong>master</strong>，任何对主分支的直接提交定性为严重违规行为，需要尝试对主分支进行合并应当由对应仓库的开发负责人提交合并请求并由上级负责人通过合并实现对主分支的变更。</p><h4 id="开发分支"><a href="#开发分支" class="headerlink" title="开发分支"></a>开发分支</h4><p>开发分支全局仓库唯一，分支名称固定为<strong>devLoop</strong>，开发人员允许对该分支直接提交，任何向开发分支提交的代码在提交之前应当保证能够正常通过编译、部署并运行，无法部署的提交应当立刻修复并重新提交。开发分支部署的代码应当由开发人员完成所有的单元测试，全部通过之后再向测试分支提交。</p><h4 id="测试分支"><a href="#测试分支" class="headerlink" title="测试分支"></a>测试分支</h4><p>测试分支全局仓库唯一，分支名称固定为<strong>testLooop</strong>，禁止直接对该分支提交，测试分支应当由开发分支提交合并请求而来，由开发人员提交合并请求，由主要开发人员通过合并请求实现测试部署。小型项目、中间件研发可以酌情省略测试分支，由开发分支部署交于测试进行质量校验，大型项目或产品必须保证有测试分支。</p><h4 id="归档分支"><a href="#归档分支" class="headerlink" title="归档分支"></a>归档分支</h4><p>归档分支全局仓管可以具备多个，直接由测试分支或主分支派生，除特殊情况下禁止任何提交行为，归档分支名称格式为<strong>release-版本号</strong>（如：<code>release-1.2.0</code>），分支由对应项目的开发主要负责人再与测试负责人沟通之后创建，已经后续无论是BUG、还是功能性问题都不应当项归档分支提交。</p><h4 id="临时分支"><a href="#临时分支" class="headerlink" title="临时分支"></a>临时分支</h4><p>临时分支全局仓库可以具备多个，临时分支名称格式为<strong>tem-开发者-创建时间</strong>（如：<code>tem-tangyuecan-20200724</code>），由开发人员自行创建，临时分支的提交进制交叉提交，只允许分支创建者提交，临时分支只能合并到开发分支一旦完成合并之后应当立即删除，可以直接本地合并之后向开发分支提交或者提交合并请求由开发负责人进行合并，临时分支的生命周期原则上不超过三个工作日。临时分支主要用于无法在短时间之内完成的开发工作，或者整合至开发分支之后无法运行情况，这样考虑之下才有临时分支的概念。</p><h4 id="提交描述"><a href="#提交描述" class="headerlink" title="提交描述"></a>提交描述</h4><p>所以代码的提交、合并都应该通过文字目前描述出改此提交、合并的目的如下面几种：</p><ul><li><code>修复问题：#xxxx</code>（禅道BUG的ID或者ISSUE）</li><li><code>修复问题：xxxx</code>（BUG的名称）</li><li><code>完成功能：#xxxx</code>（禅道的任务ID）</li><li><code>完成功能：xxxxx</code>（功能的名称）</li></ul><p>任何无意义或者具体目的的提交禁止同步至远程仓库，包括远程临时分支（禁止commit）</p><h2 id="Java中的命名规范"><a href="#Java中的命名规范" class="headerlink" title="Java中的命名规范"></a>Java中的命名规范</h2><table><thead><tr><th align="left">类型</th><th align="left">约束</th><th align="center">例</th></tr></thead><tbody><tr><td align="left">项目名</td><td align="left">全部小写，多个单词用中划线分隔‘-’</td><td align="center">spring-cloud</td></tr><tr><td align="left">包名</td><td align="left">全部小写</td><td align="center">com.alibaba.fastjson</td></tr><tr><td align="left">类名</td><td align="left">单词首字母大写</td><td align="center">Feature, ParserConfig,DefaultFieldDeserializer</td></tr><tr><td align="left">变量名</td><td align="left">首字母小写，多个单词组成时，除首个单词，其他单词首字母都要大写</td><td align="center">password, userName</td></tr><tr><td align="left">常量名</td><td align="left">全部大写，多个单词，用’_’分隔</td><td align="center">CACHE_EXPIRED_TIME</td></tr><tr><td align="left">方法</td><td align="left">同变量</td><td align="center">read(), readObject(), getById()</td></tr></tbody></table><h3 id="包命名"><a href="#包命名" class="headerlink" title="包命名"></a>包命名</h3><table><thead><tr><th align="left">前缀名</th><th align="left">例</th><th align="center">含义</th></tr></thead><tbody><tr><td align="left">indi（或onem ）</td><td align="left">indi.发起者名.项目名.模块名.……</td><td align="center">个体项目，指个人发起，但非自己独自完成的项目，可公开或私有项目，copyright主要属于发起者。</td></tr><tr><td align="left">pers</td><td align="left">pers.个人名.项目名.模块名.……</td><td align="center">个人项目，指个人发起，独自完成，可分享的项目，copyright主要属于个人</td></tr><tr><td align="left">priv</td><td align="left">priv.个人名.项目名.模块名.……</td><td align="center">私有项目，指个人发起，独自完成，非公开的私人使用的项目，copyright属于个人。</td></tr><tr><td align="left">team</td><td align="left">team.团队名.项目名.模块名.……</td><td align="center">团队项目，指由团队发起，并由该团队开发的项目，copyright属于该团队所有</td></tr><tr><td align="left">顶级域名</td><td align="left">com.公司名.项目名.模块名.……</td><td align="center">公司项目，copyright由项目发起的公司所有</td></tr></tbody></table><h3 id="类命名"><a href="#类命名" class="headerlink" title="类命名"></a>类命名</h3><table><thead><tr><th align="left">属性</th><th align="left">约束</th><th align="center">例</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">Abstract 或者 Base 开头</td><td align="center">BaseUserService</td></tr><tr><td align="left">枚举类</td><td align="left">Enum 作为后缀</td><td align="center">GenderEnum</td></tr><tr><td align="left">工具类</td><td align="left">Utils作为后缀</td><td align="center">StringUtils</td></tr><tr><td align="left">异常类</td><td align="left">Exception结尾</td><td align="center">RuntimeException</td></tr><tr><td align="left">接口实现类</td><td align="left">接口名+ Impl</td><td align="center">UserServiceImpl</td></tr><tr><td align="left">领域模型相关</td><td align="left">&#x2F;DO&#x2F;DTO&#x2F;VO&#x2F;DAO</td><td align="center">正例：UserDAO 反例： UserDo， UserDao</td></tr><tr><td align="left">设计模式相关类</td><td align="left">Builder，Factory等</td><td align="center">当使用到设计模式时，需要使用对应的设计模式作为后缀，如ThreadFactory</td></tr><tr><td align="left">处理特定功能的</td><td align="left">Handler，Predicate, Validator</td><td align="center">表示处理器，校验器，断言，这些类工厂还有配套的方法名如handle，predicate，validate</td></tr><tr><td align="left">测试类</td><td align="left">Test结尾</td><td align="center">UserServiceTest， 表示用来测试UserService类的</td></tr><tr><td align="left">MVC分层</td><td align="left">Controller，Service，ServiceImpl，DAO后缀</td><td align="center">UserManageController，UserManageDAO</td></tr></tbody></table><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="center">例</th></tr></thead><tbody><tr><td align="left">Prefix</td><td align="left">is</td><td align="left">对象是否符合期待的状态</td><td align="center">isValid</td></tr><tr><td align="left">Prefix</td><td align="left">can</td><td align="left">对象能否执行所期待的动作</td><td align="center">canRemove</td></tr><tr><td align="left">Prefix</td><td align="left">should</td><td align="left">调用方执行某个命令或方法是好还是不好,应不应该，或者说推荐还是不推荐</td><td align="center">shouldMigrate</td></tr><tr><td align="left">Prefix</td><td align="left">has</td><td align="left">对象是否持有所期待的数据和属性</td><td align="center">hasObservers</td></tr><tr><td align="left">Prefix</td><td align="left">needs</td><td align="left">调用方是否需要执行某个命令或方法</td><td align="center">needsMigrate</td></tr></tbody></table><h3 id="变量-amp-常量命名"><a href="#变量-amp-常量命名" class="headerlink" title="变量&amp;常量命名"></a>变量&amp;常量命名</h3><p>变量使用驼峰命名法</p><p>常量名必须大写</p><h3 id="通用命名规则"><a href="#通用命名规则" class="headerlink" title="通用命名规则"></a>通用命名规则</h3><ol><li>尽量不要使用拼音；杜绝拼音和英文混用。对于一些通用的表示或者难以用英文描述的可以采用拼音，一旦采用拼音就坚决不能和英文混用。 正例： BeiJing， HangZhou 反例： validateCanShu</li><li>命名过程中尽量不要出现特殊的字符，常量除外。</li><li>尽量不要和jdk或者框架中已存在的类重名，也不能使用java中的关键字命名。</li><li>妙用介词，如for(可以用同音的4代替), to(可用同音的2代替), from, with，of等。 如类名采用User4RedisDO，方法名getUserInfoFromRedis，convertJson2Map等。</li></ol><h2 id="继承结构及工程规范"><a href="#继承结构及工程规范" class="headerlink" title="继承结构及工程规范"></a>继承结构及工程规范</h2><table><thead><tr><th></th><th></th><th></th><th align="center"></th></tr></thead><tbody><tr><td>模块名称</td><td>模块说明xxxx<br/><br/>xxxx<br/><br/>xxxx<br/><br/>使用说明<br/>xxxx<br/><br/>xxxx<br/><br/>xxxx</td><td>示例</td><td align="center">备注</td></tr><tr><td>entity层</td><td>实体类命名与表名相同，首字母大写，如果表名存在_那么将_这去掉后首字母大写。</td><td>表名:like_log 实体名 LikeLog</td><td align="center"><strong>实体类属性必须与数据库字段名保持一致。</strong></td></tr><tr><td>mapper层</td><td>继承com.baomidou.mybatisplus.core.mapper.BaseMapper 要求实体泛型dao层下接口命名：实体名+Mapper 。</td><td>LikeLogMapper</td><td align="center"></td></tr><tr><td>service层</td><td>要求：接口继承com.baomidou.mybatisplus.extension.service.IService要求实体泛型</td><td></td><td align="center"></td></tr><tr><td>service.impl层类</td><td>继承com.baomidou.mybatisplus.extension.service.impl.ServiceImpl，service层下接口命名：业务名称+Service 。service.impl层命名：　业务名称+ServiceImpl 。xxxx<br/><br/>xxxx<br/><br/>xxxx<br/><br/>使用说明<br/>xxxx<br/><br/>xxxx<br/><br/>xxxx</td><td>LikeLogService；LikeLogServiceImpl</td><td align="center">service层可以调用service层和dao层和其他项目。 service层下可再包一层bean层，用以存放数据结构的类，必须以Bean结尾。 平台service层内部调用的方法可以返回entity，但是被manage层调用的service方法只能返回dto或基本数据类型，不能返回entity到manage。</td></tr><tr><td>manage层</td><td>调用其他服务的接口，通常使用Feign来实现</td><td>ILikeLogMange</td><td align="center">manage层下接口命名：I+业务名称+Manage。</td></tr><tr><td>controller层</td><td>继承: org.jeecg.common.system.base.controller.JeecgController&lt;T, S extends IService&gt;controller层命名：以Controller结尾。</td><td>LikeLogController</td><td align="center">web&#x2F;proxy&#x2F;internal可用；<strong>controller层不能出现dto</strong></td></tr><tr><td>form层</td><td>web&#x2F;proxy&#x2F;internal可用；form下类命名：以Form结尾。</td><td>LikeBaseInfoForm</td><td align="center">form可以引用其他form form中不可以包含dto</td></tr><tr><td>vo层</td><td>internal&#x2F;platform 可用；vo层命名：以vo结尾，前缀不一定是entity。</td><td>LikeLogDto</td><td align="center">dto不能引用别人的dto</td></tr><tr><td>schedule类</td><td>schedule层命名: 以业务名称开头，以Schedule结尾，前缀不一定是entity。</td><td>SendEmailSchedule</td><td align="center"></td></tr><tr><td>Idp类</td><td>idp层命名：以IdpHandler结尾。</td><td>ResumeIdpHandler</td><td align="center"></td></tr><tr><td>util层</td><td>util层命名：以Util或Utils结尾。</td><td>MoneyUtil</td><td align="center"></td></tr><tr><td>consts层</td><td>静态变量类consts层命名：以Const结尾。</td><td>LikeLogConst</td><td align="center"></td></tr><tr><td>helper层</td><td>helper层命名：client名+Helper结尾。</td><td>UserPlatformClientHelper</td><td align="center">Helper层主要放置调用其它端client的工具类； Helper只可以出现调平台的代码和处理平台返回错误的代码； Helper不允许调其他helper；</td></tr><tr><td>filter</td><td>filter命名：以Filter结尾。</td><td>AuthFilter</td><td align="center">只能出现在common包下面的filter包中</td></tr><tr><td>resolver</td><td>包名只能叫resolver且同一工程下只能有一个resolve包，只能出现在common包下的resolver包中，此包下只能有一个类文件且名称为：MvcExceptionResolver。</td><td></td><td align="center"></td></tr></tbody></table><h2 id="Web-URL标准"><a href="#Web-URL标准" class="headerlink" title="Web URL标准"></a>Web URL标准</h2><h2 id="Ajax返回数据规范"><a href="#Ajax返回数据规范" class="headerlink" title="Ajax返回数据规范"></a>Ajax返回数据规范</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常返回</span><br>&#123;<br>  <span class="hljs-string">&quot;flag&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-comment">// 数据状态标识</span><br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;     <span class="hljs-comment">// 正常返回的相关数据，可以是 Object / Array</span><br>    ...<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 异常返回</span><br>&#123;<br>  <span class="hljs-string">&quot;flag&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-comment">// 数据状态标识</span><br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;***&quot;</span>,    <span class="hljs-comment">// 异常标识code</span><br>  <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;some error message.&quot;</span>    <span class="hljs-comment">// 异常提示信息</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h2><h2 id="数据库命令规范"><a href="#数据库命令规范" class="headerlink" title="数据库命令规范"></a>数据库命令规范</h2><p>1、所有数据库对象名称必须使用小写字母并用下划线分割</p><p>2、所有数据库对象名称禁止使用mysql保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）</p><p>3、数据库对象的命名要能做到见名识意，并且最后不要超过32个字符</p><p>4、临时库表必须以tmp_为前缀并以日期为后缀，备份表必须以bak_为前缀并以日期(时间戳)为后缀</p><p>5、所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）</p><h3 id="数据库命名规范"><a href="#数据库命名规范" class="headerlink" title="数据库命名规范"></a>数据库命名规范</h3><p>采用小写字母、数字（通常不需要）和下划线组成。禁止使用’-’，命名简洁、含义明确。</p><h3 id="表命名"><a href="#表命名" class="headerlink" title="表命名"></a>表命名</h3><ul><li><p>根据业务类型不同，采用不同的前缀，小写字母、下划线组成</p></li><li><p>长度控制在30个字符以内</p><p>推荐的命名规则</p><table><thead><tr><th>类型</th><th>前缀</th><th>说明</th></tr></thead><tbody><tr><td>业务表</td><td>tb_</td><td></td></tr><tr><td>关系表</td><td>tr_</td><td></td></tr><tr><td>历史表</td><td>th_</td><td></td></tr><tr><td>统计表</td><td>ts_</td><td></td></tr><tr><td>日志表</td><td>tl_xx_log</td><td></td></tr><tr><td>系统表、字典表、码表</td><td>sys_</td><td></td></tr><tr><td>临时表</td><td>tmp_</td><td>禁止使用</td></tr><tr><td>备份表</td><td>bak_xx_ymd</td><td></td></tr><tr><td>视图</td><td>view_</td><td>避免使用</td></tr></tbody></table></li></ul><h2 id="数据库基本设计规范"><a href="#数据库基本设计规范" class="headerlink" title="数据库基本设计规范"></a>数据库基本设计规范</h2><h3 id="所有表必须使用Innodb存储引擎"><a href="#所有表必须使用Innodb存储引擎" class="headerlink" title="所有表必须使用Innodb存储引擎"></a>所有表必须使用Innodb存储引擎</h3><p>没有特殊要求（即Innodb无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用Innodb存储引擎（mysql5.5之前默认使用Myisam，5.6以后默认的为Innodb）Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。</p><h3 id="数据库和表的字符集统一使用utf8mb4"><a href="#数据库和表的字符集统一使用utf8mb4" class="headerlink" title="数据库和表的字符集统一使用utf8mb4"></a>数据库和表的字符集统一使用utf8mb4</h3><p>兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效。</p><ul><li>解读：在Mysql中的UTF-8并非“真正的UTF-8”，而utf8mb4”才是真正的“UTF-8”。</li></ul><h3 id="所有表和字段都需要添加注释"><a href="#所有表和字段都需要添加注释" class="headerlink" title="所有表和字段都需要添加注释"></a>所有表和字段都需要添加注释</h3><p>使用comment从句添加表和列的备注 从一开始就进行数据字典的维护</p><h3 id="尽量控制单表数据量的大小，建议控制在500万以内"><a href="#尽量控制单表数据量的大小，建议控制在500万以内" class="headerlink" title="尽量控制单表数据量的大小，建议控制在500万以内"></a>尽量控制单表数据量的大小，建议控制在500万以内</h3><p>500万并不是MySQL数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题</p><p>可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小。</p><h3 id="谨慎使用MySQL分区表"><a href="#谨慎使用MySQL分区表" class="headerlink" title="谨慎使用MySQL分区表"></a>谨慎使用MySQL分区表</h3><p>分区表在物理上表现为多个文件，在逻辑上表现为一个表 谨慎选择分区键，跨分区查询效率可能更低 建议采用物理分表的方式管理大数据</p><h3 id="尽量做到冷热数据分离，减小表的宽度"><a href="#尽量做到冷热数据分离，减小表的宽度" class="headerlink" title="尽量做到冷热数据分离，减小表的宽度"></a>尽量做到冷热数据分离，减小表的宽度</h3><p>MySQL限制每个表最多存储4096列，并且每一行数据的大小不能超过65535字节 减少磁盘IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的IO） 更有效的利用缓存，避免读入无用的冷数据 经常一起使用的列放到一个表中（避免更多的关联操作）</p><h3 id="禁止在表中建立预留字段"><a href="#禁止在表中建立预留字段" class="headerlink" title="禁止在表中建立预留字段"></a>禁止在表中建立预留字段</h3><p>预留字段的命名很难做到见名识义 预留字段无法确认存储的数据类型，所以无法选择合适的类型 对预留字段类型的修改，会对表进行锁定</p><h3 id="禁止在数据库中存储图片，文件等大的二进制数据"><a href="#禁止在数据库中存储图片，文件等大的二进制数据" class="headerlink" title="禁止在数据库中存储图片，文件等大的二进制数据"></a>禁止在数据库中存储图片，文件等大的二进制数据</h3><p>通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机IO操作，文件很大时，IO操作很耗时 通常存储于文件服务器，数据库只存储文件地址信息</p><h3 id="每张表必须设置一个主键ID，且这个主键ID使用自增主键（在满足需要的情况下尽量短），除非在分库分表环境下"><a href="#每张表必须设置一个主键ID，且这个主键ID使用自增主键（在满足需要的情况下尽量短），除非在分库分表环境下" class="headerlink" title="每张表必须设置一个主键ID，且这个主键ID使用自增主键（在满足需要的情况下尽量短），除非在分库分表环境下"></a>每张表必须设置一个主键ID，且这个主键ID使用自增主键（在满足需要的情况下尽量短），除非在分库分表环境下</h3><ul><li>解读：由于InnoDB组织数据的方式决定了需要有一个主键，而且若是这个主键ID是单调递增的可以有效提高插入的性能，避免过多的页分裂、减少表碎片提高空间的使用率。 而在分库分表环境下，则需要统一来分配各个表中的主键值，从而避免整个逻辑表中主键重复。</li></ul><h3 id="禁止使用外键，如果有外键完整性约束，需要应用程序控制"><a href="#禁止使用外键，如果有外键完整性约束，需要应用程序控制" class="headerlink" title="禁止使用外键，如果有外键完整性约束，需要应用程序控制"></a>禁止使用外键，如果有外键完整性约束，需要应用程序控制</h3><ul><li>解读：外键会导致表与表之间耦合，UPDATE与DELETE操作都会涉及相关联的表，十分影响SQL的性能，甚至会造成死锁。</li></ul><h3 id="单表列数目必须小于30，若超过则应该考虑将表拆分"><a href="#单表列数目必须小于30，若超过则应该考虑将表拆分" class="headerlink" title="单表列数目必须小于30，若超过则应该考虑将表拆分"></a>单表列数目必须小于30，若超过则应该考虑将表拆分</h3><ul><li>解读：单表列数太多使得Mysql服务器处理InnoDB返回数据之间的映射成本太高。</li></ul><h3 id="禁止在线上做数据库压力测试"><a href="#禁止在线上做数据库压力测试" class="headerlink" title="禁止在线上做数据库压力测试"></a>禁止在线上做数据库压力测试</h3><h3 id="禁止从开发环境，测试环境直接连接生成环境数据库"><a href="#禁止从开发环境，测试环境直接连接生成环境数据库" class="headerlink" title="禁止从开发环境，测试环境直接连接生成环境数据库"></a>禁止从开发环境，测试环境直接连接生成环境数据库</h3><h2 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h2><h3 id="优先选择符合存储需要的最小的数据类型"><a href="#优先选择符合存储需要的最小的数据类型" class="headerlink" title="优先选择符合存储需要的最小的数据类型"></a>优先选择符合存储需要的最小的数据类型</h3><p>原因</p><p>列的字段越大，建立索引时所需要的空间也就越大，这样一页中所能存储的索引节点的数量也就越少也越少，在遍历时所需要的IO次数也就越多， 索引的性能也就越差</p><p>方法</p><p>1）将字符串转换成数字类型存储，如：将IP地址转换成整形数据。</p><p>mysql提供了两个方法来处理ip地址：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">inet_aton 把ip转为无符号整型(<span class="hljs-number">4</span><span class="hljs-number">-8</span>位)<br>inet_ntoa 把整型的ip转为地址<br></code></pre></td></tr></table></figure><p>插入数据前，先用inet_aton把ip地址转为整型，可以节省空间。显示数据时，使用inet_ntoa把整型的ip地址转为地址显示即可。</p><p>2）对于非负型的数据（如自增ID、整型IP）来说，要优先使用无符号整型来存储</p><p>因为：无符号相对于有符号可以多出一倍的存储空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">SIGNED <span class="hljs-type">INT</span> <span class="hljs-number">-2147483648</span><span class="hljs-operator">~</span><span class="hljs-number">2147483647</span><br><br>UNSIGNED <span class="hljs-type">INT</span> <span class="hljs-number">0</span><span class="hljs-operator">~</span><span class="hljs-number">4294967295</span><br></code></pre></td></tr></table></figure><p>VARCHAR(N)中的N代表的是字符数，而不是字节数</p><p>使用UTF8存储255个汉字 Varchar(255)&#x3D;765个字节。过大的长度会消耗更多的内存</p><h3 id="避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据"><a href="#避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据" class="headerlink" title="避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据"></a>避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据</h3><p>建议把BLOB或是TEXT列分离到单独的扩展表中</p><p>Mysql内存临时表不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。</p><p>而且对于这种数据，Mysql还是要进行二次查询，会使sql性能变得很差，但是不是说一定不能使用这样的数据类型。</p><p>如果一定要使用，建议把BLOB或是TEXT列分离到单独的扩展表中，查询时一定不要使用select * 而只需要取出必要的列，不需要TEXT列的数据时不要对该列进行查询。</p><p>TEXT或BLOB类型只能使用前缀索引</p><p>因为MySQL对索引字段长度是有限制的，所以TEXT类型只能使用前缀索引，并且TEXT列上是不能有默认值的。</p><h3 id="避免使用ENUM类型"><a href="#避免使用ENUM类型" class="headerlink" title="避免使用ENUM类型"></a>避免使用ENUM类型</h3><p>1、修改ENUM值需要使用ALTER语句</p><p>2、ENUM类型的ORDER BY操作效率低，需要额外操作</p><p>3、禁止使用数值作为ENUM的枚举值</p><h3 id="必须把字段定义为NOT-NULL并且提供默认值"><a href="#必须把字段定义为NOT-NULL并且提供默认值" class="headerlink" title="必须把字段定义为NOT NULL并且提供默认值"></a>必须把字段定义为NOT NULL并且提供默认值</h3><p>原因：</p><p>1、索引NULL列需要额外的空间来保存，所以要占用更多的空间；</p><p>2、进行比较和计算时要对NULL值做特别的处理</p><ul><li>解读：</li><li>NULL的列使索引&#x2F;索引统计&#x2F;值比较都更加复杂，对MySQL来说更难优化；</li><li>NULL这种类型Msql内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多；</li><li>NULL值需要更多的存储空，无论是表还是索引中每行中的NULL的列都需要额外的空间来标识。</li></ul><h3 id="使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间"><a href="#使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间" class="headerlink" title="使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间"></a>使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间</h3><p>TIMESTAMP 存储的时间范围 1970-01-01 00:00:01 ~ 2038-01-19-03:14:07。</p><p>TIMESTAMP 占用4字节和INT相同，但比INT可读性高</p><p>超出TIMESTAMP取值范围的使用DATETIME类型存储。</p><p>经常会有人用字符串存储日期型的数据（不正确的做法）：</p><p>缺点1：无法用日期函数进行计算和比较</p><p>缺点2：用字符串存储日期要占用更多的空间</p><h3 id="同财务相关的金额类数据必须使用decimal类型"><a href="#同财务相关的金额类数据必须使用decimal类型" class="headerlink" title="同财务相关的金额类数据必须使用decimal类型"></a>同财务相关的金额类数据必须使用decimal类型</h3><p>1、非精准浮点：float,double</p><p>2、精准浮点：decimal</p><p>Decimal类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每4个字节可以存储9位数字，并且小数点要占用一个字节。可用于存储比bigint更大的整型数据。</p><h3 id="如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。"><a href="#如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。" class="headerlink" title="如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。"></a>如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。</h3><ul><li>解读：能够减少空间碎片，节省存储空间。</li></ul><h3 id="禁用保留字，如DESC、RANGE、MARCH等，请参考Mysql官方保留字"><a href="#禁用保留字，如DESC、RANGE、MARCH等，请参考Mysql官方保留字" class="headerlink" title="禁用保留字，如DESC、RANGE、MARCH等，请参考Mysql官方保留字"></a>禁用保留字，如DESC、RANGE、MARCH等，请参考Mysql官方保留字</h3><h2 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h2><h3 id="4-4-1-限制每张表上的索引数量，建议单张表索引不超过5个"><a href="#4-4-1-限制每张表上的索引数量，建议单张表索引不超过5个" class="headerlink" title="4.4.1 限制每张表上的索引数量，建议单张表索引不超过5个"></a>4.4.1 限制每张表上的索引数量，建议单张表索引不超过5个</h3><p>索引并不是越多越好！索引可以提高效率同样可以降低效率。</p><p>索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。</p><p>因为mysql优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加mysql优化器生成执行计划的时间，同样会降低查询性能。</p><h3 id="4-4-2-禁止给表中的每一列都建立单独的索引"><a href="#4-4-2-禁止给表中的每一列都建立单独的索引" class="headerlink" title="4.4.2 禁止给表中的每一列都建立单独的索引"></a>4.4.2 禁止给表中的每一列都建立单独的索引</h3><p>5.6版本之前，一个sql只能使用到一个表中的一个索引，5.6以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好</p><h3 id="4-4-3-每个Innodb表必须有个主键"><a href="#4-4-3-每个Innodb表必须有个主键" class="headerlink" title="4.4.3 每个Innodb表必须有个主键"></a>4.4.3 每个Innodb表必须有个主键</h3><p>Innodb是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。</p><p>每个表都可以有多个索引，但是表的存储顺序只能有一种 Innodb是按照主键索引的顺序来组织表的。</p><p>不要使用更新频繁的列作为主键，不适用多列主键（相当于联合索引） 不要使用UUID、MD5、HASH、字符串列作为主键（无法保证数据的顺序增长）。</p><p>主键建议使用自增ID值。</p><h3 id="4-4-4-索引规约"><a href="#4-4-4-索引规约" class="headerlink" title="4.4.4 索引规约"></a>4.4.4 索引规约</h3><p>【建议】（1）避免在更新比较频繁、区分度不高的列上单独建立索引</p><ul><li>解读：区分度不高的列单独创建索引的优化效果很小，但是较为频繁的更新则会让索引的维护成本更高。</li></ul><p>【强制】（2） JOIN的表不允许超过五个。需要JOIN的字段，数据类型必须绝对一致; 多表关联查询时，保证被关联的字段需要有索引</p><ul><li><p>解读：太多表的JOIN会让Mysql的优化器更难权衡出一个“最佳”的执行计划（可能性为表数量的阶乘），同时要注意关联字段的类型、长度、字符编码等等是否一致。</p><p>【强制】（3）在一个联合索引中，若第一列索引区分度等于1，那么则不需要建立联合索引</p></li><li><p>解读：索引通过第一列就能够完全定位的数据，所以联合索引的后边部分是不需要的。</p></li></ul><p>【强制】（4）建立联合索引时，必须将区分度更高的字段放在左</p><ul><li>解读：区分度更高的列放在左边，能够在一开始就有效的过滤掉无用数据。提高索引的效率，相应我们在Mapper中编写SQL的WHERE条件中有多个条件时，需要先看看当前表是否有现成的联合索引直接使用，注意各个条件的顺序尽量和索引的顺序一致。</li></ul><p>【建议】（5）利用覆盖索引来进行查询操作，避免回表</p><ul><li>解读：覆盖查询即是查询只需要通过索引即可拿到所需DATA，而不再需要再次回表查询，所以效率相对很高。我们在使用EXPLAIN的结果，extra列会出现：”using index”。这里也要强调一下不要使用“SELECT * ”，否则几乎不可能使用到覆盖索引。</li></ul><p>【建议】（6）在较长VARCHAR字段,例如VARCHAR(100)上建立索引时，应指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可</p><ul><li>解读：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，若长度为20的索引，区分度会高达90%以上，则可以考虑创建长度例为20的索引，而非全字段索引。例如可以使用SELECT COUNT(DISTINCT LEFT(lesson_code, 20)) &#x2F; COUNT(*) FROM lesson;来确定lesson_code字段字符长度为20时文本区分度。</li></ul><p>【建议】（7）如果有ORDER BY的场景，请注意利用索引的有序性。ORDER BY最后的字段是联合索引的一部分，并且放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。</p><ul><li>解读：</li><li>假设有查询条件为WHERE a&#x3D;? and b&#x3D;? ORDER BY c；存在索引：a_b_c，则此时可以利用索引排序；</li><li>反例：在查询条件中包含了范围查询，那么索引有序性无法利用，如:WHERE a&gt;10 ORDER BY b; 索引a_b无法排序。</li></ul><p>【建议】（8）在where中索引的列不能某个表达式的一部分，也不能是函数的参数</p><ul><li>解读：即是某列上已经添加了索引，但是若此列成为表达式的一部分、或者是函数的参数，Mysql无法将此列单独解析出来，索引也不会生效。</li></ul><p>【建议】 （9）我们在where条件中使用范围查询时，索引最多用于一个范围条件，超过一个则后边的不走索引</p><ul><li>解读：Mysql能够使用多个范围条件里边的最左边的第一个范围查询，但是后边的范围查询则无法使用。</li></ul><p>【建议】 （10）在多个表进行外连接时，表之间的关联字段类型必须完全一致</p><ul><li>解读：当两个表进行Join时，字段类型若没有完全一致，则加索引也不会生效，这里的完全一致包括但不限于字段类型、字段长度、字符集、collection等等。</li></ul><h2 id="常见索引列建议"><a href="#常见索引列建议" class="headerlink" title="常见索引列建议"></a>常见索引列建议</h2><p>1、出现在SELECT、UPDATE、DELETE语句的WHERE从句中的列</p><p>2、包含在ORDER BY、GROUP BY、DISTINCT中的字段</p><p>并不要将符合1和2中的字段的列都建立一个索引，通常将1、2中的字段建立联合索引效果更好</p><p>3、多表join的关联列</p><h2 id="如何选择索引列的顺序"><a href="#如何选择索引列的顺序" class="headerlink" title="如何选择索引列的顺序"></a>如何选择索引列的顺序</h2><p>建立索引的目的是：希望通过索引进行数据查找，减少随机IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。</p><p>1、区分度最高的放在联合索引的最左侧（区分度&#x3D;列中不同值的数量&#x2F;列的总行数）；</p><p>2、尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO性能也就越好）；</p><p>3、使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）。</p><h2 id="避免建立冗余索引和重复索引"><a href="#避免建立冗余索引和重复索引" class="headerlink" title="避免建立冗余索引和重复索引"></a>避免建立冗余索引和重复索引</h2><p>因为这样会增加查询优化器生成执行计划的时间。</p><p><strong>重复索引示例：</strong>primary key(id)、index(id)、unique index(id)</p><p><strong>冗余索引示例：</strong>index(a,b,c)、index(a,b)、index(a)</p><h2 id="优先考虑覆盖索引"><a href="#优先考虑覆盖索引" class="headerlink" title="优先考虑覆盖索引"></a>优先考虑覆盖索引</h2><p>对于频繁的查询优先考虑使用覆盖索引。</p><p>覆盖索引：就是包含了所有查询字段(where,select,ordery by,group by包含的字段)的索引</p><p>覆盖索引的好处：</p><ul><li>避免Innodb表进行索引的二次查询</li><li>Innodb是以聚集索引的顺序来存储的，对于Innodb来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了IO操作，提升了查询效率。</li><li>可以把随机IO变成顺序IO加快查询效率</li></ul><p>由于覆盖索引是按键值的顺序存储的，对于IO密集型的范围查找来说，对比随机从磁盘读取每一行的数据IO要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的IO转变成索引查找的顺序IO。</p><h2 id="索引SET规范"><a href="#索引SET规范" class="headerlink" title="索引SET规范"></a>索引SET规范</h2><p><strong>尽量避免使用外键约束</strong></p><p>1、不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引；</p><p>2、外键可用于保证数据的参照完整性，但建议在业务端实现；</p><p>3、外键会影响父表和子表的写操作从而降低性能。</p><h2 id="数据库SQL开发规范"><a href="#数据库SQL开发规范" class="headerlink" title="数据库SQL开发规范"></a>数据库SQL开发规范</h2><h3 id="建议使用预编译语句进行数据库操作"><a href="#建议使用预编译语句进行数据库操作" class="headerlink" title="建议使用预编译语句进行数据库操作"></a>建议使用预编译语句进行数据库操作</h3><p>预编译语句可以重复使用这些计划，减少SQL编译所需要的时间，还可以解决动态SQL所带来的SQL注入的问题 只传参数，比传递SQL语句更高效 相同语句可以一次解析，多次使用，提高处理效率。</p><h3 id="不允许使用属性隐式转换"><a href="#不允许使用属性隐式转换" class="headerlink" title="不允许使用属性隐式转换"></a>不允许使用属性隐式转换</h3><p>隐式转换会导致索引失效。如：select name,phone from customer where id &#x3D; ‘111’;</p><p>解读：假设我们在手机号列上添加了索引，然后执行下面的SQL会发生什么？explain SELECT user_name FROM parent WHERE phone&#x3D;13812345678; 很明显就是索引不生效，会全表扫描。</p><h3 id="充分利用表上已经存在的索引"><a href="#充分利用表上已经存在的索引" class="headerlink" title="充分利用表上已经存在的索引"></a>充分利用表上已经存在的索引</h3><p>避免使用双%号的查询条件。</p><p>如a like ‘%123%’，（如果无前置%,只有后置%，是可以用到列上的索引的）</p><p>解读：根据索引的最左前缀原理，%开头的模糊查询无法使用索引，可以使用ES来做检索。</p><p>一个SQL只能利用到复合索引中的一列进行范围查询</p><p>如：有 a,b,c列的联合索引，在查询条件中有a列的范围查询，则在b,c列上的索引将不会被用到，在定义联合索引时，如果a列要用到范围查找的话，就要把a列放到联合索引的右侧。</p><p>使用left join或 not exists来优化not in操作</p><p>因为not in 也通常会使用索引失效。</p><h3 id="数据库设计时，应该要对以后扩展进行考虑"><a href="#数据库设计时，应该要对以后扩展进行考虑" class="headerlink" title="数据库设计时，应该要对以后扩展进行考虑"></a>数据库设计时，应该要对以后扩展进行考虑</h3><h3 id="程序连接不同的数据库使用不同的账号，禁止跨库查询"><a href="#程序连接不同的数据库使用不同的账号，禁止跨库查询" class="headerlink" title="程序连接不同的数据库使用不同的账号，禁止跨库查询"></a>程序连接不同的数据库使用不同的账号，禁止跨库查询</h3><p>1、为数据库迁移和分库分表留出余地</p><p>2、降低业务耦合度</p><p>3、避免权限过大而产生的安全风险</p><h3 id="禁止使用SELECT-必须使用SELECT-lt-字段列表-gt-查询"><a href="#禁止使用SELECT-必须使用SELECT-lt-字段列表-gt-查询" class="headerlink" title="禁止使用SELECT * 必须使用SELECT &lt;字段列表&gt; 查询"></a>禁止使用SELECT * 必须使用SELECT &lt;字段列表&gt; 查询</h3><p>原因：</p><ol><li>消耗更多的CPU和IO以网络带宽资源</li><li>无法使用覆盖索引</li><li>可减少表结构变更带来的影响</li><li>读取不需要的列会增加CPU、IO、NET消耗；</li></ol><h3 id="禁止使用不含字段列表的INSERT语句"><a href="#禁止使用不含字段列表的INSERT语句" class="headerlink" title="禁止使用不含字段列表的INSERT语句"></a>禁止使用不含字段列表的INSERT语句</h3><p>如：insert into values (‘a’,’b’,’c’);</p><p>应使用insert into t(c1,c2,c3) values (‘a’,’b’,’c’);</p><h3 id="避免使用子查询，可以把子查询优化为join操作"><a href="#避免使用子查询，可以把子查询优化为join操作" class="headerlink" title="避免使用子查询，可以把子查询优化为join操作"></a>避免使用子查询，可以把子查询优化为join操作</h3><p>通常子查询在in子句中，且子查询中为简单SQL(不包含union、group by、order by、limit从句)时，才可以把子查询转化为关联查询进行优化。</p><p>子查询性能差的原因：</p><p>1、子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响；</p><p>3、特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大；</p><p>3、由于子查询会产生大量的临时表也没有索引，所以会消耗过多的CPU和IO资源，产生大量的慢查询。</p><h3 id="避免使用JOIN关联太多的表"><a href="#避免使用JOIN关联太多的表" class="headerlink" title="避免使用JOIN关联太多的表"></a>避免使用JOIN关联太多的表</h3><p>对于Mysql来说，是存在关联缓存的，缓存的大小可以由join_buffer_size参数进行设置。</p><p>在Mysql中，对于同一个SQL多关联（join）一个表，就会多分配一个关联缓存，如果在一个SQL中关联的表越多，所占用的内存也就越大。</p><p>如果程序中大量的使用了多表关联的操作，同时join_buffer_size设置的也不合理的情况下，就容易造成服务器内存溢出的情况，就会影响到服务器数据库性能的稳定性。</p><p>同时对于关联操作来说，会产生临时表操作，影响查询效率Mysql最多允许关联61个表，建议不超过5个。</p><h3 id="减少同数据库的交互次数"><a href="#减少同数据库的交互次数" class="headerlink" title="减少同数据库的交互次数"></a>减少同数据库的交互次数</h3><p>数据库更适合处理批量操作 合并多个相同的操作到一起，可以提高处理效率</p><h3 id="对应同一列进行or判断时，使用in代替or"><a href="#对应同一列进行or判断时，使用in代替or" class="headerlink" title="对应同一列进行or判断时，使用in代替or"></a>对应同一列进行or判断时，使用in代替or</h3><p>应尽量避免在WHERE子句中使用or作为连接条件</p><p>in的值不要超过500个in操作可以更有效的利用索引，or大多数情况下很少能利用到索引。</p><p>解读：根据情况可以选择使用UNION ALL来代替OR。</p><h3 id="禁止使用order-by-rand-进行随机排序"><a href="#禁止使用order-by-rand-进行随机排序" class="headerlink" title="禁止使用order by rand() 进行随机排序"></a>禁止使用order by rand() 进行随机排序</h3><p>会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的CPU和IO及内存资源。</p><p>推荐在程序中获取一个随机值，然后从数据库中获取数据的方式</p><h3 id="WHERE从句中禁止对列进行函数转换和计算"><a href="#WHERE从句中禁止对列进行函数转换和计算" class="headerlink" title="WHERE从句中禁止对列进行函数转换和计算"></a>WHERE从句中禁止对列进行函数转换和计算</h3><p>对列进行函数转换或计算时会导致无法使用索引。</p><p>不推荐：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span> <span class="hljs-type">date</span>(create_time)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;20190101&#x27;</span><br></code></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span> create_time <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;20190101&#x27;</span> <span class="hljs-keyword">and</span> create_time <span class="hljs-operator">&lt;</span> <span class="hljs-string">&#x27;20190102&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="在明显不会有重复值时使用UNION-ALL而不是UNION"><a href="#在明显不会有重复值时使用UNION-ALL而不是UNION" class="headerlink" title="在明显不会有重复值时使用UNION ALL而不是UNION"></a>在明显不会有重复值时使用UNION ALL而不是UNION</h3><p>1、UNION会把两个结果集的所有数据放到临时表中后再进行去重操作</p><p>2、UNION ALL不会再对结果集进行去重操作</p><h3 id="拆分复杂的大SQL为多个4-11-1小SQL"><a href="#拆分复杂的大SQL为多个4-11-1小SQL" class="headerlink" title="拆分复杂的大SQL为多个4.11.1小SQL"></a>拆分复杂的大SQL为多个4.11.1小SQL</h3><p>1、大SQL：逻辑上比较复杂，需要占用大量CPU进行计算的SQL</p><p>2、MySQL：一个SQL只能使用一个CPU进行计算</p><p>3、SQL拆分后可以通过并行执行来提高处理效率</p><h3 id="禁止使用外键与级联，一切外键概念必须在应用层解决"><a href="#禁止使用外键与级联，一切外键概念必须在应用层解决" class="headerlink" title="禁止使用外键与级联，一切外键概念必须在应用层解决"></a>禁止使用外键与级联，一切外键概念必须在应用层解决</h3><ul><li>解读：外键与级联更新适用于单机低并发，不适合分布式、高并发集群;级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</li></ul><h2 id="数据库操作行为规范"><a href="#数据库操作行为规范" class="headerlink" title="数据库操作行为规范"></a>数据库操作行为规范</h2><h3 id="超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作"><a href="#超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作" class="headerlink" title="超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作"></a>超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作</h3><p>大批量操作可能会造成严重的主从延迟</p><p>主从环境中，大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间，而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况</p><p>binlog日志为row格式时会产生大量的日志</p><p>大批量写操作会产生大量日志，特别是对于row格式二进制数据而言，由于在row格式中会记录每一行数据的修改，我们一次修改的数据越多，产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因。</p><p>避免产生大事务操作</p><p>大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对MySQL的性能产生非常大的影响。</p><p>特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批。</p><h3 id="4-11-2-对于大表使用pt-online-schema-change修改表结构"><a href="#4-11-2-对于大表使用pt-online-schema-change修改表结构" class="headerlink" title="4.11.2 对于大表使用pt-online-schema-change修改表结构"></a>4.11.2 对于大表使用pt-online-schema-change修改表结构</h3><p>1、避免大表修改产生的主从延迟</p><p>2、避免在对表字段进行修改时进行锁表</p><p>对大表数据结构的修改一定要谨慎，会造成严重的锁表操作，尤其是生产环境，是不能容忍的。</p><p>pt-online-schema-change它会首先建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器。</p><p>把原表中新增的数据也复制到新表中，在行所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉。</p><p>把原来一个DDL操作，分解成多个小的批次进行。</p><h3 id="4-11-3-禁止为程序使用的账号赋予super权限"><a href="#4-11-3-禁止为程序使用的账号赋予super权限" class="headerlink" title="4.11.3 禁止为程序使用的账号赋予super权限"></a>4.11.3 禁止为程序使用的账号赋予super权限</h3><p>当达到最大连接数限制时，还运行1个有super权限的用户连接super权限只能留给DBA处理问题的账号使用。</p><h3 id="4-11-4-对于程序连接数据库账号，遵循权限最小原则"><a href="#4-11-4-对于程序连接数据库账号，遵循权限最小原则" class="headerlink" title="4.11.4 对于程序连接数据库账号，遵循权限最小原则"></a>4.11.4 对于程序连接数据库账号，遵循权限最小原则</h3><p>程序使用数据库账号只能在一个DB下使用，不准跨库 程序使用的账号原则上不准有drop权限。</p><h2 id="接口设计规范"><a href="#接口设计规范" class="headerlink" title="接口设计规范"></a>接口设计规范</h2><h2 id="基本规范"><a href="#基本规范" class="headerlink" title="基本规范"></a>基本规范</h2><h3 id="公共参数"><a href="#公共参数" class="headerlink" title="公共参数"></a>公共参数</h3><p>公共参数是每个接口都要携带的参数，描述每个接口的基本信息，用于统计或其他用途，放在header或url参数中。例如：</p><table><thead><tr><th>字段名称</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>客户端版本。1.0.0</td></tr><tr><td>token</td><td>登录令牌</td></tr><tr><td>os</td><td>手机系统版本。12</td></tr><tr><td>from</td><td>请求来源。android&#x2F;ios&#x2F;h5</td></tr><tr><td>screen</td><td>手机尺寸。1080*1920</td></tr><tr><td>model</td><td>机型。IPhone7</td></tr><tr><td>net</td><td>网络状态。wifi</td></tr></tbody></table><h3 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h3><p>为了方便给客户端响应，响应数据会包含三个属性，状态码（code）,信息描述（message）,响应数据（data）。客户端根据状态码及信息描述可快速知道接口，如果状态码返回成功，再开始处理数据。</p><p>array类型数据。通过list字段，保证data的Object结构。</p><p>分页类型数据。返回总条数，用于判断是否可以加载更多。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// object类型数据</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// array类型数据。</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 分页类型数据。</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;10&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>列表类数据接口，无论是否要求分页，最好支持分页，pageSize&#x3D;Integer.Max即可。</p><p>响应结果定义及常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">793034041048451317L</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 放入响应枚举</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">fillCode</span><span class="hljs-params">(CodeEnum codeEnum)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setCode(codeEnum.getCode());<br>        <span class="hljs-built_in">this</span>.setMessage(codeEnum.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 放入响应码及信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">fillCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String message)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setCode(code);<br>        <span class="hljs-built_in">this</span>.setMessage(message);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理成功，放入自定义业务数据集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">fillData</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setCode(CodeEnum.SUCCESS.getCode());<br>        <span class="hljs-built_in">this</span>.setMessage(CodeEnum.SUCCESS.getMessage());<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字段类型规范"><a href="#字段类型规范" class="headerlink" title="字段类型规范"></a>字段类型规范</h3><p>统一使用String类型。某些情况，统一使用String可以防止解析失败，减少类型转化操作。</p><p>Boolean类型，1是0否。客户端处理时，非1都是false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(isVip))&#123;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>status类型字段，从1+开始，区别Boolean的0和1。“0”有两种含义，（1）Boolean类型的false，（2）默认的status</p><h3 id="上传-x2F-下载"><a href="#上传-x2F-下载" class="headerlink" title="上传&#x2F;下载"></a>上传&#x2F;下载</h3><p>上传&#x2F;下载，参数增加文件md5，用于完整性校验（传输过程可能丢失数据）。</p><h3 id="避免精度丢失"><a href="#避免精度丢失" class="headerlink" title="避免精度丢失"></a>避免精度丢失</h3><p>缩小单位保存数据，如：钱以分为单位、距离以米为单位。</p><h2 id="调用接口的先决条件-token"><a href="#调用接口的先决条件-token" class="headerlink" title="调用接口的先决条件-token"></a>调用接口的先决条件-token</h2><p>获取token一般会涉及到几个参数<code>appid</code>，<code>appkey</code>，<code>timestamp</code>，<code>nonce</code>，<code>sign</code>。我们通过以上几个参数来获取调用系统的凭证。</p><p><code>appid</code>和<code>appkey</code>可以直接通过平台线上申请，也可以线下直接颁发。<code>appid</code>是全局唯一的，每个<code>appid</code>将对应一个客户，<code>appkey</code>需要高度保密。</p><p><code>timestamp</code>是时间戳，使用系统当前的unix时间戳。时间戳的目的就是为了减轻DOS攻击。防止请求被拦截后一直尝试请求接口。服务器端设置时间戳阀值，如果请求时间戳和服务器时间超过阀值，则响应失败。</p><p><code>nonce</code>是随机值。随机值主要是为了增加<code>sign</code>的多变性，也可以保护接口的幂等性，相邻的两次请求<code>nonce</code>不允许重复，如果重复则认为是重复提交，响应失败。</p><p><code>sign</code>是参数签名，将<code>appkey</code>，<code>timestamp</code>，<code>nonce</code>拼接起来进行md5加密（当然使用其他方式进行不可逆加密也没问题）。</p><p><code>token</code>，使用参数<code>appid</code>，<code>timestamp</code>，<code>nonce</code>，<code>sign</code>来获取token，作为系统调用的唯一凭证。<code>token</code>可以设置一次有效（这样安全性更高），也可以设置时效性，这里推荐设置时效性。如果一次有效的话这个接口的请求频率可能会很高。<code>token</code>推荐加到请求头上，这样可以跟业务参数完全区分开来。</p><h2 id="使用POST作为接口请求方式"><a href="#使用POST作为接口请求方式" class="headerlink" title="使用POST作为接口请求方式"></a>使用POST作为接口请求方式</h2><p>一般调用接口最常用的两种方式就是GET和POST。两者的区别也很明显，GET请求会将参数暴露在浏览器URL中，而且对长度也有限制。为了更高的安全性，所有接口都采用POST方式请求。</p><h3 id="GET、POST、PUT、DELETE对比"><a href="#GET、POST、PUT、DELETE对比" class="headerlink" title="GET、POST、PUT、DELETE对比"></a>GET、POST、PUT、DELETE对比</h3><h4 id="1-GET"><a href="#1-GET" class="headerlink" title="1. GET"></a>1. GET</h4><ul><li>安全且幂等</li><li>获取表示</li><li>变更时获取表示（缓存）<br>适合查询类的接口使用</li></ul><h4 id="2-POST"><a href="#2-POST" class="headerlink" title="2. POST"></a>2. POST</h4><ul><li>不安全且不幂等</li><li>使用服务端管理的（自动产生）的实例号创建资源</li><li>创建子资源</li><li>部分更新资源</li><li>如果没有被修改，则不过更新资源（乐观锁）<br>适合数据提交类的接口使用</li></ul><h4 id="3-PUT"><a href="#3-PUT" class="headerlink" title="3. PUT"></a>3. PUT</h4><ul><li>不安全但幂等</li><li>用客户端管理的实例号创建一个资源</li><li>通过替换的方式更新资源</li><li>如果未被修改，则更新资源（乐观锁）<br>适合更新数据的接口使用</li></ul><h4 id="4-DELETE"><a href="#4-DELETE" class="headerlink" title="4. DELETE"></a>4. DELETE</h4><ul><li>不安全但幂等</li><li>删除资源<br>适合删除数据的接口使用</li></ul><p>列表界面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 静态列表</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20岁&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nickName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小张&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 动态列表</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;userInfos&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;姓名&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;张三&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;性别&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;男&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;年龄&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;20岁&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;昵称&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小张&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>多个boolean可以flag替换</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7&quot;</span> <span class="hljs-comment">// 二进制：111，三位分别表示三个boolean字段</span><br><span class="hljs-punctuation">&#125;</span><br><br>long flag = <span class="hljs-number">7</span>;<br>System.out.println(<span class="hljs-string">&quot;bit=&quot;</span>+Long.toBinaryString(flag));<br>System.out.println(<span class="hljs-string">&quot;第一位=&quot;</span>+((flag&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;第二位=&quot;</span>+((flag&amp;<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;第三位=&quot;</span>+((flag&amp;<span class="hljs-number">4</span>)==<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p>采用http的状态码进行数据封装，例如200表示请求成功，4xx表示客户端错误，5xx表示服务器内部发生错误。状态码设计参考如下：</p><table><thead><tr><th>分类</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2xx</td><td>成功</td></tr><tr><td>3xx</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4xx</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5xx</td><td>服务端错误</td></tr></tbody></table><p>状态码枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodeEnum</span> &#123;<br><br>    <span class="hljs-comment">// 根据业务需求进行添加</span><br>    SUCCESS(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;处理成功&quot;</span>),<br>    ERROR_PATH(<span class="hljs-number">404</span>,<span class="hljs-string">&quot;请求地址错误&quot;</span>),<br>    ERROR_SERVER(<span class="hljs-number">505</span>,<span class="hljs-string">&quot;服务器内部发生错误&quot;</span>);<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <br>    CodeEnum(<span class="hljs-type">int</span> code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="正常响应"><a href="#正常响应" class="headerlink" title="正常响应"></a>正常响应</h3><p>响应状态码2xx</p><ul><li>200：常规请求</li><li>201：创建成功</li></ul><h3 id="重定向响应"><a href="#重定向响应" class="headerlink" title="重定向响应"></a>重定向响应</h3><p>响应状态码3xx</p><ul><li>301：永久重定向</li><li>302：暂时重定向</li></ul><h3 id="客户端异常"><a href="#客户端异常" class="headerlink" title="客户端异常"></a>客户端异常</h3><p>响应状态码4xx</p><ul><li>403：请求无权限</li><li>404：请求路径不存在</li><li>405：请求方法不存在</li></ul><h3 id="服务器异常"><a href="#服务器异常" class="headerlink" title="服务器异常"></a>服务器异常</h3><p>响应状态码5xx</p><ul><li>500：服务器异常</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2022/10/09/Java/java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/09/Java/java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>java中有八种数据类型</p><ol><li>byte</li><li>short</li><li>int</li><li>long</li><li>float</li><li>double</li><li>String</li><li>char</li></ol><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>数据类型的转换分为两种：强制转换和自动转换</p><p><strong>自动转换</strong>：例如：int转换为double ，java中规定好的，由低到高的转换，不需要强制执行，java的源码中已经设定好。</p><p><strong>强制转换</strong>：例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">125</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-type">byte</span>(a);<br><br></code></pre></td></tr></table></figure><p>如上，一个int类型的变量被强制转换为byte类型，这是由高到低，因此需要强制转换，即在被转换的变量前加转换后的数据类型。</p><p><strong>注意</strong>：强制数据类型转换存在一个和严重的问题，<em><strong>即内存溢出</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;  <span class="hljs-comment">// int</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-type">byte</span>(a); <span class="hljs-comment">// 会出错，原因是byte数据类型的最大值是127，存在内存溢出</span><br></code></pre></td></tr></table></figure><h3 id="变量、常量、作用域"><a href="#变量、常量、作用域" class="headerlink" title="变量、常量、作用域"></a>变量、常量、作用域</h3><p><strong>变量</strong>：指的是在内存中的一个空间，可以放你想放的任何东西，由于不确定性所以取名变量。</p><p><strong>常量</strong>：用final修饰的一个固定的值，<strong>其中变量的名字需要大写</strong>。</p><p><strong>作用域</strong>： </p><ol><li><p>类的作用域</p><p>static 修饰类的全局作用域，不论是前置还是后置都一样。</p></li><li><p>实例变量作用域<br>String name &#x3D; “李四”；</p></li><li><p>方法的作用域</p></li></ol><p>​main方法里面定义的变量</p><h3 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h3><p><strong>a++</strong>:先自增，后赋值</p><p><strong>++a</strong>：先赋值，后自增</p><h3 id="逻辑运算、位运算"><a href="#逻辑运算、位运算" class="headerlink" title="逻辑运算、位运算"></a>逻辑运算、位运算</h3><p>&amp;&amp; ： 两个都为真，结果才是真</p><p>|| ：有真即真</p><p>！：取反</p><hr><p>&lt;&lt;</p><p>左移，乘以2</p><p>》》</p><p>右移，除以2</p><p>^</p><p>幂</p><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a &lt; <span class="hljs-number">60</span> ? <span class="hljs-string">&quot;及格&quot;</span>:<span class="hljs-string">&quot;不及格&quot;</span>；<br></code></pre></td></tr></table></figure><h3 id="Sanner类"><a href="#Sanner类" class="headerlink" title="Sanner类"></a>Sanner类</h3><ol><li>导入Scanner类</li><li>new出Scanner</li><li>变量接受输入</li><li>关闭Scanner</li></ol><p>next（）：以空格结束</p><p>hasnext（）：以Enter键结束</p><p>判断输入的数据类型方法：</p><p>hasNextInt（）：判断输入的数据是否是int类型</p><p>hasNextfloat（）：判断输入的数据是否是float类型</p><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>java的基本结构就是顺序结构，除非特别申明，否则一定是一行一行执行，同时顺序结构也是最简单的算法结构。</p><h3 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h3><ul><li>if单选择结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br>    <span class="hljs-comment">//如果表达式为true，则执行</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果为false。则执行</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>if多选择结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br>    <span class="hljs-comment">//如果表达式为true，则执行</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>) &#123;<br>     <span class="hljs-comment">//如果表达式1为true，则执行</span><br>    <br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<br>     <span class="hljs-comment">//如果表达式2为true，则执行</span><br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果以上表达式结果均为false。则执行，若有一个表达式为true,则跳过else</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>嵌套if</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">//如果表达式1为true则进入表达式2</span><br>    <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<br>     <span class="hljs-comment">//如果表达式2为true则执行</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Switch选择结构"><a href="#Switch选择结构" class="headerlink" title="Switch选择结构"></a>Switch选择结构</h3><p>多选择结构 switch case,switch中的变量类型可以是：byte 、short、int、char、String（JavaSE7）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123;<br>        <span class="hljs-comment">//switch简单理解为匹配一个值</span><br>    <span class="hljs-keyword">case</span> value:<br>        <span class="hljs-comment">//语句</span><br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//一定要写break，不然会出现break穿透现象，即后续结果都会输出</span><br>    <span class="hljs-keyword">case</span> value :<br>        <span class="hljs-comment">//语句</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="While循环结构"><a href="#While循环结构" class="headerlink" title="While循环结构"></a>While循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔表达式)&#123;<br>    <span class="hljs-comment">//循环内容</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>只要布尔表达式为true，则一直循环</li><li>大多数情况会设置表达式让循环停止</li><li>尽量避免死循环</li></ol><p>例子：输出1+2+3+4+5+….+100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">i=<span class="hljs-number">0</span>;<br>sum = <span class="hljs-number">0</span> ;<br><span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>)&#123;<br>    sum = sum + i;<br>    i++;<br>    Sys.out(i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DoWhile循环结构"><a href="#DoWhile循环结构" class="headerlink" title="DoWhile循环结构"></a>DoWhile循环结构</h3><p>do…while循环至少会进入循环一次</p><p><strong>与while的区别</strong>：</p><p>​while先判断后执行，dowhile是先执行再判断</p><p>​dowhile至少会执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>    <span class="hljs-comment">//代码语句</span><br>&#125;<span class="hljs-keyword">while</span>(布尔表达式)<br></code></pre></td></tr></table></figure><h3 id="For循环结构"><a href="#For循环结构" class="headerlink" title="For循环结构"></a>For循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化；布尔表达式；更新)&#123;<br>    <span class="hljs-comment">//代码语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：最先执行的初始化步骤，可以声明一种类型，但可初始化一个或者多个循环控制变量，也可以是空语句。</p><p>​然后，检测布尔表达式的值。如果为true，循环体继续，如果为false，循环终止，开始执行循环体后面的语句。</p><p>执行一次循环体以后，更新循环体控制变量。</p><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= j; i++) &#123;<br>            System.out.print(j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(j*i) + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>先写一个for循环,实现第一列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++)&#123;<br>        System.out.println(i+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(<span class="hljs-number">1</span>*i));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>*<span class="hljs-number">1</span>=<span class="hljs-number">1</span><br><span class="hljs-number">1</span>*<span class="hljs-number">2</span>=<span class="hljs-number">2</span><br><span class="hljs-number">1</span>*<span class="hljs-number">3</span>=<span class="hljs-number">3</span><br><span class="hljs-number">1</span>*<span class="hljs-number">4</span>=<span class="hljs-number">4</span><br><span class="hljs-number">1</span>*<span class="hljs-number">5</span>=<span class="hljs-number">5</span><br><span class="hljs-number">1</span>*<span class="hljs-number">6</span>=<span class="hljs-number">6</span><br><span class="hljs-number">1</span>*<span class="hljs-number">7</span>=<span class="hljs-number">7</span><br><span class="hljs-number">1</span>*<span class="hljs-number">8</span>=<span class="hljs-number">8</span><br><span class="hljs-number">1</span>*<span class="hljs-number">9</span>=<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><ol start="2"><li>再写一个for循环包裹上一个for循环</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>        System.out.println(<span class="hljs-number">1</span>+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(<span class="hljs-number">1</span>*i));<br>    &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：此时已经能够输出乘法表，但是有多余的部分，需要去重，即把 1 换成  j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= j; i++) &#123;<br>             System.out.println(j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(j*i));<br><br>     &#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>此时乘法表已经完成，剩下就是排版，即再输出后面加“\t” 以及 换行即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= j; i++) &#123;<br>             System.out.print(j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(j*i)+<span class="hljs-string">&quot;\t&quot;</span>);<br><br>     &#125;<br>         System.out.println();<br>     &#125;<br></code></pre></td></tr></table></figure><h3 id="增强For循环"><a href="#增强For循环" class="headerlink" title="增强For循环"></a>增强For循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">int</span> [] numbers = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i :numbers)&#123;<br>        System.out.println(i);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="break、continue、goto"><a href="#break、continue、goto" class="headerlink" title="break、continue、goto"></a>break、continue、goto</h3><p>break: 循环的主体部分， 强制退出循环</p><p>continue：用于终止某一次循环</p><p>goto：保留字，类似前端的锚点</p><h3 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h3><p>方法：语句的集合，即函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">main()&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    Sys.out(c)<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span> <span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法的格式：  修饰符  返回值类型  方法名 （参数类型，参数名 ）{</strong></p><p><strong>。。。</strong></p><p><strong>方法体</strong></p><p><strong>。。。</strong></p><p><strong>return  返回值；</strong></p><p><strong>}</strong></p><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><ul><li>静态方法，static修饰</li></ul><p><strong>类一</strong>实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>     <span class="hljs-keyword">return</span> ;<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>类二</strong>可以直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二种情况</strong>：方法a可以直接调用方法b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一种普通方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>  <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>      b();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;   <br>  &#125;<br>&#125;<br><span class="hljs-comment">//第二种静态方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>      b();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：以下情况会报错，原因是static方法与类同时加载，此时b还没有创建，无法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>      b();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//调用举例1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo02</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo02</span>();<br>        demo.a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>      <span class="hljs-keyword">return</span> a + b;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br><br>  &#125;<br><span class="hljs-comment">//调用举例2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <br>       Demo.a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>      <span class="hljs-keyword">return</span> a + b;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br><br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>非静态方法</li></ul><p><strong>类一</strong>非静态方法，无法夸类调用，可以实例化这个类，即new 一个类调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>     <span class="hljs-keyword">return</span> ;<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>类二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> 类名（）.方法（）<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>().sayHello();<br>    <span class="hljs-comment">// 一般写成这种格式</span><br>    <span class="hljs-comment">// 对象类型  对象名字  = 对象的值</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>()<br>    <span class="hljs-comment">// 使用</span><br>    student.sayHello();<br>     <br>        sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>实参与形参数的类型要一致</strong></em></p><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><p><strong>值传递</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-comment">//值传递</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> a= <span class="hljs-number">1</span>;<br>        System.out.println(a);<span class="hljs-comment">//  1</span><br>        Demo02.change(a);<br>        System.out.println(a);<span class="hljs-comment">// 1,原因是Java中是值传递，change方法中没有返回值，int a 是形参</span><br>    &#125;<br>    <span class="hljs-comment">//注意，此处的返回值为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        a=<span class="hljs-number">10</span>;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">// 输出结果</span><br>Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=<span class="hljs-literal">true</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>引用传递</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-comment">//引用传递：传一个对象，本质还是值传递</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(student.name);<span class="hljs-comment">// null</span><br>        Demo02.change(student);<br>        System.out.println(student.name);<span class="hljs-comment">// Student</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(Student student)</span>&#123;<br>        <span class="hljs-comment">// 此处student是一个对象：指向的是Student这个类-----Student student = new Student();这是</span><br>        <span class="hljs-comment">// 一个具体的类，可以改变属性！</span><br>        student.name = <span class="hljs-string">&quot;Student&quot;</span>;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义了一个Student类，有一个属性：name</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span>&#123;<br>    String name;<span class="hljs-comment">// 默认值是 null</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>重载就是在同一个类中，有相同的函数名称，但是行参不同的函数。</p><p><strong>规则</strong>：</p><ul><li>方法的名称必须相同。</li><li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）。</li><li>方法的返回类型可以相同也可以不同</li><li>仅仅返回类型不同不能够称为方法的重载</li></ul><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul><li>JDK1.5开始，java支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后面加一个省略号（…）。</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMax</span><span class="hljs-params">( <span class="hljs-type">double</span>...numbers)</span>&#123;<br>    <span class="hljs-keyword">if</span>(numbers.length == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;No argument passed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> numbers[<span class="hljs-number">0</span>];<br>    <br>    <span class="hljs-comment">//排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span> ; i&lt;numbers.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(numbers[i]&gt;result)&#123;<br>            result = numbers[i];<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;The max value is &quot;</span>+ result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归讲解"><a href="#递归讲解" class="headerlink" title="递归讲解"></a>递归讲解</h3><p>递归：A方法调用A方法！就是自己调用自己</p><p><strong>结构</strong>：</p><ul><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</li><li>递归体：什么时候需要调用自身方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(f(<span class="hljs-number">10</span>));<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">double</span> n )</span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>相同类型数据的有序集合。</li><li>相同类型的若干个数据，按照一定的先后顺序排列组合而成。</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们。</li></ul><p><strong>数组的声明与创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//变量的类型 变量的名字  = 变量的值;</span><br>      <span class="hljs-comment">//1.定义</span><br>      <span class="hljs-type">int</span> [] nums ;<br>      <span class="hljs-comment">// 这里面可以放10个int类型的数字</span><br>      nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>      <span class="hljs-type">double</span>[] ds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">10</span>];<br>      nums[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>      nums[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>      nums[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>      nums[<span class="hljs-number">3</span>] = <span class="hljs-number">3</span>;<br>      nums[<span class="hljs-number">4</span>] = <span class="hljs-number">4</span>;<br>      nums[<span class="hljs-number">5</span>] = <span class="hljs-number">5</span>;<br>      nums[<span class="hljs-number">6</span>] = <span class="hljs-number">6</span>;<br>      nums[<span class="hljs-number">7</span>] = <span class="hljs-number">7</span>;<br>      nums[<span class="hljs-number">8</span>] = <span class="hljs-number">8</span>;<br>      nums[<span class="hljs-number">9</span>] = <span class="hljs-number">9</span>;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>       sum += nums[i];<br>       System.out.println(sum);          <br>   &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>数组的长度是确定的，数组一旦被创建，其大小就是不可以改变的。</li><li>其元素必须是同类型，不允许出现混合类型。</li><li>数组中的元素可以是任何数据类型，包括基本的数据类型和引用数据类型。</li><li>数组变量属于引用类型，数组也可以看成是对象，数组中的每一个元素相当于该对象的成员变量。</li><li>数组的本身就是对象，java中对象是在堆中的，因此数组无论保存原始数据类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li></ul><h3 id="三种初始化以及内存分析"><a href="#三种初始化以及内存分析" class="headerlink" title="三种初始化以及内存分析"></a>三种初始化以及内存分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//静态初始化</span><br><br>      <span class="hljs-type">int</span> [] a = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br>      <span class="hljs-comment">//动态初始化，包含默认初始化（int类型是0，String 类型是null）</span><br>      <span class="hljs-type">int</span> [] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>      b[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>; <span class="hljs-comment">//赋值</span><br><br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="下标越界"><a href="#下标越界" class="headerlink" title="下标越界"></a>下标越界</h3><p>超出数组长度，会报错（下标越界）</p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-comment">//反转数组</span><br>    <br>        <span class="hljs-comment">//打印数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>        System.out.println(i);<br>        &#125;<br>        <span class="hljs-comment">//求和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            sum += array[i];<br>            System.out.println(<span class="hljs-string">&quot;求和结果是&quot;</span>+sum);<br>        &#125;<br>        <span class="hljs-comment">// 查找最大元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (array[i]&gt;max) &#123;<br>            max = array[i];<br>            &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>二维数组</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">int</span> [][] a = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br>     System.out.println(a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br> &#125;<br><br></code></pre></td></tr></table></figure><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">int</span> [] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;;<br>       <span class="hljs-type">int</span> [] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>       <span class="hljs-comment">//打印</span><br>       System.out.println(array);<br>       System.out.println(Arrays.toString(array));<br>       <span class="hljs-comment">//排序(升序)</span><br>       Arrays.sort(array);<br>       System.out.println(Arrays.toString(array)) ;<br>       <span class="hljs-comment">//赋值</span><br>       Arrays.fill(b,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br>       System.out.println(Arrays.toString(b));<br>   &#125;<br>   <span class="hljs-comment">// 重写</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">h</span> <span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>       <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>       &#125;<br>    System.out.println(Arrays.toString(array));<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">int</span> [] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">62</span>,<span class="hljs-number">24</span>,<span class="hljs-number">56</span>,<span class="hljs-number">35</span>,<span class="hljs-number">99</span>,<span class="hljs-number">2</span>,<span class="hljs-number">35</span>,<span class="hljs-number">563</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-type">int</span>[] sort = sort(a); <span class="hljs-comment">//调用自己写的方法，返回一个排序后的数组</span><br>        System.out.println(Arrays.toString(sort));<br>    &#125;<br><br>    <span class="hljs-comment">//冒泡排序</span><br>    <span class="hljs-comment">//1.比较数组中，两个相邻的元素，如果第一个比第二个大，我们就想换位置</span><br>    <span class="hljs-comment">//2.每一次比较，都会产生出一个最大或者最小的数字</span><br>    <span class="hljs-comment">//3.下一轮可以少排序一次</span><br>    <span class="hljs-comment">//4.依次循环，直到结束</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span>[] array)&#123;<br>        <span class="hljs-comment">// 临时变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//外层循环，判断需要走多少次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//减少没有意义的比较</span><br>            <span class="hljs-comment">// 内层循环，比较两个数，如果第一个数比第二个数大，则交换位置</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;array.length-<span class="hljs-number">1</span>-i; j++)&#123;<br>                <span class="hljs-keyword">if</span>(array[j+<span class="hljs-number">1</span>]&lt;array[j])&#123;<br>                temp  = array[j];<br>                array[j] =array[j+<span class="hljs-number">1</span>];<br>                array[j+<span class="hljs-number">1</span>] =temp;<br>                flag = <span class="hljs-literal">true</span>;<br><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag== <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>&#125;<br>            <span class="hljs-keyword">return</span> array;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><ul><li><p>当一个数组中大部分元素为0（五子棋），或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p></li><li><p>稀疏数组的处理方式是：</p><pre><code class="hljs">              1. 记录数组一共有几行几列，有多少个不同的值              1. 把具有不同的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</code></pre></li></ul><p><em><strong>我真牛逼，这都写出来了，自己写的自己都看不懂了</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建一个二维数组 11 × 11  0 ： 没有棋子 ，1 ：  黑棋  2：白棋</span><br>        <span class="hljs-type">int</span> [][] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>        array1[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        array1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//输出原始的数组</span><br>        System.out.println(<span class="hljs-string">&quot;输出原始的数组&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> [] ints : array1) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt: ints) &#123;<br>            System.out.print(anInt+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        <span class="hljs-comment">//转换为稀疏数组</span><br>        <span class="hljs-comment">//拿到有效值的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (array1[i][j]  != <span class="hljs-number">0</span> ) &#123;<br>                sum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;有效值的个数：&quot;</span> + sum);<br><br>        <span class="hljs-comment">// 创建稀疏数组</span><br>    <span class="hljs-type">int</span> [][] array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>    array2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>;<br>    array2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">11</span>;<br>    array2[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br><br>    <span class="hljs-comment">//遍历二维数组，将非零的值，存放到稀疏数组中</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array1[i].length; j++) &#123;<br><br>                <span class="hljs-keyword">if</span> (array1[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    count++;<br>                    array2[count][<span class="hljs-number">0</span>] = i;<br>                    array2[count][<span class="hljs-number">1</span>] = j;<br>                    array2[count][<span class="hljs-number">2</span>] = array1[i][j];<br>                &#125;<br>            &#125;<br>&#125;<br>        <span class="hljs-comment">// 输出稀疏数组</span><br>        System.out.println(<span class="hljs-string">&quot;稀疏数组&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array2.length; i++)&#123;<br>            System.out.println(array2[i][<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;\t&quot;</span><br>            +array2[i][<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;\t&quot;</span><br>            +array2[i][<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;\t&quot;</span><br>            );<br>        &#125;<br>System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;还原&quot;</span>);<br>        <span class="hljs-comment">// 读取稀疏数组</span><br>        <span class="hljs-type">int</span> [][] array3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][array2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-comment">// 给元素还原值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;array2.length; i++)&#123;<br>            array3[array2[i][<span class="hljs-number">0</span>]][array2[i][<span class="hljs-number">1</span>]] = array2[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-comment">// 打印</span><br>        System.out.println(<span class="hljs-string">&quot;输出原始的数组&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> [] ints : array3) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt: ints) &#123;<br>                System.out.print(anInt+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p><strong>面向过程思想</strong>：</p><ul><li>步骤清晰简单，第一步做什么，第二步做什么……</li><li>面对过程适合处理一些较为简单的问题</li></ul><p><strong>面向对象思想</strong>：</p><ul><li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面对过程的思索。</li><li>面对对象适合处理复杂的问题，适合处理需要多人协作的问题！</li></ul><p>对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面象对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</p><p><strong>面向对象编程</strong>：</p><ul><li>以类的方式组织代码，以对象的组织（封装）数据。</li><li>抽象</li><li>三大特性：</li></ul><ol><li>封装</li><li>继承</li><li>多态</li></ol><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p><em><strong>终于搞明白了这个玩意[苦涩][苦涩]</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 类：抽象的，需要实例化</span><br>        <span class="hljs-comment">// 类实例化后会返回一个自己的对象！</span><br>        <span class="hljs-comment">//student 对象就是一个具体的Student类的具体实例</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student1.name = <span class="hljs-string">&quot;xiaoming&quot;</span>;<br>        student1.age =<span class="hljs-number">15</span>;<br>        System.out.println(student1.name);<br>        System.out.println(student1.age);<br><br>        System.out.println(<span class="hljs-string">&quot;================================================================&quot;</span>);<br>        System.out.println(student2.name);<br>        System.out.println(student2.age);<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">// 学生类,这是一个模板，是对象共同拥有的属性，一个模板可以new 很多对象</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-comment">// 属性：  字段</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//方法</span><br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;Student&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//输出</span><br>xiaoming<br><span class="hljs-number">15</span><br>================================================================<br><span class="hljs-literal">null</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ul><li>一个类即使什么都不写，只要被创建了就有一个默认的方法，即构造方法。</li><li>1.必须和类的名字相同</li><li>2.必须没有返回类型，也不能写void</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(student.name);<span class="hljs-comment">// null</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 学生类,这是一个模板，是对象共同拥有的属性，一个模板可以new 很多对象</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span>&#123;<br>    String name;<br>    <span class="hljs-comment">// 1.无参构造,可以实例化初始值</span><br>    <span class="hljs-comment">// 2.使用new关键字必须要有构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// this.name = &quot;Student&quot;;</span><br>    &#125;<br><br>    <span class="hljs-comment">// 有参构造，一旦定义了有参构造，无参必须显示定义  ，即无参中的this.name = &quot;Student&quot;;必须去掉，不然会报错，当new一个对象的时候</span><br>    <span class="hljs-comment">// 因为有两个方法，所以会出现方法的重载，传参数则进入有参构造</span><br><br>    <span class="hljs-comment">// 草了，这是真的神奇，融会贯通了</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">// this.name = name(属性中的String name;)</span><br>        <span class="hljs-comment">//name 指的是形参中的(String name)</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>构造器</strong>：</p><ul><li>和类名相同</li><li>没有返回值</li></ul><p><strong>作用</strong>：</p><ul><li>new 本质在调用构造方法</li><li>初始化对象的值</li></ul><p><strong>注意点</strong>：</p><ol><li>定义参数构造后，如果想使用无参构造，显示的定义一个无参的构造</li></ol><p><img src="/img/newObject.png" alt="对象在内存中的创建过程图"></p><h3 id="类与对象的小结"><a href="#类与对象的小结" class="headerlink" title="类与对象的小结"></a>类与对象的小结</h3><ol><li>类与对象</li></ol><p>​类是一个模板：抽象，对象是一个具体的实例</p><ol start="2"><li>方法</li></ol><p>​定义与调用</p><ol start="3"><li>对象的引用</li></ol><p>​引用类型： 基本类型（8）</p><p>​对象是通过引用来操作的：栈—-&gt;堆</p><ol start="4"><li>属性：字段Filed 成员变量</li></ol><p>​默认初始化：</p><p>​数字：0   0.0</p><p>​char ： u0000</p><p>​boolean ： false</p><p>​引用： null</p><p>修饰符  属性类型 属性名 &#x3D; 属性值！</p><ol start="5"><li><p>对象的创建和使用</p><ul><li>必须使用new  关键字创造对象，构造器  Student student &#x3D; new Student（）；</li><li>对象的属性    student.name</li><li>对象的方法   student.say();</li></ul><ol start="6"><li><p>类：</p><p>静态的属性      属性</p><p>动态的方法      方法</p></li></ol></li></ol><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li><p>该露的露，该藏的藏</p><p>我们设计要追求 “高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</p></li><li><p>封装（数据的隐藏）</p><p>通常，应禁止直接访问一个对象中数据的实际表示，而应该通过操作接口来访问</p></li><li><p>属性私有：Get&#x2F;Set</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.woniu;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;Student&quot;</span>);<br>        System.out.println(student.getName());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String  email;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//属性</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>    <span class="hljs-comment">//无参方法</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>    <span class="hljs-comment">//Get</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-comment">//Set 注意：可以设置属性，进行判断 age</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(age&lt;<span class="hljs-number">20</span> || age &gt;<span class="hljs-number">100</span>)&#123;<br>            age = <span class="hljs-number">18</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护增加了</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extends的意思是“扩展”。子类是父类的扩展</li><li>java中只有单继承，没有多继承！</li><li>继承是类与类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的两个类，一个为子类（派生类），一个是父类（基类）。子类继承父类，使用关键字extends来表示。</li><li>子类与父类之间，从意义上讲应该具有“is a”的关系。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.say();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>&#125;<br><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>object类</li><li>super</li><li>方法重写</li></ul><h3 id="Supper"><a href="#Supper" class="headerlink" title="Supper"></a>Supper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">//student.test(&quot;test&quot;);</span><br>       <span class="hljs-comment">// student.test1();</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Student&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 隐藏代码，调用了父类的无参构造方法</span><br>        <span class="hljs-built_in">super</span>();<span class="hljs-comment">//调用了父类的构造方法，必须在子类的第一行</span><br>        System.out.println(<span class="hljs-string">&quot;子类无参&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello,world!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(name);<br>        System.out.println(<span class="hljs-built_in">this</span>.name);<br>        System.out.println(<span class="hljs-built_in">super</span>.name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>     say1();<br>     <span class="hljs-built_in">this</span>.say1();<br>     <span class="hljs-built_in">super</span>.say();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类无参&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Johnny&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>supper注意点：</p><ol><li>supper调用父类的构造方法，必须在构造方法中的地一个</li><li>supper 必须只能出现在子类的方法中或者构造方法中</li><li>supper 和 this 不能同时调用构造方法</li></ol><p>Vs  this ：</p><ul><li>代表的对象不同：</li></ul><p>​this ： 本身调用者这个对象</p><p>​supper： 代表父类对象的应用</p><ul><li><p>前提</p><p>​this：没有继承也可以使用</p><p>​supper：只能在继承中使用</p></li><li><p>构造方法</p><p>​    this（）：本类的构造</p><p>​supper（）：父类的构造</p></li></ul><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//静态的方法和非静态的方法区别很大！</span><br>        <span class="hljs-comment">// 静态方法 ： 方法的调用只和左边，定义的数</span><br>        <span class="hljs-comment">// 非静态方法：重写</span><br>        <span class="hljs-type">Demo03</span> <span class="hljs-variable">demo03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        demo03.say();<br>        <span class="hljs-type">Demo04</span> <span class="hljs-variable">demo04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        demo04.say();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//继承</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Demo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <br>    <span class="hljs-comment">// @Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo03===&gt;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo04===&gt;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br><br><br>Demo03===&gt;Hello World<br>Demo04===&gt;Hello World<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>重写</strong>：</p><ul><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大但不能缩小：  pubilic &gt;Protected&gt;Default&gt;private</li><li>抛出的异常：范围，可以缩小，但不能扩大： ClassNoFoundException –&gt; Exception(大)</li></ul><p><strong>重写</strong>，子类的方法和父类不需要一致：方法体不同！</p><p><em><strong>为什么要重写：父类的功能，子类不一定需要，或者不一定满足！</strong></em></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>动态编译： 类型 ：可扩展性</li><li>即同一方法可以根据发送的对象的不同而采取多种不同的行为方式</li><li>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多</li><li>多态存在的条件<ol><li>有继承关系</li><li>子类重写父类的方法</li><li>父类引用指向子类对象</li></ol></li><li><strong>注意</strong>：<ol><li>多态是方法的多态，属性没有多态性</li><li>父类和子类，有联系 类型转换异常！ ClassCastException！</li><li>存在条件 ：继承关系，方法需要重写，父类引用指向子类对象     Father   f1  &#x3D; new Son（）；</li><li>以下没有多态<br>- static 方法<br>- final 常量<br>- private方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//一个对象的实际类型是确定的</span><br>        <span class="hljs-comment">// new Demo03（）;</span><br>        <span class="hljs-comment">// new Demo04();</span><br>        <br>        <span class="hljs-comment">// 可以指向的引用数据类型就不确定了 ： 父类的引用指向子类</span><br><br>        <span class="hljs-comment">// Demo03 能够调用的方法都是自己的或者是继承父类的！</span><br>        <span class="hljs-type">Demo03</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        <span class="hljs-comment">// Demo04 父类型，可以指向子类，但是不能调用子类独有的方法</span><br>        <span class="hljs-type">Demo04</span> <span class="hljs-variable">demo2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">demo3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        <span class="hljs-comment">// 对象能够执行哪些方法，主要看对象左边的类型，和右边的关系不大！</span><br>        demo.say();<br>        demo2.say();<br>        demo.run();<br>        <span class="hljs-comment">// 强制转换</span><br>        ((Demo03)demo2).run();<br>        <span class="hljs-comment">//子类重写了父类的方法，执行子类的方法</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//继承</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Demo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo03===&gt;son&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 子类独有的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Run demo&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo04===&gt;father&quot;</span>);<br>    &#125;<br>&#125;<br><br><br>Demo03===&gt;son<br>Demo03===&gt;son<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h3><p>instanceof 判断类之间的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// object &gt; String</span><br>        <span class="hljs-comment">// object &gt; Person &gt; Teacher</span><br>        <span class="hljs-comment">// object &gt; Person &gt; Student</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Teacher); <span class="hljs-comment">//false</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> String); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;================================================================&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Teacher); <span class="hljs-comment">//false</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//System.out.println(person instanceof String); // 编译报错</span><br>       System.out.println(<span class="hljs-string">&quot;================================================================&quot;</span>);<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>       <span class="hljs-comment">// System.out.println(student instanceof Teacher); //false</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Runnable&quot;</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><br>&#125;<br><br><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br>================================================================<br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br>================================================================<br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// object &gt; String</span><br>        <span class="hljs-comment">// object &gt; Person &gt; Teacher</span><br>        <span class="hljs-comment">// object &gt; Person &gt; Student</span><br><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">// 类之间的转换   父     子</span><br>        <span class="hljs-comment">// 高                低</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">// student 将这个对象转换为Student类型，我们就可以使用Student类型的方法！</span><br>        <span class="hljs-comment">// 低               高</span><br>        ((Student)student).go();<br>    &#125; <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Runnable&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;GO&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>父类引用指向子类的对象</li><li>把子类转换为父类，向上转型</li><li>把父类转换为子类，向下转型；<strong>强制转换，丢失精度（丢失方法）</strong></li><li>方便方法的调用，减少重复的代码！</li></ul><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-comment">// 默认，赋初始值</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;默认代码块&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-comment">//只执行一次</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</p></li><li><p>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</p></li><li><p>抽象类，不能使用new 关键字来创建对象，它是用来让子类继承的。</p></li><li><p>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</p></li><li><p>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// abstrack 抽象类： 类  extends： 单继承～ （接口可以多继承）</span><br><span class="hljs-keyword">public</span> abstrack <span class="hljs-keyword">class</span> <span class="hljs-title class_">Action</span>&#123;<br>    <br>    <span class="hljs-comment">//抽象类相当于约束，子类或者子子类去实现它： 约束！</span><br>    <span class="hljs-comment">// 抽象类中可以写普通方法～</span><br>    <span class="hljs-comment">// 抽象方法必须在抽象类中</span><br>    <span class="hljs-comment">// 抽象的抽象： 约束</span><br>    <br>    <span class="hljs-comment">//new 一个抽象类，抽象类是有构造方法的。 因为，虽然抽象类不能直接被实例化，但是继承抽象类的子类毫无疑问能被实例化，在其子类被实例化时，必然执行子类的构造方法， 接口是没有构造方法的。</span><br>    <span class="hljs-comment">// </span><br>    <span class="hljs-keyword">public</span> abstracct <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类存在的意义和作用"><a href="#抽象类存在的意义和作用" class="headerlink" title="抽象类存在的意义和作用"></a>抽象类存在的意义和作用</h3><ul><li><p>抽象是将共性抽离出来，产生抽象性概念非具体。</p></li><li><p>抽象类和抽象方法作用： 使类的抽象性明确起来，告诉用户和编译器打算怎么使用他们。抽象类还是很有用的重构工具，因为它们使得我们可以很容易地将公共方法沿着继承层次结构向上移动。</p></li><li><p>抽象类不可实例化，抽象类包含普通方法和抽象方法。抽象方法只需声明无需方法体。</p></li><li><p>子类继承抽象类，父类的抽象方法必须被子类重写，普通方法可不需要重写。</p></li></ul><h3 id="接口的定义与实现"><a href="#接口的定义与实现" class="headerlink" title="接口的定义与实现"></a>接口的定义与实现</h3><ul><li><p>普通类：只有具体的实现</p></li><li><p>抽象类：具体实现和规范（抽象方法）都有！</p></li><li><p>接口：只有规范！</p></li><li><p>接口就是规范，定义的是一组规则</p></li><li><p>接口的本质是契约，规定好后大家都接受。</p></li></ul><p><strong>作用</strong>：</p><ul><li>约束</li><li>定义一些方法，让不同的人实现～ 10 ———  1</li><li>public abstract</li><li>public statis final</li><li>接口不能被实例化～，接口中没有构造方法～</li><li>implemments可以实现多个接口</li><li>必须重写接口中的方法</li></ul><p><strong>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// interface  定义关键字 ，接口都需要有实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <br>    <span class="hljs-comment">// 接口中的所有定义的方法其实都是抽象的 public abstract </span><br>    <span class="hljs-keyword">void</span>  <span class="hljs-title function_">add</span><span class="hljs-params">(String username)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String username)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String username)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String username)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象类： extends</span><br><span class="hljs-comment">// 类 可以实现接口 implements 接口</span><br><span class="hljs-comment">// 实现了接口的类，就需要重写接口中的方法～</span><br><br><span class="hljs-comment">// 多继承～ 利用接口实现多继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="N种内部类"><a href="#N种内部类" class="headerlink" title="N种内部类"></a>N种内部类</h3><ul><li>内部类就是在一个类的内部再定义一个类，比如，A类中定义了一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了</li></ul><ol><li>成员内部类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-variable">radius</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>    &#125;<br>     <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Draw</span> &#123;     <span class="hljs-comment">//内部类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawSahpe</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(radius);  <span class="hljs-comment">//外部类的private成员</span><br>            System.out.println(count);   <span class="hljs-comment">//外部类的静态成员</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.局部内部类</p><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">()</span> &#123;<br>         <br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Man</span><span class="hljs-params">()</span>&#123;<br>         <br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> People <span class="hljs-title function_">getWoman</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;   <span class="hljs-comment">//局部内部类</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.匿名内部类</p><p>匿名内部类应该是平时我们编写代码时用得最多的，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。下面这段代码是一段Android事件监听代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">scan_bt.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnClickListener</span>() &#123;<br>             <br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-comment">// TODO Auto-generated method stub</span><br>                 <br>            &#125;<br>        &#125;);<br>         <br>        history_bt.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnClickListener</span>() &#123;<br>             <br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-comment">// TODO Auto-generated method stub</span><br>                 <br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>4.静态内部类</p><p>　　静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        Outter.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outter</span>.Inner();<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Outter</span><span class="hljs-params">()</span> &#123;<br>         <br>    &#125;<br>     <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Inner</span><span class="hljs-params">()</span> &#123;<br>             <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2022-10-09  午</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown文档学习</title>
    <link href="/2022/10/06/Java/MarkDown%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/10/06/Java/MarkDown%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="MarkDown文档学习"><a href="#MarkDown文档学习" class="headerlink" title="MarkDown文档学习"></a>MarkDown文档学习</h1><p>一级标题#+空格+文字即一级标题</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>二级标题 ##+空格+文字即二级标题</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>三级标题 ###+空格+文字</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>四级标题 ####+空格+文字</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>Hello World ！！！</strong></p><p>字体加粗 字体两边+**</p><p><em>Hello World ！！！</em></p><p>字体倾斜 字体两边加+*</p><p><em><strong>Hello World ！！！</strong></em></p><p>字体倾斜且加粗 字体两边加+***</p><p><del>Hello World ！！！</del></p><p>字体删除线 字体两边加+～～</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>love is give </p></blockquote><p>引用   &gt;+空格</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>方式一：—</p><hr><p>方式二：***</p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>图片：![名字]+（路径）</p><p><img src="/img/09b.jpg" alt="图片"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>超链接：[名字]+(地址)</p><p><a href="www.baidu.com">baidu</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>有序列表：1+.+空格</p><ol><li>A</li><li>b</li><li>c</li></ol><p>无序列表：-+空格</p><ul><li>a</li><li>b</li><li>c</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>举例：1|2|3——表头</p><p>​  4|5|6——内容</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>例子：&#96;&#96;&#96;</p><p>例子：&#96; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>登山，等一半</title>
    <link href="/2022/10/04/%E9%9A%8F%E6%83%B3/%E7%99%BB%E5%B1%B1/"/>
    <url>/2022/10/04/%E9%9A%8F%E6%83%B3/%E7%99%BB%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-PwNKODlb" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="478507889" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme=" #1da496"    ></div><p><strong>此时我已经登上了这座山，比我想象中的难，也比我想象中的容易，难是因为坡度很大，容易是因为两个小时就上来了，似乎有点惨，这意味着我要在这里吹四个小时的风，想来这么久的时间，已经够我整理最近的思绪了，爬山的队友很菜，所以我一个人先走了，这对我来说，是一种幸运。我喜欢这种感觉，一个人去完成一些事情，特别是我对这件事赋予了自己的意义。</strong><br><strong>哈哈哈哈，刚我写到这里还在想写什么，有人问这个老板，最近的厕所在哪里，老板估计看他是个男的，直接用手指着周围划了一圈说，都可以，笑死我了。</strong><br><strong>之所以要出去转转，有很多原因，其中有一种是某天可以和你一起，哈哈哈，这确实是件开心的事。</strong><br><strong>无论是海也好，爬山看日出也好，其中的体会我感受良多，下次，像我们约好的，会一起去感受到山与海，我想这会有不一样的意义，我想要是等到我迟暮，想起某些事情，这一件值得我得意🙃。</strong><br><strong>我们是两个不同性格的人，我以我的观点出发，我感觉到你并不快乐，或者说，你的快乐里面少了一点东西，也许这是你快乐的方式吧，也许是我的偏见，但我想，我应该告诉你，并不是为了想说我发现你不快乐，而是生活中还是有许多的人关心我们，关注我们，我想这也是能够支撑大家走下去的原因，总有人喜欢你，有人讨厌你，期待你会能够保持热爱，开心。(如果我感觉错了，忽略这点)</strong><br><strong>一起加油吧，为生活，为各自的梦想，去成为我们各自想成为的人。</strong><br><em><strong>2022&#x2F;10&#x2F;04&#x2F;凌晨</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>愤怒</title>
    <link href="/2022/09/29/%E9%9A%8F%E6%83%B3/%E6%84%A4%E6%80%92/"/>
    <url>/2022/09/29/%E9%9A%8F%E6%83%B3/%E6%84%A4%E6%80%92/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="160e3836e1080babcbbea859b8bf72a4f947ffc58e25772c16dfc0a8625893ee"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>私密文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>O Captain! My Captain!</title>
    <link href="/2022/09/27/%E9%9A%8F%E6%83%B3/%E8%88%B9%E9%95%BF%EF%BC%8C%E6%88%91%E7%9A%84%E8%88%B9%E9%95%BF%EF%BC%81/"/>
    <url>/2022/09/27/%E9%9A%8F%E6%83%B3/%E8%88%B9%E9%95%BF%EF%BC%8C%E6%88%91%E7%9A%84%E8%88%B9%E9%95%BF%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-mJzSonUH" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="478507889" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme=" #1da496"    ></div><p>在过去的几年中，互联网对我产生了有很大的影响，我在其中感受到了许多。人类以奇特的智慧创造出互联网<br>互联网用奇迹创造了一个又一个的奇迹，如今琳琅满目的产·品不断迭代，消费模式的升级，生产力提高等诸多因素，互联网已经是<br>一个自成一方天地，让刚进入的人们如同刘姥姥进大观园，每天被不同的消息所刺激，作出反应。在这中间我也见识到了互联网世界中<br>不同的好与坏。<br>今天，许多的感触终于汇聚到了一起，使我终于有力量能够写下一点什么了。我想说的是互联网进步中，不可缺少的一个群体，他们不是组织，<br><em>不是公会，没有公司，他们来自五湖四海，世界各地。他们有许多的称号，比起那些，我更加愿意称他们为“船长”，一群有信念，积极的，热切的”船长”.就像那首诗歌——*<em>“O Captain,My Captain”</em></em>,作为一个船长，一代一代的发扬和继承船长的精神，担当起了船长的责任，引领人们去追寻自己心中的热爱。*</p><h4 id="发现船长"><a href="#发现船长" class="headerlink" title="发现船长"></a>发现船长</h4><h4 id="跟随船长"><a href="#跟随船长" class="headerlink" title="跟随船长"></a>跟随船长</h4><h4 id="模仿船长"><a href="#模仿船长" class="headerlink" title="模仿船长"></a>模仿船长</h4><h4 id="成为船长"><a href="#成为船长" class="headerlink" title="成为船长"></a>成为船长</h4><p>网络是个大世界，能看到许多不同与我们生活的面貌<br>互联网的开源精神<br>衍生出的黑客精神<br>归根结底是一群带着一个狂热的心的人们<br>做一个这样的人，学习这样的精神</p><p>真的重要的东西是免费的，无法用任何一样东西去衡量，我们只能去称赞，崇拜<br>大师的回馈，回馈到社会<br>大师有大师的责任<br>互联网的东西时刻都在更新，改变，但那群人的精神永远在路上。</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>船长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二</title>
    <link href="/2022/09/15/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%BA%8C/"/>
    <url>/2022/09/15/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>远方来信，你的信我还没有收到，但我已经想写点什么了，特别是在晚上，这个时间段总是让人容易感性，想来距离上次写信已经有月余了，在这期间，我经历了一场友谊的大起大落，也正在经历一场异性之间的错误，也许要经历完了，在灰暗的时刻我竟没有大哭的勇气，现在想来，确实十分怀念能够大哭的日子。思来想去，却总是和你说一些丧气的话，实在是不够尊重你，想来你我之间不应该是以一种树洞之间的交流，写信的这一步，我们都迈出了，接下来，我们可以试着走出新的一步。这是什么，我不知道。<br>我确是落后于人太多了，但我任然坚信在三年以后，我会改变我现在的状况，等工作小有成就，我会准备自考，自考后我会考研。未来的计划暂时止步于此，届时我已经二十过半，是时候为我的人生大事考虑了。<br>我时常生活在各种混乱的观念之中，但偶尔也能够感受到一丝契机，那种属于我，个人的，独特的思想，这是我快乐的源泉之一，可惜确实不常见，这种契机却只有孤独，才能够捕捉到。与自我的对话，我偶尔会看不同种类的书，也许是禁书，也许是正书，我也不知道好坏，也许不止有好的和坏的，也许没有什么好坏，也许什么都可以模棱两可，也许什么都可以以模糊定义，放我想到这里，我笑了，我很庆幸现在在改变这种想法，因为这是错的，从开始的把好的和坏的否定，模糊掉概念。若以次出发，由一到多，如此，不是所有的东西都可以改变吗，这是不对的，好的就是好的，所有的东西都要有原本的“一”，才能衍生到“多”，但其实这中间还是有其他的问题，苏格拉底说，没有绝对的坏，所有的坏都是一种对好的偏离，如此，如果没有一种什么是好的概念，想来也没有坏的存在了，这一点能够感受到，东西的方的文化有许多的共同之处，道生一，一升二，二生三，三生万物想必就是如此。道家说:吾以观复。夫物芸芸，各复归其根。如果灵魂能够轮回，那我岂不是活了几百年，这个苏格拉底的说法倒是有些一致，他说我们学习知识并不是真的在学习，只是为了唤醒我们本来的记忆，彼时的东西方还没有交流，却能够想到一致，实在是让人惊叹不已！<br>我们继续说好坏之间的概念，如果说接受了以上的想法，而进入了崇拜好的观念这却又陷入了一个困境，我粗浅的比喻一下，在好的观念里面，可以比作完全的理想主义者，一些看起来都是那么的美好，想着美好的希望出发，可惜啊，现实总会把它击的粉碎，如此，崇高的理想主义就演变成了一个不可能完成的任务，巨大的失落感充斥着你的心灵，为了解救自我，你开始劝自己，没什么，没必要，这不重要，最后就回到了没有什么是好的的起点，于是陷入了虚无，陷入了毁灭。<br>所以借此我又想到一个问题，这是自我意识阶段的好，以好为目标出发，那么，在更高的一个层面上，我们应该去推动他吗，我们应该呼吁吗，这是需要我们思考的，关于这点道德经上说的好啊，天下皆知美之为美，斯恶（è）已；皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和（hè），前后相随。是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不恃，功成而弗居。夫（fú）唯弗居，是以不去。 但这时候却也有一个问题，那么，那些真的需要被引导的人，却因为没有人引导又应该怎么办呢，那些从来就没有这些概念的人又要如何生活呢，这是我们要思考的啊！如果你帮助他，这时候礼记就来了:行修言道，礼之质也。礼闻取于人，不闻取人。礼闻来学，不闻往教。那我们不应该帮助吗，这是我所困惑的。<br>写到此处不免有些悲哀，执古之道而御今啊，唉</p><p>缘起性空，缘起性空啊，缘不知道何处起，不能说一往情深，是情，皆非情，所以是情啊！男女之间情，古来的诗词都已经说通了，我却不曾达到那种高度，但确还是有一点感性与理性之间的抗争，缘已经起了，何时才能空掉呢，啊，原来缘分来了，情就生出来了，缘分散了，情就会消散了吗？我何尝有不是那个理想主义者的映射之一呢，只是我确是不知道什么时候会陷入虚无，然后奔向死亡。<br>说了一些话，却不是我故意说的如此高雅，想来你是能够明白的，实在是只有和你说，我才不会显得如此张扬。有人认为这些没有用，无法通过这个得到报酬，但我坚信，只有思想上的成长才是我长久的收入，这比财富我无法与任何一个人共同感受，但我希望你能够透过这些许的文字，来感受这个宏伟的世界啊！也许这样，我不会这么孤独，是的，有时候我感受到了孤独。<br>夜深了，我应该睡觉了，大多时候我都能知道我应该做什么，但有小部分时候我希望我不应该这么做，这样的话，也许我会变得怪异。</p><p>2022&#x2F;09&#x2F;15   子夜</p>]]></content>
    
    
    <categories>
      
      <category>远方来信</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>隐入城烟————与欢天才的分享</title>
    <link href="/2022/08/30/%E9%9A%8F%E6%83%B3/%E9%9A%90%E5%85%A5%E5%9F%8E%E7%83%9F/"/>
    <url>/2022/08/30/%E9%9A%8F%E6%83%B3/%E9%9A%90%E5%85%A5%E5%9F%8E%E7%83%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="隐入城烟"><a href="#隐入城烟" class="headerlink" title="隐入城烟"></a>隐入城烟</h4><p>心中思绪万千，下笔无言。</p><p><img src="/img/yin-j.jpeg"></p><p>这是一部很棒的电影，十分庆幸能有缘分遇见，电影里要表现的东西太多太多了，我就一下我感触比较深的点和你分享下，哈哈哈，第一次哈，不要笑我</p><p><img src="/img/yin-h.jpeg"></p><p><img src="/img/yin-a.jpeg"></p><p><img src="/img/yin-b.jpeg"></p><p><img src="/img/yin-g.jpeg"><br><img src="/img/yin-d.jpeg"><br><img src="/img/yin-i.jpeg"><br><img src="/img/yin-k.jpeg"></p><p><img src="/img/yin-f.jpeg"></p><p>这导演太狗了，要寄刀片给他就好，让稍有起色的生活，把我的希冀拉入深渊，看这种电影太痛苦了，活着是这样，平凡的世界是这样，这部电影也是，太写实了，我无法忍受太多的真实，这会让人感到很痛苦，所以在我心里，他们就是幸福的去市里生活了——我不管，包括平凡的世界里也是，女主都没有死，我说的 ：)！</p><p>电影里面有很多的意象：比如小麦的命数（我觉得的暗示女主的命运）、鸡（女主不能生育，特喜欢小孩小孩）、驴（这个不知道）、燕子（我觉得是希望）还有那段对话：种子在地里，有脚的人却走不开</p><p>然后他的婚姻到爱情——除了村里人羡慕，我们又何尝不羡慕呢……（狗导演）</p><p>我对抽血有些许的想法，不知道对不的：有钱的人抽穷人的血，几乎没有回报（些许的回报）这让我想到————资本家、地主的压迫剥削，总有一天资本家会吊死在路灯上的，（这里不能细说，保命.jpg）</p><p>最有感触的就是平凡的人生，我想，也许应该叫苦难的人生，即使如此他还是那么的爱他老婆（我也想有一个，我丢），苦难就是苦难，它不值得被歌颂，如果可以，没有人想经历苦难，而他们都是生活的强者，不论在平凡的世界中，还是活着，或是这部电影，都让我感受的了一股无语论比的力量，仿佛中我看到老人与海的那一慕：来吧，海浪再大些吧，我什么都不怕，来吧！我想这也是电影想让我们真的感受的情感吧，<strong>对生活的不屈，平凡的人生中，活出自己的故事</strong>，虽然主角在这其中有迫于生活的无奈，因为没有选择，但恰恰也是一种选择，有时候，我觉得我有很多选择，却无往不再枷锁之中，做出了最坏的选择。设身处地，我做不到。同时，我也会想，我的路又在哪里呢。。。。。。</p><p>女主的死：唉，狗导演，她没死，记住，没死，他两一起去市里了，我说的（我说的！！！） </p><p>最后想到罗翔老师说过的一句话：<strong>演好自己的剧本</strong></p><p><em><strong>与君共勉</strong></em></p><p>​2022年08&#x2F;30  夜</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>与朋友交呼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狐狸</title>
    <link href="/2022/08/30/%E9%9A%8F%E6%83%B3/%E7%8B%90%E7%8B%B8/"/>
    <url>/2022/08/30/%E9%9A%8F%E6%83%B3/%E7%8B%90%E7%8B%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="狐狸"><a href="#狐狸" class="headerlink" title="狐狸"></a>狐狸</h2><p>　　就在这当儿，跑来了一只狐狸。<br><img src="https://pprince.top/article/p-41.jpg"></p><p>　　“你好。”狐狸说。</p><p>　　“你好。”小王子很有礼貌地回答道。他转过身来，但什么也没有看到。</p><p>　　“我在这儿，在苹果树下。”那声音说。</p><p>　　“你是谁？”小王子说，“你很漂亮。”</p><p>　　“我是一只狐狸。”狐狸说。</p><p>　　“来和我一起玩吧，”小王子建议道，“我很苦恼……”</p><p>　　“我不能和你一起玩，”狐狸说，“我还没有被驯服呢。”</p><p>　　“啊！真对不起。”小王子说。</p><p>　　思索了一会儿，他又说道：“什么叫‘驯服’呀？”</p><p>　　“你不是此地人。”狐狸说，“你来寻找什么？”</p><p>　　“我来找人。”小王子说，“什么叫‘驯服’呢？”</p><p>　　“人，”狐狸说，“他们有枪，他们还打猎，这真碍事！他们唯一的可取之处就是他们也养鸡，你是来寻找鸡的吗？你”</p><p>　　“不，”小王子说，“我是来找朋友的。什么叫‘驯服’呢？”</p><p>　　“这是已经早就被人遗忘了的事情，”狐狸说，“它的意思就是‘建立联系’。”</p><p>　　“建立联系？”</p><p>　　“一点不错，”狐狸说。“对我来说，你还只是一个小男孩，就像其他千万个小男孩一样。我不需要你。你也同样用不着我。对你来说，我也不过是一只狐狸，和其他千万只狐狸一样。但是，如果你驯服了我，我们就互相不可缺少了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了。”</p><p><img src="https://pprince.top/article/p-43.jpg"></p><p>　　“我有点明白了。”小王子说，“有一朵花……，我想，她把我驯服了……”</p><p>　　“这是可能的。”狐狸说，“世界上什么样的事都可能看到……”</p><p>　　“啊，这不是在地球上的事。”小王子说。</p><p>　　狐狸感到十分蹊跷。</p><p>　　“在另一个星球上？”</p><p>　　“是的。”</p><p>　　“在那个星球上，有猎人吗？”</p><p>　　“没有。”</p><p>　　“这很有意思。那么，有鸡吗？”</p><p>　　“没有。”</p><p>　　“没有十全十美的。”狐狸叹息地说道。<br>    <img src="https://pprince.top/article/p-49.jpg"></p><p>　　可是，狐狸又把话题拉回来：“我的生活很单调。我捕捉鸡，而人又捕捉我。所有的鸡全都一样，所有的人也全都一样。因此，我感到有些厌烦了。但是，如果你要是驯服了我，我的生活就一定会是欢快的。我会辨认出一种与众不同的脚步声。其他的脚步声会使我躲到地下去，而你的脚步声就会象音乐一样让我从洞里走出来。再说，你看！你看到那边的麦田没有？我不吃面包，麦子对我来说，一点用也没有。我对麦田无动于衷。而这，真使人扫兴。但是，你有着金黄色的头发。那么，一旦你驯服了我，这就会十分美妙。麦子，是金黄色的，它就会使我想起你。而且，我甚至会喜欢那风吹麦浪的声音……”</p><h5 id="我喜欢那风吹麦浪的声音……这让我想念你，相见亦无事，别后常思君。"><a href="#我喜欢那风吹麦浪的声音……这让我想念你，相见亦无事，别后常思君。" class="headerlink" title="我喜欢那风吹麦浪的声音……这让我想念你，相见亦无事，别后常思君。"></a>我喜欢那风吹麦浪的声音……这让我想念你，相见亦无事，别后常思君。</h5>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我喜欢的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写给儿子刘云帆</title>
    <link href="/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E5%86%99%E7%BB%99%E5%84%BF%E5%AD%90%E5%88%98%E4%BA%91%E5%B8%86/"/>
    <url>/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E5%86%99%E7%BB%99%E5%84%BF%E5%AD%90%E5%88%98%E4%BA%91%E5%B8%86/</url>
    
    <content type="html"><![CDATA[<h4 id="这首《写给儿子刘云帆》的作品，诗人刘年曾说，算是他的成名作"><a href="#这首《写给儿子刘云帆》的作品，诗人刘年曾说，算是他的成名作" class="headerlink" title="这首《写给儿子刘云帆》的作品，诗人刘年曾说，算是他的成名作."></a>这首《写给儿子刘云帆》的作品，诗人<a href="https://baike.baidu.com/item/%E5%88%98%E5%B9%B4/19458549">刘年</a>曾说，算是他的成名作.</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>突然想到了身后的事<br>写几句话给儿子</p><p>其实，火葬最干净<br>只是我们这里没有<br>不要开追悼会<br>这里，没有一个人懂得我的一生。</p><p>不要请道士<br>他们唱的实在不好听</p><p>放三天吧<br>我等一个人，很远<br>三天过后没来，就算了<br>有的人，永远都是错过</p><p>棺材里，不用装那么多衣服<br>土里，应该感觉不到人间的炎凉了。</p><p>忘记说碑的事了<br>弄一个最简单的和尚碑</p><p>抬碑的人辛苦<br>可以多给些工钱</p><p>碑上，刻个墓志铭<br>刻什么呢，我想一想<br>就刻个痛字吧<br>这一生，我一直忍着没有说出来</p><p>凿的时候<br>叫石匠师傅轻一点。</p><p>清明时候<br>事情不多，就来坐一坐<br>这里的风不冷</p><p>不用烧纸钱<br>不用挂青<br>我没有能力保佑你<br>一切靠自己</p><p>说说家事<br>说说那盆兰花开了没有<br>说说最近看了什么书<br>交了女朋友没有</p><p>不要提往事<br>我没有忘记<br>你看石碑上的那个字<br>刻得那么深</p><p>不要提国事<br>我早已料到<br>你看看，石碑上的那个字<br>刻得那么深。</p>]]></content>
    
    
    <categories>
      
      <category>现代诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>现代诗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我</title>
    <link href="/2022/08/30/%E9%9A%8F%E6%83%B3/%E6%9C%89%E8%AE%B0/"/>
    <url>/2022/08/30/%E9%9A%8F%E6%83%B3/%E6%9C%89%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-DuCHKuOt" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="478507889" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme=" #1da496"    ></div><ul><li>今天没有学到什么东西，配置环境，下载了几个docker镜像，时间就过去了，看起来学到了一些东西，其实都是拓展罢了，<br>但这不足以促使我来写点什么，真的让我恐慌的是，突如其来的人，连一点准备都没有，突然出现在我在城市，让我手足无措，这是我曾经期盼的，期盼已久的，但不是这种突入其来的，我感觉到了退缩，感觉到压力，我不希望去承担这样一份突如其来的惊喜，我大抵是个<br>不太负责任的人，怯懦时常有的事，发生在现在确实让我感到了羞愧，我不知道要用什么样的态度去面对，</li><li>我想说的是，我不是害怕得到，大概是害怕失去，可我却也没有拥有，不知道要说什么，确实感到了躁动，我时常活在过去，留恋我失去的，于是拼命抓住了一些时间的碎片，陶醉在其中，把希望寄托在了久久的未来，今天我会想起，在昨天的时候，我总想着有一天我会怎么样，我要怎么样，总是生活的抽象，丢失了具体，除了喜欢T是这件具体的事情我忘记不了，却也是失败，过去了很久，时间走了，人也走了，只有我留在原地，在一定的范围内循环。只活在自己臆想的世界里，兜兜转转，有人回作短暂的停留，有人告诉我外面的世界，有人要带我出去，我错过可一次又一次，找了一个又一个理由。停留了一年又一年，总在自欺欺人，有人问我为什么不出去，可能一开始没有走出去，后来就一直缺失走出去的勇气了，而今，似乎我又得到了眷顾，在我的不远处，有人偏着头，笑着问了我一句，你会试着走出来吗？</li><li>也有人对我说，你不走出去吗？而我在想，我真的会出去吗！</li></ul>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我迷惘的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>翻身</title>
    <link href="/2022/08/30/%E9%9A%8F%E6%83%B3/%E7%BF%BB%E8%BA%AB/"/>
    <url>/2022/08/30/%E9%9A%8F%E6%83%B3/%E7%BF%BB%E8%BA%AB/</url>
    
    <content type="html"><![CDATA[<ul><li><p>进站下楼梯，看见几个女人，提着箱子一步一踱，明显有些吃力，我要做点什么的时候，看到一个青年，白衣休闲裤，背书包，看来是个学生，他是不是也要做点什么，看来现在的年轻人，还是很有助人之心的，我看他快步下楼梯，眼神注意到了几个女人，脚步放慢，他伸出手了，他要帮助离得近的一个女人了，看来今天又是快乐的一天，我继续看去，他已经走远，经过女人身边时，恰好提了提书包，往前走去，还有一个需要帮助的女人，她的行李明显比前面的女的重，也许他会帮助她，他确实注意到她了，我确信，他下楼的时候视线飞快的扫过，目光在女人身上停留，他又匆匆走过，我跟了上去，我要看看他在想什么。</p></li><li><p>上车后坐在一个角落，看起来有点孤单，不，也可能是为了逃避罪恶感。我看他带上耳机，眼神之中略显疲惫，透过车窗看到几个女人也下来了，他的目光聚集在她们身上，他是想帮忙的，也许他他是能帮忙的，他没有。看来他只是，内心的虚荣，脱离土地</p></li><li><h4 id="没写完的，有点忙，有空再写"><a href="#没写完的，有点忙，有空再写" class="headerlink" title="没写完的，有点忙，有空再写"></a>没写完的，有点忙，有空再写</h4></li></ul>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我看见的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我喜爱一切不彻底的事物</title>
    <link href="/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E6%88%91%E5%96%9C%E7%88%B1%E4%B8%80%E5%88%87%E4%B8%8D%E5%BD%BB%E5%BA%95%E7%9A%84%E4%BA%8B%E7%89%A9/"/>
    <url>/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E6%88%91%E5%96%9C%E7%88%B1%E4%B8%80%E5%88%87%E4%B8%8D%E5%BD%BB%E5%BA%95%E7%9A%84%E4%BA%8B%E7%89%A9/</url>
    
    <content type="html"><![CDATA[<h4 id="中国现代文学馆研究员张定浩"><a href="#中国现代文学馆研究员张定浩" class="headerlink" title="中国现代文学馆研究员张定浩"></a>中国现代文学馆研究员<a href="https://baike.baidu.com/item/%E5%BC%A0%E5%AE%9A%E6%B5%A9/19840123">张定浩</a></h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>我喜爱一切不彻底的事物<br>细雨中的日光，春天的冷<br>秋千摇碎大风，<br>堤岸上河水荡漾。<br>总是第二乐章<br>在半开的房间里盘桓；<br>有些水果不会腐烂，它们干枯成<br>轻盈的纪念品。</p><p>我喜爱一切不彻底的事物。<br>琥珀里的时间，微暗的火，<br>一生都在半途而废，<br>一生都怀抱热望。<br>夹竹桃掉落在青草上，<br>是刚刚醒来的风车；<br>静止多年的水<br>轻轻晃动成冰。<br>我喜爱你忽然捂住我喋喋不休的口<br>教我沉默。</p>]]></content>
    
    
    <categories>
      
      <category>现代诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>现代诗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>是鲸鱼安慰了大海</title>
    <link href="/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E9%B2%B8%E9%B1%BC%E5%AE%89%E6%85%B0%E4%BA%86%E5%A4%A7%E6%B5%B7/"/>
    <url>/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E9%B2%B8%E9%B1%BC%E5%AE%89%E6%85%B0%E4%BA%86%E5%A4%A7%E6%B5%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="诗人燕七"><a href="#诗人燕七" class="headerlink" title="诗人燕七"></a>诗人<a href="https://baike.baidu.com/item/%E9%B2%B8%E9%B1%BC%E5%AE%89%E6%85%B0%E4%BA%86%E5%A4%A7%E6%B5%B7/24219310#2">燕七</a></h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>不是所有的树</p><p>都能在自己的家乡终老</p><p>不是所有的轨道</p><p>都通往春暖花开的方向</p><p>不是所有的花都会盛开</p><p>不是所有约定的人都会到来</p><p>我知道，是流星赞美了黑夜</p><p>鲸鱼安慰了大海</p>]]></content>
    
    
    <categories>
      
      <category>现代诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>现代诗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再读平凡的世界有感</title>
    <link href="/2022/08/29/%E9%9A%8F%E6%83%B3/%E5%86%8D%E8%AF%BB%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%96%E7%95%8C%E6%9C%89%E6%84%9F/"/>
    <url>/2022/08/29/%E9%9A%8F%E6%83%B3/%E5%86%8D%E8%AF%BB%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%96%E7%95%8C%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>这一生，我要做什么，你要到哪里去，你热爱什么，这是我在寻找的，我一次次的自己给自己规划好了失败，却把希望寄托在遥远的明天，明天离我很近，只有时间的距离，明天又无比的遥远，昨天事情我还是时常难以忘记，今天又在胡思乱想，少年啊，早长莺飞的春天已经过去了，又一年时间也会过去，少年啊，你要长大了吗，你到底要做什么啊，你总是在期待着，在试探着，在徘徊着，勇敢一点吧，平凡的少年。<br>少年啊，没有意义的少年，生活赋予了你很多的意义，你喜欢吗？你不会喜欢的，少年的肩膀要开始挑起生活的责任了，快些准备吧，短暂的时光会流逝的。<br>赤诚些吧，认真些吧，让爱多一点吧，再善良些吧，挑起你的责任，带上你自己，开始你的人生吧，少年啊，你只是一个平凡的人，放过自己吧，过上实际的生活吧，带着你的梦想。<br>我重读一本书，有新的感受，书却没有新的结局，人生在世到死去，若能平平淡淡的走过这些许的岁月，已然是万要庆幸的事情，生活少一点快乐吧，就像那句名言：生活中所有的快乐，都要用孤寂来偿还，少年啊，过上平凡的生活，连着梦，向这片土地扎根</p><p> 2022&#x2F;08&#x2F;29 子时</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一</title>
    <link href="/2022/08/05/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%B8%80/"/>
    <url>/2022/08/05/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>见字如面，来信悉知。<br>迷惘是一件好事，我总是在迷惘中又会陷入到另一个迷惘，当我发现我走出来以后，后面发现，不过是从一口小小的井，换到了一口大点的井，发生改变了吗，没有，没有改变，我们终究在最大的井里面，又活在每个自己的小井中，活出自己的偏见。有，有改变，至少我渐渐了解到，学习就是一个不断否定的过程，这是个悖论。<br>在我看来，你不必只选择一份工作，你经营一份谋生，一份生活，谋生让你活着，活着让你生活，这两者不冲突，如果，很幸运的话，两者能够耦合，那却是再好不过了，不能也没有关系，一切都是命运的安排，我们能觉得的事情很少，努力会取得一部分成功，成功会让你失去失败，不论好与坏，都是收获。相对来说，人生是没有意义的，一切的不确定，不完美赋予了一定的意义，但人生没有痛苦就是最大的幸福，快乐以后就是痛苦，也许这叫乐极生悲。我想，能平安的，尽量少的经历痛苦，经历快乐，走过几十年的时间，到达人生终点，这算是最大的幸福。<br>我说的，不一定适合你，但你自己可以寻找你需要什么，你有时间，但是不多，你可以寻找，但不能太久，边走边思考吧，也许在路上你会寻找到答案，试错也是对的开始。<br>又一个开始，别里太多希望给同学身上，少点期盼没那么痛苦，如果能避免室友之间的矛盾确实再好不过，我认为最重要的时间，时间很重要，不必再浪费在其他的事情上，也不必期盼明天，慢慢的，走出昨天吧，今天，是我的早晨，下雨，我知道今天我会做什么，这很重要，你今天会做什么呢？<br>太耀眼，优秀，不好，这样没有时间去经营自己，也需要去承担一定的责任，社会责任。<br>还有很多想说的，但是没有时间了，</p>]]></content>
    
    
    <categories>
      
      <category>远方来信</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>烦</title>
    <link href="/2022/07/13/%E9%9A%8F%E6%83%B3/%E7%83%A6/"/>
    <url>/2022/07/13/%E9%9A%8F%E6%83%B3/%E7%83%A6/</url>
    
    <content type="html"><![CDATA[<h6 id="看到你们活着都是这个叼样，我就放心了"><a href="#看到你们活着都是这个叼样，我就放心了" class="headerlink" title="看到你们活着都是这个叼样，我就放心了-__-!!!"></a><em>看到你们活着都是这个叼样，我就放心了-__-!!!</em></h6>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>烦心事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022.08.15演讲</title>
    <link href="/2021/12/03/%E9%9A%8F%E6%83%B3/2022.08.15%E6%BC%94%E8%AE%B2/"/>
    <url>/2021/12/03/%E9%9A%8F%E6%83%B3/2022.08.15%E6%BC%94%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e47c11f6929beb13a4ebf37805d157c795f49cb40c7b34af7e52c6324c629755"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>私密文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
