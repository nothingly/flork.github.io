<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我的计划</title>
    <link href="/2022/11/30/%E8%AE%A1%E5%88%92/%E6%88%91%E7%9A%84%E8%AE%A1%E5%88%92/"/>
    <url>/2022/11/30/%E8%AE%A1%E5%88%92/%E6%88%91%E7%9A%84%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>《莫欺少年穷》</p><p>《莫欺中年穷》</p><p>《莫欺老年穷》</p><p>《死者为大》</p><p><img src="https://pprince.top/img/202211301501682.jpeg" alt="力不从心"></p>]]></content>
    
    
    <categories>
      
      <category>计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>韦应物</title>
    <link href="/2022/11/27/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E9%9F%A6%E5%BA%94%E7%89%A9/"/>
    <url>/2022/11/27/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E9%9F%A6%E5%BA%94%E7%89%A9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>此日相逢思旧日，一杯成喜亦成悲。<br>(相逢却是值得庆幸的事情，但是能够常常见面的话，这庆幸又有什么意义呢，一股悲伤涌上心头</p>]]></content>
    
    
    <categories>
      
      <category>古诗词</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>临江仙·夜归临皋</title>
    <link href="/2022/11/27/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E4%B8%B4%E6%B1%9F%E4%BB%99%C2%B7%E5%A4%9C%E5%BD%92%E4%B8%B4%E7%9A%8B/"/>
    <url>/2022/11/27/%E5%8F%A4%E8%AF%97%E8%AF%8D/%E4%B8%B4%E6%B1%9F%E4%BB%99%C2%B7%E5%A4%9C%E5%BD%92%E4%B8%B4%E7%9A%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>苏轼<br>夜饮东坡醒复醉，归来仿佛三更。</p><p>家童鼻息已雷鸣。敲门都不应，倚杖听江声。</p><p>长恨此身非我有，何时忘却营营。</p><p>夜阑风静縠纹平。小舟从此逝，江海寄余生。</p>]]></content>
    
    
    <categories>
      
      <category>古诗词</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ArrayList扩容机制</title>
    <link href="/2022/11/27/Java/ArrayList%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/11/27/Java/ArrayList%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="初始容量"><a href="#初始容量" class="headerlink" title="初始容量"></a>初始容量</h2><p><code>ArrayList</code>有多个不同的构造函数，不同的构造函数的初始容量是不同的。快速看一下<code>ArrayList</code>源码里关于元素存放的几个私有属性：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">// 默认容量是10</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DEFAULT_CAPACITY = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 如果容量为0的时候，就返回这个数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object</span>[] EMPTY_ELEMENTDATA = &#123;&#125;;<br><span class="hljs-comment">// 使用默认容量10时，返回这个数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object</span>[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><span class="hljs-comment">// 元素存放的数组</span><br><span class="hljs-keyword">transient</span> <span class="hljs-built_in">Object</span>[] elementData;<br><span class="hljs-comment">// 元素的个数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-built_in">size</span>;<br><br><span class="hljs-comment">// 记录被修改的次数</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> modCount = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 数组的最大值</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MAX_ARRAY_SIZE = Integer.<span class="hljs-property">MAX_VALUE</span> - <span class="hljs-number">8</span><br>复制代码<br><br>JAVA<br></code></pre></td></tr></table></figure><p><code>ArrayList</code>有三个构造方法，不同的构造方法的容量是不一样的，具体可以查看JDK 源码。</p><ul><li>如果不传入初始容量，就使用默认容量，并设置<code>elementData</code>为<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code></li><li>如果传入初始容量，会判断这个传入的值，如果大于0，就new一个新的Object数组，如果等于0，就直接设置<code>elementData</code>为<code>EMPTY_ELEMENTDATA</code>。</li><li>如果传入一个Collection，则会调用<code>toArray()</code>方法把它变成一个数组并赋值给<code>elementData</code>。同样会判断它的长度是否为0，如果为0，设置<code>elementData</code>为<code>EMPTY_ELEMENTDATA</code>。</li></ul><h2 id="扩容具体指的是什么？"><a href="#扩容具体指的是什么？" class="headerlink" title="扩容具体指的是什么？"></a>扩容具体指的是什么？</h2><p>可以看到，<code>ArrayList</code>里面有两个概念，一个是<code>capacity</code>，它表示的就是“容量”，其实质是数组<code>elementData</code>的长度。而<code>size</code>则表示的“存放的元素的个数”。</p><p>因为Java中，数组操作不能越界，所以我们必须要保证在插入操作的时候，不会抛出数组越界异常。</p><h2 id="ArrayList是如何实现扩容的？"><a href="#ArrayList是如何实现扩容的？" class="headerlink" title="ArrayList是如何实现扩容的？"></a>ArrayList是如何实现扩容的？</h2><p>底层主要是这三个私有方法：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 扩容一个</span><br><span class="hljs-keyword">private</span> Object[] grow() &#123;<br><span class="hljs-keyword">return</span> grow(size + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 保证扩容到期望容量minCapacity及以上</span><br><span class="hljs-keyword">private</span> Object[] grow(int minCapacity) &#123;<br>    <span class="hljs-keyword">return</span> elementData = Arrays.copyOf(elementData,<br>                                       <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span>(minCapacity));<br>&#125;<br><br><span class="hljs-comment">// 根据期望容量minCapacity计算实际需要扩容的容量</span><br><span class="hljs-keyword">private</span> int <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span>(int minCapacity) &#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    int oldCapacity = elementData.length; <span class="hljs-comment">// 得到旧容量</span><br>    int <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span> = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// 设置新容量为旧容量的1.5倍</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span> - minCapacity &lt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果新容量仍然小于期望容量</span><br>        <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) <span class="hljs-comment">// 如果是使用的默认容量</span><br>            <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity); <span class="hljs-comment">// 取默认容量和期望容量较大值返回</span><br>        <span class="hljs-keyword">if</span> (minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow // 检查期望容量是否越界（int 的范围）</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">OutOfMemoryError</span>();<br>        <span class="hljs-keyword">return</span> minCapacity; <span class="hljs-comment">// 返回期望容量</span><br>    &#125;<br>    <span class="hljs-comment">// 如果新容量大于期望容量，判断一下新容量是否越界</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span> - MAX_ARRAY_SIZE &lt;= <span class="hljs-number">0</span>)<br>        ? <span class="hljs-keyword">new</span><span class="hljs-type">Capacity</span><br>        : <span class="hljs-type">hugeCapacity</span>(minCapacity);<br>&#125;<br>复制代码<br><br>SCSS<br></code></pre></td></tr></table></figure><p>可以看到，底层其实是调用了<code>Arrays.copyOf</code>方法来进行扩充数组容量的。这里我们主要看一下最后一个方法newCapacity(int minCapacity)的实现。</p><p><strong>默认情况下，新的容量会是原容量的1.5倍，这里用了位运算提高效率</strong>。一般情况下，如果扩容1.5倍后就大于期望容量，那就返回这个1.5倍旧容量的值。而如果小于期望容量，那就返回期望容量。这里对默认容量10做了特殊处理。</p><p><strong>使用1.5倍这个数值而不是直接使用期望容量，是为了防止频繁扩容影响性能</strong>。试想如果每次add操作都要扩容一次，那性能将会非常低下。</p><p>上述grow方法其实主要是用于实现自动扩容的。而用户也可以通过调用以下方法实现手动扩容：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss">public void <span class="hljs-built_in">ensureCapacity</span>(int minCapacity) &#123;<br>    if (minCapacity &gt; elementData.length<br>        &amp;&amp; !(elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA<br>             &amp;&amp; minCapacity &lt;= DEFAULT_CAPACITY)) &#123;<br>        modCount++;<br>        <span class="hljs-built_in">grow</span>(minCapacity);<br>    &#125;<br>&#125;<br>复制代码<br><br>SCSS<br></code></pre></td></tr></table></figure><p>为什么需要手动扩容？试想一下，如果用户已经知道即将存入大量的元素，比如目前有20个元素，即将存入2000个。那这个时候使用自动扩容就会扩容多次。而手动扩容可以一次性扩容到2000，可以提高性能。</p><h2 id="ArrayList有缩容吗？"><a href="#ArrayList有缩容吗？" class="headerlink" title="ArrayList有缩容吗？"></a>ArrayList有缩容吗？</h2><p><code>ArrayList</code>没有缩容。无论是<code>remove</code>方法还是<code>clear</code>方法，它们都不会改变现有数组<code>elementData</code>的长度。但是它们都会把相应位置的元素设置为<code>null</code>，以便垃圾收集器回收掉不使用的元素，节省内存。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2022/11/27/Java/CSS/"/>
    <url>/2022/11/27/Java/CSS/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookies</title>
    <link href="/2022/11/27/Java/Cookies&amp;&amp;Session/"/>
    <url>/2022/11/27/Java/Cookies&amp;&amp;Session/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-会话"><a href="#1-会话" class="headerlink" title="1.会话"></a>1.会话</h2><p>会话：用户打开一个浏览器，点击了很多连接，访问多个web资源，关闭浏览器，这个过程可以称之为会话。</p><h3 id="有状态会话："><a href="#有状态会话：" class="headerlink" title="有状态会话："></a>有状态会话：</h3><p>  一个同学来过教室，下次再来教室，我们会知道这个同学，之前来过<br><strong>举例：</strong><br>你能怎么证明你是湾大的学习？<br>你          湾大</p><p>1.发票        湾大给你发票<br>2.学校登记      湾大标记你来过了</p><p>一个网站怎么证明你来过？<br>客户端      服务端</p><p>1.服务端给客户端一个cookie（信件），客户端下次访问服务端带上 信件 就可以了；cookie<br>2.服务器登记你来过了，下次你来的时候我来匹配你；session</p><p>第一次访问，服务器给客户端发送一个cookie<br><a href="https://img-blog.csdnimg.cn/205001ce4df74eaf946a98b8a1117a0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/205001ce4df74eaf946a98b8a1117a0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  发了之后，每次请求都会带上cookie<br><a href="https://img-blog.csdnimg.cn/5624dd3043d648a0989568e9e0881634.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/5624dd3043d648a0989568e9e0881634.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="2-保存会话的两种技术"><a href="#2-保存会话的两种技术" class="headerlink" title="2.保存会话的两种技术"></a>2.保存会话的两种技术</h2><p><strong>cookie</strong><br>  客户端技术（响应，请求）</p><p><strong>session</strong><br>  服务器技术，利用整个技术，可以保存用户的会话信息？我们可以把信息或者数据放在session中！</p><p><strong>常见场景</strong>：<br>  网站登录之后，你下次不用再登录了，第二次访问直接上去了！</p><hr><h2 id="3-Cookie"><a href="#3-Cookie" class="headerlink" title="3.Cookie"></a>3.Cookie</h2><p>  1.从请求中拿cookie信息<br>  2.服务器响应给客户端cookie信息</p><p>Cookie的常用方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Cookie<span class="hljs-literal">[]</span> cookies = req.get<span class="hljs-constructor">Cookies()</span>; <span class="hljs-comment">//获取所有cookie信息</span><br>cookie.get<span class="hljs-constructor">Name()</span>   <span class="hljs-comment">//获取cookie的名称</span><br>cookie.get<span class="hljs-constructor">Value()</span>; <span class="hljs-comment">//获取cookie的值</span><br><span class="hljs-comment">//创建cookie</span><br>Cookie cookie = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.<span class="hljs-params">currentTimeMillis</span>()</span> + <span class="hljs-string">&quot;&quot;</span>);<br>cookie.set<span class="hljs-constructor">MaxAge(24 <span class="hljs-operator">*</span> 60 <span class="hljs-operator">*</span> 60)</span>; <span class="hljs-comment">//设置cookie的有效期</span><br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>cookie：一般会报错在本地的用户目录下appdata；</p><p>一个网站的cookie是否存储上限！聊聊细节问题</p><ol><li>一个Cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li><li>cookie大小有限制4kb</li><li>上限大概为300个（浏览器上限）</li></ol><p><strong>删除cookie</strong></p><ol><li>不设置有效期，关闭浏览器，自动失效；</li><li>设置有效期时间为0</li></ol><p>编码解码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLEncoder</span>.</span></span>encode(<span class="hljs-string">&quot;闲言&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLDecoder</span>.</span></span>decode(cookie.get<span class="hljs-constructor">Value()</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>)<br><span class="hljs-number">12</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><h2 id="4-Session"><a href="#4-Session" class="headerlink" title="4.Session"></a>4.Session</h2><p>什么是session：</p><ol><li>服务器会给每一个用户（浏览器）创建一个session对象；</li><li>一个Session独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li><li>用户登录之后，整个网站它都可以访问！–》保存用户的信息，保存购物车的信息…<br><a href="https://img-blog.csdnimg.cn/bee1a64325684c27ba045c283f317df2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/bee1a64325684c27ba045c283f317df2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></li></ol><p>Session和Cookie的区别：</p><ol><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li><li>Session 把用户的数据写到独占Session中，服务器端保存（保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建</li></ol><p>使用场景：</p><ol><li>保存一个登录用户的信息；</li><li>购物车信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在session中</li></ol><p>使用session</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> SessionDemo01 extends HttpServlet &#123;<br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-comment">//解决乱码问题</span><br>        req.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>        resp.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>        resp.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>)</span>;<br><br>        <span class="hljs-comment">//得到session</span><br>        HttpSession session = req.get<span class="hljs-constructor">Session()</span>;<br><br>        <span class="hljs-comment">//给session存东西</span><br>        session.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;闲言&quot;</span>)</span>;<br>        Person person = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Person(18, <span class="hljs-string">&quot;闲言博客&quot;</span>)</span>;<br>        session.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;person&quot;</span>,<span class="hljs-params">person</span>)</span>;<br><br>        <span class="hljs-comment">//获取session的Id</span><br>        String id = session.get<span class="hljs-constructor">Id()</span>;<br>        <span class="hljs-comment">//判断session是不是新创建</span><br>        <span class="hljs-keyword">if</span> (session.is<span class="hljs-constructor">New()</span>)&#123;<br>            resp.get<span class="hljs-constructor">Writer()</span>.write(<span class="hljs-string">&quot;session 创建成功，ID&quot;</span>+id);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            resp.get<span class="hljs-constructor">Writer()</span>.write(<span class="hljs-string">&quot;session 已经存在了&quot;</span>+id);<br>        &#125;<br><br>        <span class="hljs-comment">//session创建的时候做了什么事情</span><br><span class="hljs-comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, id);</span><br><span class="hljs-comment">//        resp.addCookie(cookie);</span><br><br><br>    &#125;<br><br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(<span class="hljs-params">req</span>,<span class="hljs-params">resp</span>)</span>;<br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  从session中获取数据</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-comment">//解决乱码问题</span><br>    req.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>    resp.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>    resp.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>)</span>;<br><br>    <span class="hljs-comment">//得到session</span><br>    HttpSession session = req.get<span class="hljs-constructor">Session()</span>;<br><br>    <span class="hljs-comment">//从session中获取数据</span><br>    String name = (String)session.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;name&quot;</span>)</span>;<br>    Person person = (Person)session.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;person&quot;</span>)</span>;<br><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(name);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(person);<br><br>&#125;<br><span class="hljs-number">123456789101112131415161718</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  调用invalidate()方法注销session</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-comment">//解决乱码问题</span><br>    req.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>    resp.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br>    resp.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>)</span>;<br><br>    <span class="hljs-comment">//得到session</span><br>    HttpSession session = req.get<span class="hljs-constructor">Session()</span>;<br><br>    session.remove<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;name&quot;</span>)</span>;<br><br>    <span class="hljs-comment">//注销</span><br>    session.invalidate<span class="hljs-literal">()</span>;<br><br>&#125;<br><span class="hljs-number">12345678910111213141516</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="会话自动过期"><a href="#会话自动过期" class="headerlink" title="会话自动过期"></a>会话自动过期</h3><p>  在web.xml中进行一下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br>123<br><br>JAVA<br></code></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/c4c59c8c938c4facab268be478ea7e7d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/c4c59c8c938c4facab268be478ea7e7d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Doubler&amp;&amp;Zookeesper</title>
    <link href="/2022/11/27/Java/Double&amp;&amp;Zookeeper/"/>
    <url>/2022/11/27/Java/Double&amp;&amp;Zookeeper/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1什么是分布式系统？<br>  在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p><p>  分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据。</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>  首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</p><p>Dubbo文档<br>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需一个治理系统确保架构有条不紊的演进。<br>在Dubbo的官网文档有这样一张图</p><p>单一应用架构<br>  当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。<br>缺点：<br>  1、性能扩展比较难<br>  2、协同开发问题<br>  3、不利于升级维护</p><p>垂直应用架构<br>  当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p>  通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。<br>缺点：公用模块无法重复利用，开发性的浪费</p><p>分布式服务架构<br>  当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><p>流动计算架构<br>  当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)[ Service Oriented Architecture]是关键。</p><p>2什么是RPC?<br>http: 通信协议<br>rpc：通信协议</p><p>  RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>  也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数&#x2F;方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；</p><p>RPC基本原理</p><p>步骤解析：</p><p>RPC两个核心模块：通讯，序列化。</p><p>3如何给老婆解释什么是RPC<br>一个阳光明媚的早晨，老婆又在翻看我订阅的技术杂志。<br>“老公，什么是RPC呀，为什么你们程序员那么多黑话！”，老婆还是一如既往的好奇。<br>“RPC，就是Remote Procedure Call的简称呀，翻译成中文就是远程过程调用嘛”，我一边看着书，一边漫不经心的回答着。<br>“啥？你在说啥？谁不知道翻译成中文是什么意思？你个废柴，快给我滚去洗碗！”<br>“我去。。。”，我如梦初醒，我对面坐着的可不是一个程序员，为了不去洗碗，我瞬间调动起全部脑细胞，星辰大海在我脑中汇聚，灵感涌现…<br>“是这样，远程过程调用，自然是相对于本地过程调用来说的嘛。<br>“嗯哼，那先给老娘讲讲，本地过程调用是啥子？”<br>“本地过程调用，就好比你现在在家里，你要想洗碗，那你直接把碗放进洗碗机，打开洗碗机开关就可以洗了。这就叫本地过程调用。”<br>“哎呦，我可不干，那啥是远程过程调用？”<br>“远程嘛，那就是你现在不在家，跟姐妹们浪去了，突然发现碗还没洗，打了个电话过来，叫我去洗碗，这就是远程过程调用啦”，多么通俗易懂的解释，我真是天才！<br>“哦！我明白了”，说着，老婆开始收拾包包。<br>“你这是干啥去哦”<br>“我？我要出门浪去呀，待会记得接收我的远程调用哦，哦不，咱们要专业点，应该说，待会记得接收我的RPC哦！<br>4什么是Dubbo<br>  是一个Jar包</p><p>  Apache Dubbo 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>dubbo官网 <a href="http://dubbo.apache.org/zh-cn/index.html">http://dubbo.apache.org/zh-cn/index.html</a><br>1<br>  1.了解Dubbo的特性<br>  2.查看官方文档<br>dubbo基本概念</p><p>  专业的事，交给专业的人来做~不靠谱！</p><p>  服务提供者（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>  服务消费者（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>  注册中心（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p>  监控中心（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><p>调用关系说明</p><p>服务容器负责启动，加载，运行服务提供者。<br>服务提供者在启动时，向注册中心注册自己提供的服务。<br>服务消费者在启动时，向注册中心订阅自己所需的服务。<br>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。<br>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。<br>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。<br>5什么是zookeeper<br>产生背景<br>  当今是个分布式、集群、云计算等名词满天飞的时代。造成这种局面的一个重要因素就是，单一机器的处理能力已经不能满足我们的需求，不得不采用由多台机器组成的服务集群。服务集群对外提供服务的过程中，可以分解处理压力，在一定程度上打破性能瓶颈，并提高服务的可用性（不会因为一台机器宕机而造成服务不可用）。</p><p>  上图中有三台机器，每台机器跑同样的一个应用程序。然后我们将这三台机器通过网络将其连接起来，构成一个系统来为用户提供服务，对用户来说这个系统的架构是透明的，他感觉不到这个系统是一个什么样的架构。那么我们就可以把这种系统称作一个分布式系统。</p><p>那么，问题来了：<br>  1.程序的运行往往依赖很多配置文件，比如数据库地址、黑名单控制、服务地址列表等，而且有些配置信息需要频繁地进行动态变更，这时候怎么保证所有机器共享的配置信息保持一致？</p><p>  2.如果有一台机器挂掉了，其他机器如何感知到这一变化并接管任务？如果用户激增，需要增加机器来缓解压力，如何做到不重启集群而完成机器的添加？</p><p>  3.用户数量增加或者减少，会出现有的机器资源使用率繁忙，有的却空闲，如何让每台机器感知到其他机器的负载状态从而实现负载均衡？</p><p>  4.在一台机器上要多个进程或者多个线程操作同一资源比较简单，因为可以有大量的状态信息或者日志信息提供保证，比如两个A和B进程同时写一个文件，加锁就可以实现。但是分布式系统怎么办？需要一个三方的分配锁的机制，几百台worker都对同一个网络中的文件写操作，怎么协同？还有怎么保证高效的运行？</p><p>  除了上面列举的几种，还有很多细思极恐的问题，分布式系统到底有多然人抓狂，可以想想你第一次接触多线程的感觉;<br>计划中的多线程</p><p>现实中的多线程</p><p>分布式系统可以看作多线程的N级加强版……</p><p>ZooKeeper的前世今生<br>  分布式系统的很多难题，都是由于缺少协调机制造成的。<br>  目前，在分布式协调技术方面做得比较好的就是Google的Chubby还有Apache的ZooKeeper。有人会问既然有了Chubby为什么还要弄一个ZooKeeper，难道Chubby做得不够好吗？主要是Chubby是非开源的，Google自家用。后来雅虎模仿Chubby开发出了ZooKeeper，也实现了类似的分布式锁的功能，并且将ZooKeeper作为一种开源的程序捐献给了Apache，那么这样就可以使用ZooKeeper所提供锁服务。而且在分布式领域久经考验，它的可靠性，可用性都是经过理论和实践的验证的。</p><p>  至于这个神器为什么叫ZooKeeper，与外国人一贯的幽默精神有关。<br>  众所周知，外国人喜欢给用一个动物作为吉祥物，在IT界也不例外。比如，负责大数据工作的Hadoop是一个黄色的大象；负责数据仓库的Hive是一个虚拟蜂巢；负责数据分析的Apache Pig是一头聪明的猪；负责管理web容器的tomcat是一只雄猫……那好，负责分布式协调工作的角色就叫ZooKeeper（动物园饲养员）吧。</p><p>ZooKeeper能干什么<br>官方说辞是：<br>  ZooKeeper 分布式服务框架是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。简化分布式应用协调及其管理的难度，提供高性能的分布式服务。ZooKeeper的目标就是封装好复杂 易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。<br>ZooKeeper在一致性、可用性、容错性的保证，也是ZooKeeper的成功之处，它获得的一切成功都与它采用的协议——Zab协议是密不可分的。</p><p>  为了实现前面提到的各种服务，比如分布式锁、配置维护、组服务等，ZooKeeper设计了一种新的数据结构——Znode，然后在该数据结构的基础上定义了一些原语，也就是一些关于该数据结构的一些操作。有了这些数据结构和原语还不够，因为ZooKeeper工作在分布式环境下，服务是通过消息以网络的形式发送给分布式应用程序，所以还需要一个通知机制——Watcher机制。总结一下，ZooKeeper所提供的服务主要是通过：数据结构 + 原语 + watcher机制，三个部分来实现的。</p><p>6安装dubbo-admin<br>  是一个监控管理后台~查看我们注册了哪些服务，哪些服务被消费了</p><p>  dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。</p><p>  但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。<br>这里来安装一下：</p><p>下载dubbo-admin</p><p>地址 ：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a><br>1</p><p>解压进入目录<br>修改 dubbo-admin\src\main\resources \application.properties 指定zookeeper地址</p><p>在项目目录下打包dubbo-admin<br>清除并打包</p><p>mvn clean package -Dmaven.test.skip&#x3D;true<br>1</p><p>打包完成</p><p>启动jar 包</p><p>记得启动zookeeper</p><p>访问</p><p><a href="http://localhost:7001/">http://localhost:7001/</a><br>1</p><p>用户名和密码都是root</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Douker</title>
    <link href="/2022/11/27/Java/Docker/"/>
    <url>/2022/11/27/Java/Docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES</title>
    <link href="/2022/11/27/Java/ES/"/>
    <url>/2022/11/27/Java/ES/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Filter</title>
    <link href="/2022/11/27/Java/Filter/"/>
    <url>/2022/11/27/Java/Filter/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Filter：过滤器，用来过滤网站的数据；<br>处理中文乱码<br>登录验证…</p><p>Filter开发步骤<br>1.导包<br>2.编写过滤器<br>3.导包不要错<br>import javax.servlet.Filter;</p><p>实现filter接口，重写对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * chain：链</span><br><span class="hljs-comment">     * 1.过滤器中的所有代码，在执行特定请求的时候都会执行</span><br><span class="hljs-comment">     * 2.必须要让过滤器继续执行</span><br><span class="hljs-comment">     * chain.doFilter(request,response);</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行前....&quot;</span>);<br>        <span class="hljs-comment">//让我们的请求继续走，如果不写，程序到这里就会被拦截</span><br>        chain.doFilter(request,response);<br>        System.out.println(<span class="hljs-string">&quot;CharacterEncodingFilter执行后....&quot;</span>);<br><br>    &#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化</span><br><span class="hljs-comment">     * web服务器启动的就初始化了</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filterConfig</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销毁</span><br><span class="hljs-comment">     * web服务器关闭的时候，过滤器会被销毁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>在web.xml中配置过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.bloghut.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--只要是 /servlet 的任何请求，会经过这个过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GUI</title>
    <link href="/2022/11/27/Java/GUI/"/>
    <url>/2022/11/27/Java/GUI/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><blockquote><p>图形用户界面（Graphical User Interface，简称 GUI，又称图形用户接口）是指采用图形方式显示的计算机操作用户界面。</p></blockquote><blockquote><p>GUI的核心技术: Swing AWT</p></blockquote><p>缺点：</p><ol><li>界面不美观</li><li>需要在jre环境下运行</li></ol><blockquote><p>学习GUI可以了解MVC架构，了解监听！</p></blockquote><h2 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h2><blockquote><p>AWT(Abstract Window Toolkit)，抽象窗口工具包，该包提供了一套与本地图形界面进行交互的接口，是Java提供的用来建立和设置Java的图形用户界面的基本工具。</p></blockquote><h3 id="组件和容器"><a href="#组件和容器" class="headerlink" title="组件和容器"></a>组件和容器</h3><hr><h4 id="1-窗体Frame"><a href="#1-窗体Frame" class="headerlink" title="1. 窗体Frame"></a>1. 窗体Frame</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TestFrame &#123;<br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>Frame frame = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Frame(<span class="hljs-string">&quot;我的第一个Java图形界面窗口&quot;</span>)</span>;<br><br><span class="hljs-comment">//需要设置可见性</span><br>frame.set<span class="hljs-constructor">Visible(<span class="hljs-params">true</span>)</span>;<br><br><br><span class="hljs-comment">//设置窗口大小</span><br>frame.set<span class="hljs-constructor">Size(400,400)</span>;<br><br><span class="hljs-comment">//设置背景颜色  Color</span><br>frame.set<span class="hljs-constructor">Background(Color.<span class="hljs-params">white</span>)</span>;<br><br><span class="hljs-comment">//弹出的初始位置</span><br>frame.set<span class="hljs-constructor">Location(200,200)</span>;<br><br><br><span class="hljs-comment">//设置大小固定</span><br>frame.set<span class="hljs-constructor">Resizable(<span class="hljs-params">false</span>)</span>;<br>&#125;<br>&#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><p>问题：窗口无法关闭</p><p>尝试将生成窗口的方法进行封装</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> TestFrame2 &#123;<br><br>public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br><span class="hljs-comment">//展示多个窗口</span><br>MyFrame myFrame1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">MyFrame(100,100,200,200,Color.<span class="hljs-params">black</span>)</span>;<br>MyFrame myFrame2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">MyFrame(300,100,200,200,Color.<span class="hljs-params">darkGray</span>)</span>;<br>MyFrame myFrame3=<span class="hljs-keyword">new</span> <span class="hljs-constructor">MyFrame(100,300,200,200,Color.<span class="hljs-params">cyan</span>)</span>;<br>MyFrame myFrame4=<span class="hljs-keyword">new</span> <span class="hljs-constructor">MyFrame(300,300,200,200,Color.BLUE)</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> MyFrame extends Frame&#123;<br><span class="hljs-comment">//封装</span><br>static <span class="hljs-built_in">int</span> id=<span class="hljs-number">0</span>;<span class="hljs-comment">//可能存在多个窗口，需要一个计数器</span><br>public <span class="hljs-constructor">MyFrame(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, <span class="hljs-params">int</span> <span class="hljs-params">y</span>,<span class="hljs-params">int</span> <span class="hljs-params">w</span>,<span class="hljs-params">int</span> <span class="hljs-params">h</span>,Color <span class="hljs-params">color</span>)</span>&#123;<br>super(<span class="hljs-string">&quot;Myframe&quot;</span>+(++id));<br>set<span class="hljs-constructor">Visible(<span class="hljs-params">true</span>)</span>;<br>set<span class="hljs-constructor">Bounds(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>, <span class="hljs-params">w</span>, <span class="hljs-params">h</span>)</span>;<br>set<span class="hljs-constructor">Background(<span class="hljs-params">color</span>)</span>;<br>set<span class="hljs-constructor">Resizable(<span class="hljs-params">false</span>)</span>;<br>&#125;  ;<br>&#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><h4 id="2-面板Panel"><a href="#2-面板Panel" class="headerlink" title="2. 面板Panel"></a>2. 面板Panel</h4><p>解决了窗体关闭事件！</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs awk">public class Testpanel &#123;<br><span class="hljs-regexp">//</span>面板<br>public static void main(String[] args) &#123;<br><span class="hljs-regexp">//</span> Panel 可以看成是一个空间，但是不能单独存在<br>Frame frame = new Frame();<br><br><span class="hljs-regexp">//</span>生成面板<br>Panel panel = new Panel();<br><br><span class="hljs-regexp">//</span>设置布局<br>frame.setLayout(null);<br><br><span class="hljs-regexp">//</span>frame设置<br>frame.setBounds(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">500</span>, <span class="hljs-number">500</span>);<br>frame.setBackground(Color.LIGHT_GRAY);<br><br><span class="hljs-regexp">//</span>panel 设置坐标，相对于frame<br>panel.setBounds(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>panel.setBackground(Color.darkGray);<br><br><br><span class="hljs-regexp">//</span>frame.add(panel)<br>frame.add(panel);<br><br>frame.setVisible(true);<br><br><br><span class="hljs-regexp">//</span>监听事件，监听窗口关闭事件       System.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br><span class="hljs-regexp">//</span>适配器模式：<br>frame.addWindowListener(new WindowAdapter() &#123;<br><span class="hljs-regexp">//</span>窗口点击关闭的时候需要做的事情<br>@Override<br>public void windowClosing(WindowEvent e) &#123;<br><span class="hljs-regexp">//</span>结束程序<br>System.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><br>&#125;<br>&#125;);<br>&#125;<br><br>&#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><h4 id="3-布局管理器"><a href="#3-布局管理器" class="headerlink" title="3. 布局管理器"></a>3. 布局管理器</h4><ul><li>流式布局</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//组件-按钮</span><br>Button Button1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Button(<span class="hljs-string">&quot;button1&quot;</span>)</span>;<br>Button Button2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Button(<span class="hljs-string">&quot;button2&quot;</span>)</span>;<br>Button Button3=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Button(<span class="hljs-string">&quot;button3&quot;</span>)</span>;<br><br><span class="hljs-comment">//设置为流式布局</span><br><span class="hljs-comment">//frame.setLayout(new FlowLayout());  //默认为center</span><br>frame.set<span class="hljs-constructor">Layout(<span class="hljs-params">new</span> FlowLayout(FlowLayout.LEFT)</span>);<br><br>frame.set<span class="hljs-constructor">Size(200, 200)</span>;<br>frame.set<span class="hljs-constructor">Visible(<span class="hljs-params">true</span>)</span>;<br><br>frame.add(Button1);<br>frame.add(Button3);<br>frame.add(Button2);<br><br>JAVA<br></code></pre></td></tr></table></figure><ul><li>东西南北中</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe">Frame frame = <span class="hljs-keyword">new</span> <span class="hljs-type">Frame</span>(<span class="hljs-string">&quot;TestBorderLayout&quot;</span>);<br><br>Button east = <span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;East&quot;</span>); <br>Button west = <span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;West&quot;</span>); <br>Button south = <span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;South&quot;</span>); <br>Button north = <span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;North&quot;</span>); <br>Button center = <span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;center&quot;</span>); <br><br>frame.add(east,BorderLayout.EAST);<br>frame.add(west,BorderLayout.WEST);<br>frame.add(north,BorderLayout.NORTH);<br>frame.add(south,BorderLayout.SOUTH);<br>frame.add(center,BorderLayout.CENTER);<br><br>JAVA<br></code></pre></td></tr></table></figure><ul><li>表格式布局</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Frame frame = new Frame(<span class="hljs-string">&quot;TestBorderLayout&quot;</span>);<br><br><span class="hljs-keyword">Button </span><span class="hljs-keyword">btn1 </span>= new <span class="hljs-keyword">Button(&quot;btn1&quot;); </span><br><span class="hljs-keyword">Button </span><span class="hljs-keyword">btn2 </span>= new <span class="hljs-keyword">Button(&quot;btn2&quot;); </span><br><span class="hljs-keyword">Button </span><span class="hljs-keyword">btn3 </span>= new <span class="hljs-keyword">Button(&quot;btn3&quot;); </span><br><span class="hljs-keyword">Button </span><span class="hljs-keyword">btn4 </span>= new <span class="hljs-keyword">Button(&quot;btn4&quot;); </span><br><span class="hljs-keyword">Button </span><span class="hljs-keyword">btn5 </span>= new <span class="hljs-keyword">Button(&quot;btn5&quot;); </span><br><span class="hljs-keyword">Button </span><span class="hljs-keyword">btn6 </span>= new <span class="hljs-keyword">Button(&quot;btn6&quot;); </span><br><br>frame.setLayout(new GridLayout(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>));<br><br>frame.<span class="hljs-keyword">add(btn1);</span><br><span class="hljs-keyword"></span>frame.<span class="hljs-keyword">add(btn2);</span><br><span class="hljs-keyword"></span>frame.<span class="hljs-keyword">add(btn3);</span><br><span class="hljs-keyword"></span>frame.<span class="hljs-keyword">add(btn4);</span><br><span class="hljs-keyword"></span>frame.<span class="hljs-keyword">add(btn5);</span><br><span class="hljs-keyword"></span>frame.<span class="hljs-keyword">add(btn6);</span><br><span class="hljs-keyword"></span><br>frame.setVisible(true);<br>frame.pack()<span class="hljs-comment">;   //自动布局</span><br><br><span class="hljs-keyword">JAVA</span><br></code></pre></td></tr></table></figure><ul><li>多种Layout 嵌套布局</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//四个面板</span><br>Panel p1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Panel</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">BorderLayout</span>());<br>Panel p2 = <span class="hljs-keyword">new</span> <span class="hljs-type">Panel</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">GridLayout</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>));<br>Panel p3 = <span class="hljs-keyword">new</span> <span class="hljs-type">Panel</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">BorderLayout</span>());<br>Panel p4 = <span class="hljs-keyword">new</span> <span class="hljs-type">Panel</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">GridLayout</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<br><br><span class="hljs-comment">// Button add to panel</span><br>p1.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;East_1&quot;</span>),BorderLayout.EAST);<br>p1.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;West_1&quot;</span>),BorderLayout.WEST);<br><br>p2.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;p2_btn_up&quot;</span>));<br>p2.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;p2_btn_down&quot;</span>));<br><br>p1.add(p2,BorderLayout.CENTER);<br><br>p3.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;East_2&quot;</span>),BorderLayout.EAST);<br>p3.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;West_2&quot;</span>),BorderLayout.WEST);<br><br>p4.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;p2_btn_upl&quot;</span>));<br>p4.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;p2_btn_upr&quot;</span>));<br>p4.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;p2_btn_downl&quot;</span>));<br>p4.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;p2_btn_downr&quot;</span>));<br><br>p3.add(p4,BorderLayout.CENTER);<br><br><span class="hljs-comment">//panel add to frame</span><br>frame.add(p1);<br>frame.add(p3);<br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><h4 id="1-设置监听器"><a href="#1-设置监听器" class="headerlink" title="1.设置监听器"></a>1.设置监听器</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestActionEvent</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-title class_">Frame</span> frame = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br><span class="hljs-title class_">Button</span> button = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>();<br><br><span class="hljs-comment">//因为，addActionListener()需要一个ActionListener,所以我们需要构造一个ActionListener</span><br><span class="hljs-title class_">MyActionListener</span> myactionlistener =<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyActionListener</span>();<br>button.<span class="hljs-title function_">addActionListener</span>(myactionlistener);<br><br>frame.<span class="hljs-title function_">add</span>(button,<span class="hljs-title class_">BorderLayout</span>.<span class="hljs-property">CENTER</span>);<br>frame.<span class="hljs-title function_">pack</span>();<br>frame.<span class="hljs-title function_">setVisible</span>(<span class="hljs-literal">true</span>);<br><br>frame.<span class="hljs-title function_">addWindowListener</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">windowClosing</span>(<span class="hljs-params">WindowEvent e</span>) &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-title class_">System</span>.<span class="hljs-title function_">exit</span>(<span class="hljs-number">0</span>);;<br>&#125;<br>&#125;);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyActionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">actionPerformed</span>(<span class="hljs-params">ActionEvent e</span>) &#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2022/11/27/Java/Git/"/>
    <url>/2022/11/27/Java/Git/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1.版本控制<br>1.1什么是版本控制<br>  版本控制是一种在开发过程中用于管理我们对文件、目录工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><p>实现跨区域多人协同开发<br>追踪和记载一个或者多个文件的历史记录<br>组织和保护你的源代码和文档<br>统计工作量<br>并行开发、提高开发效率<br>跟踪记录整个软件的开发过程<br>减轻开发人员的负担，节省时间，同时降低人为错误<br>简单说就是用于管理多人协同开发项目的技术。</p><p>多人开发就必须要使用版本控制，否则代价比较大</p><p>1.2.常见的版本控制工具<br>git<br>svn<br>cvs<br>vss<br>tfs<br>1.3.版本控制分类<br>1、本地版本控制<br>  记录文件每次更新，可以对每一个版本做一个快照，或者是记录补丁文件，适合个人用，如RCS</p><p>2、集中式版本控制<br>  所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p>  所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品:svn、cvs、vss</p><p>3、分布式版本控制<br>  每个人都拥有全部代码！安全隐患</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，<br>可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。<br>由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或网络问题，造成不能工作的情况！</p><p>Git与SVN最主要区别<br>  SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作<br>对网络带宽要求较高。</p><p>  Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的︰比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p>2.聊聊git的历史<br>  同生活中的许多伟大事物一样，Git诞生于一个极富纷争大举创新的年代。</p><p>  Linux内核开源项目有着为数众广的参与者。绝大多数的Linux内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991-2002年间)。到2002年，整个项目组开始启用一个专有的分布式版本控制系统BitKeeper来管理和维护代码。</p><p>  到了2005年，开发BitKeeper的商业公司同Linux内核开源社区的合作关系结束，他们收回了Linux内核社区免费使用BitKeeper的权力。这就迫使Linux开源社区(特别是Linux的缔造者Linus Torvalds)基于使用BitKeeper时的经验教训，开发出自己的版本系统。也就是后来的Git !</p><p>  Git是目前世界上最先进的分布式版本控制系统。</p><p>  Git是免费、开源的，最初Git是为辅助Linux内核开发的，来替代BitKeeper !</p><p>3.git环境配置<br>3.1软件下载<br>打开[git官网]<a href="https://git-scm.com/">https://git-scm.com/</a><br>1<br>官网下载太慢了，推荐国内镜像</p><p><a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a><br>1<br>3.2启动git<br>  安装成功后开始菜单中会有git项，菜单下有三个程序：任意文件夹下右键也可以看到对应的程序！</p><p>git bash ： Unix与linux风格的命令行，使用最多，推荐最多<br>git cmd ：Windows风格的命令行<br>git GUI ： 图形界面的git</p><p>3.3常用Linux命令<br>  1）、cd : 改变目录。<br>  2）、cd . . 回退到上一个目录，直接cd进入默认目录<br>  3）、pwd : 显示当前所在的目录路径。<br>  4）、ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。<br>  5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。<br>  6）、rm: 删除一个文件, rm index.js 就会把index.js文件删除。<br>  7）、mkdir: 新建一个目录,就是新建一个文件夹。<br>  8）、rm -r : 删除一个文件夹, rm -r src 删除src目录</p><p>rm -rf &#x2F; 切勿在Linux中尝试！删除电脑中全部文件！<br>1<br>  9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。<br>  10）、reset 重新初始化终端&#x2F;清屏。<br>  11）、clear 清屏。<br>  12）、history 查看命令历史。<br>  13）、help 帮助。<br>  14）、exit 退出。<br>  15）、#表示注释</p><p>3.3.git配置<br>所有的配置文件，其实都保存在本地！<br>查看配置 git config -l</p><p>查看不同级别的配置文件：</p><p>#查看系统config<br>git config –system –list　<br>　<br>#查看当前用户（global）配置<br>git config –global –list<br>1<br>2<br>3<br>4<br>5<br>Git相关的配置文件：<br>1）Git\etc\gitconfig ：Git 安装目录下的 gitconfig –system 系统级</p><p>2）C:\Users\Administrator\ .gitconfig 只适用于当前登录用户的配置 –global 全局</p><p>3.4设置用户名与邮箱<br>  当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><p>git config –global user.name “kuangshen” #名称<br>git config –global user.email <a href="mailto:24736743@qq.com">24736743@qq.com</a> #邮箱<br>1<br>2<br>  只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p><p>4.git基本理论（核心）<br>4.1三个区域<br>Git本地有三个工作区域：<br>  工作目录（Working Directory）<br>  暂存区(Stage&#x2F;Index)<br>  资源库(Repository或Git Directory)</p><p>  如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p>  Workspace：工作区，就是平时存放项目代码的地方<br>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息<br>  Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本<br>  Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p><p>  Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。<br>  WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。<br>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。<br>  Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。<br>  Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。<br>  Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</p><p>4.2工作流程<br>git的工作流程一般是这样的：<br>  １、在工作目录中添加、修改文件；<br>  ２、将需要进行版本管理的文件放入暂存区域；<br>  ３、将暂存区域的文件提交到git仓库。<br>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p>5.git项目搭建<br>  工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p>5.1本地仓库搭建<br>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><h1 id="在当前目录新建一个Git代码库"><a href="#在当前目录新建一个Git代码库" class="headerlink" title="在当前目录新建一个Git代码库"></a>在当前目录新建一个Git代码库</h1><p>git init<br>1<br>2<br>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p><p>5.2克隆远程仓库<br>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p><p>git clone [url] #<a href="https://gitee.com/bloghut/springbootyoujianfasong.git">https://gitee.com/bloghut/springbootyoujianfasong.git</a><br>1<br>6.git文件操作<br>6.1文件的四种状态<br>  版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p>  1.Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p><p>  2.Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p><p>  3.Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</p><p>  4.Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p><p>6.2查看文件<br>  上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><p>#查看指定文件状态<br>git status [filename]</p><p>#查看所有文件状态<br>git status</p><p>#添加所有文件到暂存区<br>git add .</p><p>#提交暂存区中的内容到本地仓库 -m 提交信息<br>git commit -m “消息内容”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>6.3忽略文件<br>  有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等<br>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><p>  1.忽略文件中的空行或以井号（#）开始的行将会被忽略。<br>  2.可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。<br>  3.如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。<br>  4.如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。<br>  5如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p><p>#为注释*.txt<br>#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！!lib.txt<br>#但lib.txt除外&#x2F;temp<br>#仅忽略项目根目录下的TODO文件,不包括其它目录tempbuild&#x2F;<br>#忽略build&#x2F;目录下的所有文件doc&#x2F;*.txt<br>#会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt<br>1<br>2<br>3<br>4<br>5<br>6<br>7.使用码云<br>1、注册登录码云，完善个人信息</p><p>2、设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)<br>id_rsa.pub 这个文件里面有我们的公钥</p><p>3、将公钥信息public key 添加到码云账户中即可！<br>复制id_rsa.pub 这个文件里面内容到码云即可。</p><p>4、使用码云创建一个自己的仓库！</p><p>8.IDEA集成git<br>8.1新建项目，绑定git<br>把我们的.git 复制到项目中</p><p>注意观察idea中的变化</p><p>8.2修改文件，使用IDEA操作git。<br>添加到暂存区<br>commit 提交<br>push到远程仓库<br>8.3提交测试</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5</title>
    <link href="/2022/11/27/Java/HTML5/"/>
    <url>/2022/11/27/Java/HTML5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSP</title>
    <link href="/2022/11/27/Java/JSP/"/>
    <url>/2022/11/27/Java/JSP/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-什么是JSP"><a href="#1-什么是JSP" class="headerlink" title="1.什么是JSP"></a>1.什么是JSP</h2><p>  Java Server Pages：Java服务器端页面，也和Servlet一样，用于动态web技术！</p><p>最大特点：<br>  1.写JSP就像在写HTML<br>  2.区别：<br>    HTMl只给用于提供静态数据<br>    JSP页面中可以嵌入JAVA代码，为用户提供动态数据</p><hr><h2 id="2-JSP原理"><a href="#2-JSP原理" class="headerlink" title="2.JSP原理"></a>2.JSP原理</h2><p>  思路：JSP到底怎么执行的！<br>    1.代码层面没有任何问题<br>    2.服务器内部工作<br>      Tomcat<br><a href="https://img-blog.csdnimg.cn/7b6786e36bbc4651a6d98dcc43b577f0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16"><img src="https://img-blog.csdnimg.cn/7b6786e36bbc4651a6d98dcc43b577f0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>我电脑的地址：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\wei\AppData\Local\JetBrains\IntelliJIdea2020<span class="hljs-number">.3</span><br>\tomcat\<span class="hljs-number">0794</span>b5b5-a6b7<span class="hljs-number">-4</span>d24<span class="hljs-number">-86</span>bd<span class="hljs-number">-409</span>f1fd809ef\work\Catalina<br>\localhost\ROOT\org\apache\jsp<br><span class="hljs-number">123</span><br><br>BASH<br></code></pre></td></tr></table></figure><p>发现页面转变成了Java程序！<br><a href="https://img-blog.csdnimg.cn/4d0a9866e66b484b910807ca7b7fc230.png"><img src="https://img-blog.csdnimg.cn/4d0a9866e66b484b910807ca7b7fc230.png" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都在访问Servlet！</strong></p><p>  JSP 最终也会被转换称为一个Java类！</p><p>  通过查看被转换后的Java类的源码，发现该类继承了<strong>HttpJspBase</strong><br><a href="https://img-blog.csdnimg.cn/50df957e54f54b528ff34c62a8c16535.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16"><img src="https://img-blog.csdnimg.cn/50df957e54f54b528ff34c62a8c16535.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  通过查看HttpJspBase的源码发现，该类继承了HttpServlet<br><a href="https://img-blog.csdnimg.cn/f2135d603a944d0db92d7fdf2c0d6d28.png"><img src="https://img-blog.csdnimg.cn/f2135d603a944d0db92d7fdf2c0d6d28.png" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  也就是说：JSP本质上就是一个Servlet</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//初始化</span><br>  public void <span class="hljs-constructor">_jspInit()</span> &#123;<br>  &#125;<br><span class="hljs-comment">//销毁</span><br>public void <span class="hljs-constructor">_jspDestroy()</span> &#123;<br>&#125;<br>  <br><span class="hljs-comment">//JSPService</span><br>public void <span class="hljs-constructor">_jspService(<span class="hljs-params">final</span> <span class="hljs-params">javax</span>.<span class="hljs-params">servlet</span>.<span class="hljs-params">http</span>.HttpServletRequest <span class="hljs-params">request</span>, <span class="hljs-params">final</span> <span class="hljs-params">javax</span>.<span class="hljs-params">servlet</span>.<span class="hljs-params">http</span>.HttpServletResponse <span class="hljs-params">response</span>)</span><br><span class="hljs-number">123456789</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>1.判断请求</strong><br><strong>2.内置一些对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;   <span class="hljs-comment">//页面上下文</span><br>javax.servlet.http.<span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;     <span class="hljs-comment">//session</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletContext application;    <span class="hljs-comment">//applicationContext</span><br><span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;          <span class="hljs-comment">//config</span><br>javax.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;            <span class="hljs-comment">//out</span><br><span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">Object</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;                <span class="hljs-comment">//page：当前</span><br>HttpServletRequest                                 <span class="hljs-comment">//请求</span><br>HttpServletResponse                                <span class="hljs-comment">//响应</span><br><span class="hljs-number">12345678</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>3.输出页面前增加的代码</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);        <span class="hljs-comment">//设置响应的页面类型</span><br>pageContext = _jspxFactory.getPageContext(<span class="hljs-keyword">this</span>, request, response,<br><span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-literal">true</span>);<br>_jspx_page_context = pageContext;<br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();     <span class="hljs-comment">//获取配置</span><br>session = pageContext.getSession();          <span class="hljs-comment">//获取session</span><br><span class="hljs-keyword">out</span> = pageContext.getOut();<br>_jspx_out = <span class="hljs-keyword">out</span>;<br><span class="hljs-number">123456789</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>4.以上的这些个对象我们可以在JSP页面中直接使用</strong></p><p>  1.在JSP页面中；<br>  2.只要是Java代码就会原封不动的输出；<br>  3.如果是HTML代码，就会转化为</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(&quot;&lt;html&gt;\r\n&quot;);<br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>这样的格式输出到前端</p><hr><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><p><strong>1.找到tomcat服务器工作的目录</strong><br>  当前目录只要两个文件<br><a href="https://img-blog.csdnimg.cn/f918d6ccff534658bdc3738fd9d48f02.png"><img src="https://img-blog.csdnimg.cn/f918d6ccff534658bdc3738fd9d48f02.png" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>2.新建一个jsp页面</strong><br><a href="https://img-blog.csdnimg.cn/0d06a81f8989437f9a8c9ae709d3a614.png"><img src="https://img-blog.csdnimg.cn/0d06a81f8989437f9a8c9ae709d3a614.png" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>3.重启tomcat服务器</strong><br>  会发现当前目录会报错，因为重启tomcat服务器后，该工作空间会被<strong>重新刷新、重新加载</strong>。<br><a href="https://img-blog.csdnimg.cn/7ce86ea130ee44f09d327b5ebe581431.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16"><img src="https://img-blog.csdnimg.cn/7ce86ea130ee44f09d327b5ebe581431.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>    启动完成后，当前工作空间还是只有两个文件<br><a href="https://img-blog.csdnimg.cn/4ec787d0596e4a7189107dc58542bcb3.png"><img src="https://img-blog.csdnimg.cn/4ec787d0596e4a7189107dc58542bcb3.png" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  我们访问test.jsp 之后，会生成对应的<strong>Java类</strong><br><a href="https://img-blog.csdnimg.cn/c28ed683713644c8aa35195bda06221f.png"><img src="https://img-blog.csdnimg.cn/c28ed683713644c8aa35195bda06221f.png" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/90973bbc49de4b1aa57671089d3ac161.png"><img src="https://img-blog.csdnimg.cn/90973bbc49de4b1aa57671089d3ac161.png" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>大概流程<br><a href="https://img-blog.csdnimg.cn/08babca183804021945a7591beb1cd71.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16"><img src="https://img-blog.csdnimg.cn/08babca183804021945a7591beb1cd71.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="3-JSP基础语法"><a href="#3-JSP基础语法" class="headerlink" title="3.JSP基础语法"></a>3.JSP基础语法</h2><p>  任何语言都有自己的语法，Java中有，JSP作为Java技术的一种应用，他拥有自己扩充的语言。Java所有语法都支持！</p><p><strong>JSP表达式</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%--JSP表达式<br>作用：用来将程序的输出，输出到客户端<br>    &lt;%= 变量或者表达式%&gt;<br>--%&gt;<br>&lt;%= new Date()%&gt;<br><span class="hljs-number">12345</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>JSP脚本片段</strong></p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">&lt;<span class="hljs-comment">%--JSP脚本片段--%&gt;</span><br>&lt;<span class="hljs-comment">%</span><br>    int sum = <span class="hljs-number">0</span>;<br>    for (int i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>; i++) &#123;<br>        sum+=i;<br>    &#125;<br>    out.println(<span class="hljs-string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br><span class="hljs-comment">%&gt;</span><br><span class="hljs-number">12345678</span><br>&lt;<span class="hljs-comment">%</span><br>    int x = <span class="hljs-number">10</span>;<br>    out.println(x);<br><span class="hljs-comment">%&gt;</span><br>&lt;p&gt;这是一个jsp文档&lt;/p&gt;<br>&lt;<span class="hljs-comment">%</span><br>    int y = <span class="hljs-number">2</span>;<br>    out.println(y);<br><span class="hljs-comment">%&gt;</span><br>&lt;hr&gt;<br><br>&lt;<span class="hljs-comment">%--在代码中嵌入html元素--%&gt;</span><br>&lt;<span class="hljs-comment">%</span><br>    for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><span class="hljs-comment">%&gt;</span><br>&lt;h1&gt;Hello,Workd&lt;/h1&gt;<br>&lt;<span class="hljs-comment">%</span><br>    &#125;<br><span class="hljs-comment">%&gt;</span><br><span class="hljs-number">12345678910111213141516171819</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>JSP声明</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&lt;%!<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;loading Servlet!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> globalVar = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">xy</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;进入了方法xy&quot;</span>);<br>    &#125;<br><br>%&gt;<br><span class="hljs-number">123456789101112</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  JSP声明：会被编译到JSP生成的类中！其他的（JSP<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">表达式</a>，JSP脚本片段），就会被生成到_jspService方法中！</p><p>在JSp中，嵌入Java代码即可！</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span><span class="hljs-meta">%</span>&gt;<br>&lt;<span class="hljs-meta">%</span>=<span class="hljs-meta">%</span>&gt;<br>&lt;<span class="hljs-meta">%</span>!<span class="hljs-meta">%</span>&gt;<br><br>&lt;<span class="hljs-meta">%</span>--注释--<span class="hljs-meta">%</span>&gt;<br><span class="hljs-number">12345</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  Jsp的注释不会在客户端显示，html的就会</p><hr><p><strong>JSP指令</strong></p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby">@ page args ... </span><span class="language-xml">%&gt;</span><br><span class="language-xml">1</span><br><span class="language-xml">&lt;%-</span><span class="language-ruby">-</span><br><span class="language-ruby">  Created by IntelliJ <span class="hljs-variable constant_">IDEA</span>.</span><br><span class="language-ruby">  <span class="hljs-symbol">User:</span> Administrator</span><br><span class="language-ruby">  <span class="hljs-symbol">Date:</span> <span class="hljs-number">2021</span>/<span class="hljs-number">10</span>/<span class="hljs-number">16</span></span><br><span class="language-ruby">  <span class="hljs-symbol">Time:</span> <span class="hljs-number">16</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span></span><br><span class="language-ruby">  To change this template use File |<span class="hljs-params"> Settings </span>| File Templates.</span><br><span class="language-ruby">-</span><span class="language-xml">-%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-ruby">@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby">-&lt;%@ <span class="hljs-keyword">include</span> 会将两个页面合二为一-</span><span class="language-xml">-%&gt;</span><br><span class="language-xml">    &lt;%</span><span class="language-ruby">@ <span class="hljs-keyword">include</span> file=<span class="hljs-string">&quot;common/head.jsp&quot;</span></span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网页主题体<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    &lt;%</span><span class="language-ruby">@ <span class="hljs-keyword">include</span> file=<span class="hljs-string">&quot;common/footer.jsp&quot;</span></span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby">-</span><br><span class="language-ruby">    <span class="hljs-symbol">jsp:</span><span class="hljs-keyword">include</span> 拼接页面，本质还是三个</span><br><span class="language-ruby">    -</span><span class="language-xml">-%&gt;</span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby">-jsp 标签-</span><span class="language-xml">-%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:include</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;/common/head.jsp&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网页主题体<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:include</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;/common/footer.jsp&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">123456789101112131415161718192021222324252627282930</span><br><span class="language-xml"></span><br><span class="language-xml">JAVA</span><br></code></pre></td></tr></table></figure><hr><h3 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h3><p>  1.PageContext 存东西<br>  2.Response<br>  3.Request 存东西<br>  4.Session 存东西<br>  5.Application 【ServletContext】 存东西<br>  6.config【ServletConfig】<br>  7.out<br>  8.page 不用<br>  9.exception</p><p><strong>pageContext</strong>.setAttribute();<br>  保存的数据只在一个页面中有效</p><p><strong>request</strong>.setAttribute(“);<br>  保存的数据只在一次请求中有效 ，请求转发会携带这个数据</p><p><strong>session</strong>.setAttribute();<br>  保存的数据只在一次会话中有效 ，从打开浏览器到关闭服务器</p><p><strong>application</strong>.setAttribute();<br>  保存的数据只在服务器中有效 ，从打开服务器到关闭服务器</p><p><strong>request</strong>：客户端想服务器发送请求，产生的数据，用户<strong>看完就没用了</strong>，比如：新闻，用户看完没用的！<br><strong>session</strong>：客户端想服务器发送请求，产生的数据，用户用完，用户<strong>看完一会还有用</strong>，比如：购物车<br><strong>application</strong>：客户端想服务器发送请求，产生的数据，一个<strong>用户用完，其他用户还能使用</strong>。、，比如聊天数据。</p><hr><h2 id="6-JSP标签、JSTL标签、EL表达式"><a href="#6-JSP标签、JSTL标签、EL表达式" class="headerlink" title="6.JSP标签、JSTL标签、EL表达式"></a>6.JSP标签、JSTL标签、EL表达式</h2><p><strong>EL表达式：</strong><br>  1.获取数据<br>  2.执行运算<br>  3.获取web开发的常用对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--JSTL表达式的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--standard标签库--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>1234567891011<br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>JSP标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:forward</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;jsptag2.jsp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xianyan&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp:param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">jsp:forward</span>&gt;</span><br>1234<br><br>JAVA<br></code></pre></td></tr></table></figure><p>  <strong>JSTL表达式</strong><br>  <strong>JSTL标签库的使用就是为了弥补HTML标签的不足，它自定义了许多标签，可以供我们使用</strong></p><p><strong>核心标签</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>--引入jstl核心标签库 core--<span class="hljs-meta">%</span>&gt;<br>&lt;<span class="hljs-meta">%</span>@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> <span class="hljs-meta">%</span>&gt;<br><span class="hljs-number">12</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>JSTL标签库使用步骤</strong><br>  1.引入对应的taglib<br>  2.使用其中的方法<br>  3.在Tomcat也需要引入jstl的依赖，否则报错</p><hr><h3 id="if-说明"><a href="#if-说明" class="headerlink" title="if 说明"></a>if 说明</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&lt;<span class="hljs-meta">%--</span><br>  Created <span class="hljs-keyword">by</span> IntelliJ IDEA.<br>  User: Administrator<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">10</span>/<span class="hljs-number">16</span><br>  Time: <span class="hljs-number">18</span>:<span class="hljs-number">38</span><br>  To change this template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;<span class="hljs-meta">%--</span>引入jstl核心标签库 core--%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>If测试<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;coreif.jsp&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><br><span class="language-xml">    &lt;%--</span><br><span class="language-xml">    el表达式获取表单中的数据</span><br><span class="language-xml">    $</span><span class="language-xquery">&#123;param.参数名&#125;</span><span class="language-xml"></span><br><span class="language-xml">    --%&gt;</span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">&lt;%--判断提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;isAdmin&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">c:out</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;管理员欢迎您！&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:out</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="language-xquery">&#123;isAdmin&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">12345678910111213141516171819202122232425262728293031323334353637</span><br><span class="language-xml"></span><br><span class="language-xml">JAVA</span><br></code></pre></td></tr></table></figure><hr><h2 id="foeach说明"><a href="#foeach说明" class="headerlink" title="foeach说明"></a>foeach说明</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%@ page <span class="hljs-keyword">import</span>=&quot;java.util.ArrayList&quot; %&gt;&lt;%<span class="hljs-comment">--</span><br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; <span class="hljs-keyword">language</span>=&quot;java&quot; %&gt;<br>&lt;%<span class="hljs-comment">--引入jstl核心标签库 core--%&gt;</span><br>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%<br>    ArrayList&lt;String&gt; people = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>    people.<span class="hljs-keyword">add</span>(&quot;张三&quot;);<br>    people.<span class="hljs-keyword">add</span>(&quot;李四&quot;);<br>    people.<span class="hljs-keyword">add</span>(&quot;王五&quot;);<br>    people.<span class="hljs-keyword">add</span>(&quot;赵六&quot;);<br>    people.<span class="hljs-keyword">add</span>(&quot;冯七&quot;);<br>    request.setAttribute(&quot;list&quot;,people);<br>%&gt;<br><br>&lt;%<span class="hljs-comment">--</span><br>var : 每一次遍历出来的变量<br>items ：要遍历的对象<br><span class="hljs-comment">--%&gt;</span><br><br>&lt;c:<span class="hljs-keyword">forEach</span> var=&quot;people&quot; items=&quot;$&#123;list&#125;&quot;&gt;<br>    &lt;c:<span class="hljs-keyword">out</span> <span class="hljs-keyword">value</span>=&quot;$&#123;people&#125;&quot;/&gt;&lt;br&gt;<br>&lt;/c:<span class="hljs-keyword">forEach</span>&gt;<br><br>&lt;hr&gt;<br><br>&lt;%<span class="hljs-comment">--</span><br>var : 每次遍历出来的变量<br>items : 要遍历的对象<br><span class="hljs-keyword">begin</span> : 哪里开始<br><span class="hljs-keyword">end</span> : 到哪里<br>step : 步长<br><span class="hljs-comment">--%&gt;</span><br><br>&lt;c:<span class="hljs-keyword">forEach</span> <span class="hljs-keyword">begin</span>=&quot;1&quot; end=&quot;3&quot; step=&quot;2&quot; var=&quot;peopel&quot; items=&quot;$&#123;list&#125;&quot;&gt;<br>    &lt;c:<span class="hljs-keyword">out</span> <span class="hljs-keyword">value</span>=&quot;$&#123;peopel&#125;&quot;/&gt; &lt;br&gt;<br>&lt;/c:<span class="hljs-keyword">forEach</span>&gt;<br><br><br>&lt;/body&gt;<br>&lt;/html&gt;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><h3 id="choose-when说明"><a href="#choose-when说明" class="headerlink" title="choose-when说明"></a>choose-when说明</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&lt;<span class="hljs-meta">%--</span><br>  Created <span class="hljs-keyword">by</span> IntelliJ IDEA.<br>  User: Administrator<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">10</span>/<span class="hljs-number">16</span><br>  Time: <span class="hljs-number">18</span>:<span class="hljs-number">38</span><br>  To change this template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;<span class="hljs-meta">%--</span>引入jstl核心标签库 core--%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">&lt;%--定义一个变量score，值为85--%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:set</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;score&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;85&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:choose</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">        你的成绩为优秀</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">        你的成绩为良好</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">        你的成绩为一般</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">        你的成绩为不及格</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:choose</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE</title>
    <link href="/2022/11/27/Java/JavaSE/"/>
    <url>/2022/11/27/Java/JavaSE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2022/11/27/Java/JavaScript/"/>
    <url>/2022/11/27/Java/JavaScript/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatisplus</title>
    <link href="/2022/11/27/Java/MybatisPlus/"/>
    <url>/2022/11/27/Java/MybatisPlus/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2022/11/27/Java/SpringBoot/"/>
    <url>/2022/11/27/Java/SpringBoot/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制和汇编</title>
    <link href="/2022/11/27/Java/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E6%B1%87%E7%BC%96/"/>
    <url>/2022/11/27/Java/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>监听器</title>
    <link href="/2022/11/27/Java/%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <url>/2022/11/27/Java/%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-实现一个监听器的接口；（有n种）"><a href="#1-实现一个监听器的接口；（有n种）" class="headerlink" title="1.实现一个监听器的接口；（有n种）"></a>1.实现一个监听器的接口；（有n种）</h2><p>实现监听器的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 统计网站在线人数 ：统计session</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionListener</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建session 监听 : 看你的一举一动</span><br><span class="hljs-comment">     * 一旦创建session就会触发一次这个事件！</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> se</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br>        System.out.println(se.getSession().getId());<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">onLineCount</span> <span class="hljs-operator">=</span> (Integer) context.getAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onLineCount == <span class="hljs-literal">null</span>) &#123;<br>            onLineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//不为空，在线数量+1</span><br>            onLineCount++;<br>        &#125;<br>        <span class="hljs-comment">//更新在线人数</span><br>        context.setAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>,onLineCount);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销毁session 监听</span><br><span class="hljs-comment">     * 一旦session 就会触发一次这个事件！</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> se</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">onLineCount</span> <span class="hljs-operator">=</span> (Integer) context.getAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (onLineCount == <span class="hljs-literal">null</span>)&#123;<br>            onLineCount = <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            onLineCount = onLineCount - <span class="hljs-number">1</span>;<br>        &#125;<br>        context.setAttribute(<span class="hljs-string">&quot;onLineCount&quot;</span>,onLineCount);<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * session销毁</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 1.手动销毁 getSession().invalidate();</span><br><span class="hljs-comment">     * 2.自动销毁</span><br><span class="hljs-comment">     */</span><br><br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="2-在web-xml中配置"><a href="#2-在web-xml中配置" class="headerlink" title="2.在web.xml中配置"></a>2.在web.xml中配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册监听器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>cn.bloghut.listener.OnlineCountListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>1234<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决问题的思路</title>
    <link href="/2022/11/27/Java/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <url>/2022/11/27/Java/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li>页面数据的展示</li><li>点击事件</li><li>数据的发送</li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>接受数据</li><li>校验数据</li><li>技术栈的选择</li></ul><ol><li>日志</li><li>Debug</li><li>异常的处理</li><li>事物的处理</li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>表的设计</li><li>查询的问题（索引 执行计划）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2022/11/27/Java/JDBC/"/>
    <url>/2022/11/27/Java/JDBC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-数据库驱动"><a href="#1-数据库驱动" class="headerlink" title="1.数据库驱动"></a>1.数据库驱动</h2><p>  驱动：声卡、显卡</p><p><a href="https://img-blog.csdnimg.cn/b5ba877be8a84452ad15437cba4f6e95.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/b5ba877be8a84452ad15437cba4f6e95.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  我们的程序会通过 数据库驱动 和数据库打交道</p><hr><h2 id="2-JDBC"><a href="#2-JDBC" class="headerlink" title="2.JDBC"></a>2.JDBC</h2><p>  sun 公司为了简化开发 人员的（对数据库的统一）操作，提供一个（Java操作数据库的）规范，俗称JDBC这些规范的实现由具体的厂商去做~</p><p>  没有什么是加一层解决不了的<br><a href="https://img-blog.csdnimg.cn/9986af9325c54f10951deb9e6693d07f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/9986af9325c54f10951deb9e6693d07f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  java.sql<br>  javax.sql<br>  还需要导入一个数据库驱动包 mysql-connector-java-x.x.xx.jar</p><hr><h2 id="3、第一个JDBC程序"><a href="#3、第一个JDBC程序" class="headerlink" title="3、第一个JDBC程序"></a>3、第一个JDBC程序</h2><p>  创建数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> jdbcstudy;<br><br>use jdbcstudy;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users(<br>`id` <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span>,<br>`<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>`<span class="hljs-keyword">password</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>`email` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>`birthday` <span class="hljs-type">date</span><br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,&quot;闲言博客&quot;,&quot;321&quot;,&quot;123@163.com&quot;,&quot;2000-12-15&quot;)<br>,(<span class="hljs-number">2</span>,&quot;闲言&quot;,&quot;123&quot;,&quot;123@qq.com&quot;,&quot;2000-12-31&quot;)<br>,(<span class="hljs-number">3</span>,&quot;csdn闲言_&quot;,&quot;456&quot;,&quot;123@qq.com&quot;,&quot;2001-2-27&quot;)<br><span class="hljs-number">123456789101112131415</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  1、创建一个普通项目<br>  2、添加数据库驱动到项目中<br><a href="https://img-blog.csdnimg.cn/87f764075e07406d84391e0e07e157d1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/87f764075e07406d84391e0e07e157d1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/46edd53154004d16b46e72bc039e0e9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/46edd53154004d16b46e72bc039e0e9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>现在lib 目录 可以展开了<br><a href="https://img-blog.csdnimg.cn/2cb6f65302fc4dd9bf631f05945282bf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/2cb6f65302fc4dd9bf631f05945282bf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson01;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> JdbcFirstDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 10:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcFirstDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2.创建连接</span><br>            <span class="hljs-comment">// useUnicode=true</span><br>            <span class="hljs-comment">// characterEncoding=utf8</span><br>            <span class="hljs-comment">// useSSL=true</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcstudy&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,username , password);<br>            <span class="hljs-comment">//3.连接成功，返回数据库对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users&quot;</span>;<br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>            <span class="hljs-comment">//4.执行sql</span><br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>            <span class="hljs-comment">//5.遍历结果集</span><br>            <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>                System.out.println(<span class="hljs-string">&quot;id：&quot;</span>+resultSet.getString(<span class="hljs-string">&quot;id&quot;</span>)+<span class="hljs-string">&quot;  name：&quot;</span>+<br>                        resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>)<br>                        +<span class="hljs-string">&quot;  password: &quot;</span>+resultSet.getString(<span class="hljs-string">&quot;password&quot;</span>));<br>            &#125;<br>            resultSet.close();<br>            statement.cancel();<br>            connection.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>步骤总结</strong></p><ol><li>加载驱动</li><li>创建连接 DriverManager</li><li>获取数据库对象 Statement</li><li>执行SQL</li><li>[获取结果集]</li><li>释放连接</li></ol><p><strong>DriverManager</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>DriverManager.registerDriver(new com.mysql.jdbc.Driver());<br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="hljs-regexp">//</span>固定写法，加载驱动<br><br><span class="hljs-regexp">//</span>Connection 代表数据库<br><span class="hljs-regexp">//</span>数据库设置自动提交<br><span class="hljs-number">12345</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>URL</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcstudy&quot;</span>;<br><br>jdbc:mysql:<span class="hljs-regexp">//</span>主机名:端口号/数据库名?参数<span class="hljs-number">1</span>&amp;参数<span class="hljs-number">2</span>&amp;参数<span class="hljs-number">3</span><br><br><span class="hljs-regexp">//</span>oracle  --<span class="hljs-number">1521</span><br>jdbc:oracle:thin:@localhost:<span class="hljs-number">1521</span>:sid <br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>Connection</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">connection.commit();  <span class="hljs-regexp">//</span>设置提交事务<br>connection.isReadOnly();<span class="hljs-regexp">//</span>是否只读<br>connection.setAutoCommit(true);<span class="hljs-regexp">//</span>设置事务自动提交<br><span class="hljs-number">123</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>Statement（执行SQL的对象） prepareStatement()（执行SQL的对象）</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">statement.executeQuery(sql);<span class="hljs-regexp">//</span>执行查询，返回一个结果集<br>statement.execute();<span class="hljs-regexp">//</span>执行任何SQL<br>statement.executeUpdate();<span class="hljs-regexp">//</span>执行更新操作：插入、修改、删除，返回受影响的行数<br><span class="hljs-number">123</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>ResultSet 查询的结果集：封装了程序结果</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">--- 在不知道类型的情况下使用getObject类型<br>resultSet.getObject()<span class="hljs-comment">; </span><br><br>-- 在知道类型的情况下使用对应类型<br>resultSet.getString()<span class="hljs-comment">;</span><br>resultSet.getBigDecimal()<span class="hljs-comment">;</span><br>resultSet.getFloat()<span class="hljs-comment">;</span><br>resultSet.getDate()<span class="hljs-comment">;</span><br>resultSet.getDouble()<span class="hljs-comment">;</span><br>resultSet.getInt()<span class="hljs-comment">;</span><br>resultSet.getLong()<span class="hljs-comment">;</span><br><span class="hljs-number">1234567891011</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>遍历，指针</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">resultSet.<span class="hljs-keyword">next</span>();<span class="hljs-regexp">//</span>移动到下一个<br>resultSet.beforeFirst();<span class="hljs-regexp">//</span>移动到第一个<br>resultSet.afterLast();<span class="hljs-regexp">//</span>移动到最后面<br>resultSet.previous();<span class="hljs-regexp">//</span>移动到前一行<br>resultSet.absolute(row);<span class="hljs-regexp">//</span>移动到指定行<br><span class="hljs-number">12345</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>释放资源</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">resultSet.<span class="hljs-keyword">close</span>();<br><span class="hljs-keyword">statement</span>.cancel();<br><span class="hljs-keyword">connection</span>.<span class="hljs-keyword">close</span>();<br><span class="hljs-number">123</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><h2 id="4、Statement-对象详解"><a href="#4、Statement-对象详解" class="headerlink" title="4、Statement 对象详解"></a>4、Statement 对象详解</h2><p>  jdbc中的statement 用于向数据库发送SQL语句，想要完成对数据库的增、删、改、查，只需要通过这个对象向数据库发送增删改查语句即可</p><p>  Statement 对象的 executeUpdate方法，用于向数据库 发送增、删、改的SQL语句，executeUpdate执行完后，将会返回一个整数（即增删改语句导致数据库几行数据发生了变化）</p><p>  Statement. executeQuery()方法用于向数据库发送 查询语句，executeQuery()方法返回代表查询结果的ResultSet对象。</p><p><strong>CRUD操作–insert</strong><br>  使用statement.executeUpdate(String sql)方法完成数据添加操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();<br>String <span class="hljs-keyword">sql</span> = &quot;insert into user(...) values(...)&quot;<br><span class="hljs-type">int</span> num = <span class="hljs-keyword">statement</span>.executeUpdate(<span class="hljs-keyword">sql</span>);<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;插入成功&quot;);<br>&#125;<br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>CRUD操作–delete</strong><br><strong>加粗样式</strong>使用statement.executeUpdate(String sql)方法完成数据删除操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();<br>String <span class="hljs-keyword">sql</span> = &quot;delete from user where id = 1&quot;<br><span class="hljs-type">int</span> num = <span class="hljs-keyword">statement</span>.executeUpdate(<span class="hljs-keyword">sql</span>);<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;删除成功&quot;);<br>&#125;<br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>CRUD操作–update</strong><br>  使用statement.executeUpdate(String sql)方法完成数据修改操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();<br>String <span class="hljs-keyword">sql</span> = &quot;update user set name=&#x27;&#x27; where id = 1&quot;<br><span class="hljs-type">int</span> num = <span class="hljs-keyword">statement</span>.executeUpdate(<span class="hljs-keyword">sql</span>);<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;修改成功&quot;);<br>&#125;<br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>CRUD操作–select</strong><br>  使用statement.executeQuery(String sql) 完成查询操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span>  = <span class="hljs-keyword">connection</span>.createStatement();<br>String <span class="hljs-keyword">sql</span> = &quot;select * from user&quot;;<br>ResultSet rs = <span class="hljs-keyword">statement</span>.executeQuery(<span class="hljs-keyword">sql</span>);<br><span class="hljs-keyword">while</span>(rs.next())&#123;<br>    //根据获取列的数据类型，分别调用rs的相应方法映射到java对象中<br>&#125;<br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>代码实现：</strong><br>1.提取工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02.utils;<br><br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> JdbcUtils</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            properties.load(in);<br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>            <span class="hljs-comment">//驱动只加载一次</span><br>            Class.forName(driver);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, username, password);<br>    &#125;<br><br>    <span class="hljs-comment">//释放连接资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;<br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                statement.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                resultSet.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>2.增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInstance</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInsert</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//2.创建SQL的执行对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//3.执行SQL</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into users(id,name,password,email,birthday) values(4,&#x27;闲言&#x27;,&#x27;123&#x27;,&#x27;123@qq.com&#x27;,null) &quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, statement, resultSet);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>3.删</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInstance</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDelete</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//2.创建SQL的执行对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//3.执行SQL</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from users where id = 4&quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, statement, resultSet);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>4.改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInstance</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUpdate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//2.创建SQL的执行对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//3.执行SQL</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update users set name=&#x27;update闲言&#x27; where id = 2&quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, statement, resultSet);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>5.查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInstance</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestQuery</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//2.创建SQL的执行对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//3.执行SQL</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users&quot;</span>;<br>            <span class="hljs-comment">//4.遍历结果集</span><br>            resultSet = statement.executeQuery(sql);<br>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                System.out.println(resultSet.getString(<span class="hljs-number">2</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, statement, resultSet);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="5-PreparedStatement-对象"><a href="#5-PreparedStatement-对象" class="headerlink" title="5.PreparedStatement 对象"></a>5.PreparedStatement 对象</h2><p><a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>问题<br>  sql 存在漏洞，会被攻击，导致数据泄漏。SQL会被拼接</p><p>  preparedStatement 可以防止SQL 注入，效率更好！</p><h3 id="5-1、新增"><a href="#5-1、新增" class="headerlink" title="5.1、新增"></a>5.1、新增</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInsert</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 9:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInsert</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JdbcUtils.getConnection();<br><br>            <span class="hljs-comment">//区别</span><br>            <span class="hljs-comment">//使用 ？ 占位符代替参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into users(id,name,password,email,birthday) values(?,?,?,?,?)&quot;</span>;<br>            pst = connection.prepareStatement(sql); <span class="hljs-comment">//预编译sql，先写sql 然后不执行</span><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>            pst.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;闲言&quot;</span>);<br>            pst.setString(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>            pst.setString(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;123@qq.com&quot;</span>);<br>            <span class="hljs-comment">// 注意点： sql.Date 数据库</span><br>            <span class="hljs-comment">//        util.Date java  new java.util.Date().getTime() 获得时间戳</span><br>            pst.setDate(<span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date().getTime()));<br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pst.executeUpdate();<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, pst, <span class="hljs-literal">null</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="5-2、删除"><a href="#5-2、删除" class="headerlink" title="5.2、删除"></a>5.2、删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInsert</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 9:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDelete</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JdbcUtils.getConnection();<br><br>            <span class="hljs-comment">//区别</span><br>            <span class="hljs-comment">//使用 ？ 占位符代替参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from users where id = ?&quot;</span>;<br>            pst = connection.prepareStatement(sql); <span class="hljs-comment">//预编译sql，先写sql 然后不执行</span><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br><br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pst.executeUpdate();<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, pst, <span class="hljs-literal">null</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="5-3、修改"><a href="#5-3、修改" class="headerlink" title="5.3、修改"></a>5.3、修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInsert</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 9:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUpdate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JdbcUtils.getConnection();<br><br>            <span class="hljs-comment">//区别</span><br>            <span class="hljs-comment">//使用 ？ 占位符代替参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update   users set name=? where id = ?&quot;</span>;<br>            pst = connection.prepareStatement(sql); <span class="hljs-comment">//预编译sql，先写sql 然后不执行</span><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;闲言碎语&quot;</span>);<br>            pst.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pst.executeUpdate();<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, pst, <span class="hljs-literal">null</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="5-4、查询"><a href="#5-4、查询" class="headerlink" title="5.4、查询"></a>5.4、查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestExecuteQuery</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 9:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestExecuteQuery</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取连接</span><br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//编写sql</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where id = ?&quot;</span>;<br>            <span class="hljs-comment">//预编译</span><br>            pst = conn.prepareStatement(sql);<br>            pst.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            rs = pst.executeQuery();<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                System.out.println(rs.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>                System.out.println(rs.getString(<span class="hljs-string">&quot;password&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn, pst, rs);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="5-5、防止SQL注入"><a href="#5-5、防止SQL注入" class="headerlink" title="5.5、防止SQL注入"></a>5.5、防止SQL注入</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.<span class="hljs-keyword">Connection</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.PreparedStatement;<br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.ResultSet;<br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.<span class="hljs-keyword">Statement</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author by 闲言</span><br><span class="hljs-comment"> * @classname SQLIn</span><br><span class="hljs-comment"> * @description TODO</span><br><span class="hljs-comment"> * @date 2021/9/1 23:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> SqlIn &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">login</span>(&quot;闲言碎语&quot;, &quot;123&quot;);<br>//          <span class="hljs-keyword">login</span>(&quot;&#x27;or&#x27;  1=1&quot;,&quot;12133 &#x27;or&#x27;1=1&quot;);<br>    &#125;<br><br>    //登录业务<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> <span class="hljs-keyword">login</span>(String username, String <span class="hljs-keyword">password</span>) &#123;<br>        <span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span> = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br><br>        try &#123;<br>            <span class="hljs-keyword">connection</span> = JdbcUtils.getConnection();<br>            //preparedStatement 防止<span class="hljs-keyword">sql</span>注入的本质，把传递进来的参数当做字符<br>            //假设其中出现转义字符，就直接忽略了<br>            String <span class="hljs-keyword">sql</span> = &quot;select * from users where name = ? and password = ?&quot;;<br>            pst = <span class="hljs-keyword">connection</span>.prepareStatement(<span class="hljs-keyword">sql</span>);<br>            pst.setString(<span class="hljs-number">1</span>,username);<br>            pst.setString(<span class="hljs-number">2</span>,<span class="hljs-keyword">password</span>);<br>            resultSet = pst.executeQuery();<br>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(resultSet.getString(&quot;name&quot;));<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(resultSet.getString(&quot;password&quot;));<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;===================&quot;);<br>            &#125;<br>        &#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br>            e.printStackTrace();<br>        &#125; finally &#123;<br>            JdbcUtils.<span class="hljs-keyword">release</span>(<span class="hljs-keyword">connection</span>, pst, resultSet);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="6、使用IDEA-连接数据库"><a href="#6、使用IDEA-连接数据库" class="headerlink" title="6、使用IDEA 连接数据库"></a>6、使用IDEA 连接数据库</h2><p><a href="https://img-blog.csdnimg.cn/46e76eec80fe43d99e85a1642bb5f859.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/46e76eec80fe43d99e85a1642bb5f859.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/e434b65c23e846799035c1583decedad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/e434b65c23e846799035c1583decedad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>连接<br><a href="https://img-blog.csdnimg.cn/aaacb1ba555947f0b66544603cc118f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/aaacb1ba555947f0b66544603cc118f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>连接成功后可以选择数据库<br><a href="https://img-blog.csdnimg.cn/0b405c320d8d41f89a2aa3d8aa88d6a7.png#pic_center"><img src="https://img-blog.csdnimg.cn/0b405c320d8d41f89a2aa3d8aa88d6a7.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>勾选需要连接的数据库</p><p><a href="https://img-blog.csdnimg.cn/6053e733d47f4c81b4da6bc1a82ebf1c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/6053e733d47f4c81b4da6bc1a82ebf1c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>双击表名即可查看表信息<br><a href="https://img-blog.csdnimg.cn/83429f339b2f453b9068b2db9b3f88fc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/83429f339b2f453b9068b2db9b3f88fc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="7、事务"><a href="#7、事务" class="headerlink" title="7、事务"></a>7、事务</h2><p>  要么都成功，要么失败！</p><p><strong>ACID原则</strong></p><ol><li>原子性：要么全部完成，要么都不完成</li><li>一致性：总数不变</li><li>持久性：一旦提交不可逆了，持久化到数据库了</li><li>隔离性：多个线程互不干扰</li></ol><p><strong>隔离性问题：</strong></p><ol><li>脏读：一个事务读取另一个没有提交的事务</li><li>不可重复读：在同一个事务内，重复读取表中的数据，表数据发生了变化</li><li>虚读（幻读）：在一个事务内，读取到别人插入的数据，导致前后读出来的结果不一致</li></ol><p><strong>代码实现</strong></p><ol><li>开启事务</li><li>一组业务执行完成，提交事务</li><li>可以在catch语句中 显示的定义 回滚语句，但默认失败就会回滚</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson04;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestTransaction</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 10:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTransaction_error</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//开启事务(关闭自动提交)</span><br>            connection.setAutoCommit(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">//编写sql</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;<br>            pst = connection.prepareStatement(sql1);<br>            pst.executeUpdate();<br><br>            <span class="hljs-comment">//int i = 1 / 0; 报错</span><br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;<br>            pst = connection.prepareStatement(sql2);<br>            pst.executeUpdate();<br>            <span class="hljs-comment">//提交事务</span><br>            connection.commit();<br>            System.out.println(<span class="hljs-string">&quot;成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//出现异常，回滚</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.rollback();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, pst, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="8-数据库连接池"><a href="#8-数据库连接池" class="headerlink" title="8.数据库连接池"></a>8.<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0&spm=1001.2101.3001.7020">数据库连接池</a></h2><p><strong>数据库连接——执行完毕——释放</strong><br>（连接—释放 :十分浪费系统资源）</p><p><strong>池化技术：准备一些预先的资源，过来就连接预先准备好的</strong></p><p>最小连接数：10<br>最大连接数：15<br>等待超时： 100ms</p><p><strong>开源数据库实现</strong></p><ol><li>dbcp</li><li>c3p0</li><li>druid：阿里巴巴</li></ol><p>  使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了。</p><p><strong>DBCP</strong></p><ul><li>需要用到的jar包</li><li>commons-dbcp-1.4</li><li>commons-pool-1.6</li></ul><p><strong>C3P0</strong></p><ul><li>需要用到的jar包</li><li>c3p0-0.9.5.5</li><li>mchange-commons-java-0.2.19</li></ul><p>结论：无论使用什么数据源，本质还是一样，DataSource接口不会变，方法就不会变。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/27/Java/JVM/"/>
    <url>/2022/11/27/Java/JVM/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><hr><p>title: JVM<br>categories: Java<br>date:<br>tags:</p><ul><li>Java</li></ul><p>—## <a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a> 常问面试题</p><p>请你谈谈你对JVM的理解？ java—&gt;class—-&gt;</p><p>Java8虚拟机和之前的变化更新？</p><p>什么是OOM 内存溢出</p><p>什么栈溢出StackOverFlowError？ 怎么分析</p><p>JVM 的常用调优参数？</p><p>内存快照如何抓取，怎么分析Dump文件？知道吗</p><p>谈谈JVM中，<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%8A%A0%E8%BD%BD&spm=1001.2101.3001.7020">类加载</a>器你的认识？</p><hr><h2 id="1-JVM的位置"><a href="#1-JVM的位置" class="headerlink" title="1.JVM的位置"></a>1.JVM的位置</h2><p><a href="https://img-blog.csdnimg.cn/c75dd1dd09ed4ad5b9d9becc4f4ad2c0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/c75dd1dd09ed4ad5b9d9becc4f4ad2c0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/ea76c368974a4b4583bc2723914e20da.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/ea76c368974a4b4583bc2723914e20da.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  JVM 调优百分之99都是在堆里面调优，方法区是特殊的堆。</p><p><a href="https://img-blog.csdnimg.cn/fe8de271243042879e446de289f9cb4e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/fe8de271243042879e446de289f9cb4e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="2-JVM的体系结构"><a href="#2-JVM的体系结构" class="headerlink" title="2.JVM的体系结构"></a>2.JVM的<a href="https://so.csdn.net/so/search?q=%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020">体系结构</a></h2><p><a href="https://img-blog.csdnimg.cn/a4da19b89f1643c9a230a32f1e114180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/a4da19b89f1643c9a230a32f1e114180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3.类加载器"></a>3.类加载器</h2><p>  作用：加载Class 文件，~ new Student();<br>  类似模板，是抽象的<br>  对象是实现，是具体的</p><ol><li>虚拟机自带的加载器</li><li>启动类（根）加载器</li><li>扩展类加载器</li><li>应用程序加载器</li></ol><p><a href="https://img-blog.csdnimg.cn/755316a0d0de458bade1e2dfbf18f909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/755316a0d0de458bade1e2dfbf18f909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>只有一个模板</p><p><a href="https://img-blog.csdnimg.cn/4c7e9452e4ec4c63b68ad65e143032a5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/4c7e9452e4ec4c63b68ad65e143032a5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h2 id="4-双亲委派机制"><a href="#4-双亲委派机制" class="headerlink" title="4.双亲委派机制"></a>4.双亲委派机制</h2><p>  第一步：类加载器收到类加载的请求<br>  第二步：将这个请求向上委托给父类加载器去完成 ，一直向上委托，直到启动类加载器（Boot）<br>  第三步：启动类加载器检查是否能够加载当前和这个类 ，能加载就结束，使用当前的加载器，否则，抛出异常，通知子加载器进行加载。<br>  第四步：重复 第三步 步骤。</p><p>  null ： java调用不到 ~C 、C++<br>    Java &#x3D; C++ ： 去掉繁琐的东西，指针，内存管理。<br>    Java &#x3D; C+±-</p><p>双亲委派机制推荐阅读这篇文章</p><blockquote><p><a href="https://blog.csdn.net/codeyanbao/article/details/82875064">https://blog.csdn.net/codeyanbao/article/details/82875064</a></p></blockquote><hr><h2 id="5-沙箱安全机制"><a href="#5-沙箱安全机制" class="headerlink" title="5.沙箱安全机制"></a>5.沙箱安全机制</h2><p>  没什么东西</p><hr><h2 id="6-Native"><a href="#6-Native" class="headerlink" title="6.Native"></a>6.<a href="https://so.csdn.net/so/search?q=Native&spm=1001.2101.3001.7020">Native</a></h2><p>  凡是带了native 关键字的，说明java 的作用范围达不到了，会去调用底层C 语言的库。<br>  凡是带了native 关键字的，会进入本地方法栈。</p><p>  调用本地接口：JNI<br>  JNI作用：扩展Java的使用，融合不同的编程语言为Java 所用！最初C、C++<br>  它在内存区域中专门开辟了一块标记区域：Native Method Stack，登记native 方法<br>  在最终执行的时候去加载本地方法库的方法，通过JNI</p><p>  本地方法接口（JNI）Java Native Interface<br>  本地方法库</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start0</span><span class="hljs-params">()</span></span>;<br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/053ceda75779450fb67d60b86b332f14.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/053ceda75779450fb67d60b86b332f14.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>调用其他接口：Scoket 、WebService~http</p><hr><h2 id="7-PC寄存器"><a href="#7-PC寄存器" class="headerlink" title="7.PC寄存器"></a>7.PC<a href="https://so.csdn.net/so/search?q=%E5%AF%84%E5%AD%98%E5%99%A8&spm=1001.2101.3001.7020">寄存器</a></h2><p>  程序计数器：Program Counter Register<br>    每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向一条指令的地址，也即将要执行的指令代码），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。</p><hr><h2 id="8-方法区"><a href="#8-方法区" class="headerlink" title="8.方法区"></a>8.方法区</h2><p>  Method Area 方法区<br>  方法区是被线程共享，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享空间。</p><p>  静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是，实例变量存在堆内存中，和方法区无关</p><p><strong>方法区里面存以下内容</strong><br>  1.static<br>  2.final<br>  3.Class 类模板<br>  4.常量池</p><p><strong>类加载过程（面试）</strong></p><ol><li>new 一个类的时候，先在方法区有一个类的模板</li><li>类模板完了 ，方法区还有个常量池</li><li>引用在栈内存</li><li>真实的 对象在堆内存</li><li>引用指向堆内存真实的地址</li></ol><hr><h2 id="9-栈"><a href="#9-栈" class="headerlink" title="9.栈"></a>9.栈</h2><p><strong>数据结构</strong></p><p>  程序 &#x3D; 数据结构 +算法 ： 持续学习~<br>  程序 &#x3D; 框架 + 业务逻辑 ： 吃饭</p><p>  栈：先进后出、后进先出</p><p><a href="https://img-blog.csdnimg.cn/eba963f33d5049b4a5927a99616cb04d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/eba963f33d5049b4a5927a99616cb04d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  队列：先进先出（FIFO：First Input First Output）<br><a href="https://img-blog.csdnimg.cn/65774473ee4c4f6a996597ec85eee56b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/65774473ee4c4f6a996597ec85eee56b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  喝多了吐就是栈，吃多了拉就是队列</p><p>为什么main 方法 先执行，最后结束！</p><p>栈：栈内存，主管程序的运行，生命周期与线程同步；<br>线程结束，栈内存也就释放，对于栈来说，不存在<a href="https://so.csdn.net/so/search?q=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&spm=1001.2101.3001.7020">垃圾回收</a>问题</p><p>一旦线程结束，栈就over了</p><p>栈：8大基本类型+对象引用</p><p>栈运行原理：栈帧</p><p>程序正在执行的方法，一定在栈的顶部</p><p><a href="https://img-blog.csdnimg.cn/c160f21f38834433a9869b9008d87637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/c160f21f38834433a9869b9008d87637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>栈 + 堆 + 方法区：的一些交互关系</p><p><a href="https://img-blog.csdnimg.cn/c5db06216a9a4a7c9a762d6100dcf568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/c5db06216a9a4a7c9a762d6100dcf568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="10-三种JVM"><a href="#10-三种JVM" class="headerlink" title="10.三种JVM"></a>10.三种JVM</h2><ol><li>Sun公司 HostSpot Java HotSpot™ 64-Bit Server VM (build 25.101-b13, mixed mode)</li><li>BEA Jrockit</li><li>IBM J9 VM</li></ol><hr><h2 id="11-堆"><a href="#11-堆" class="headerlink" title="11.堆"></a>11.堆</h2><p>Heap，一个JVM 只有一个<a href="https://so.csdn.net/so/search?q=%E5%A0%86%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">堆内存</a>，堆内存的大小是可以调节的。</p><p>类加载器读取了类文件后，一般会把什么东西放到堆中？<br>类的实例、方法、常量、变量~，保存我们所有引用类型的真实对象</p><p>堆内存中还要细分为三个区域：</p><ol><li>新生区 (伊甸园区) Young&#x2F;New</li><li>养老区 old</li><li>永久区 Perm</li></ol><p><a href="https://img-blog.csdnimg.cn/b94a77e1852c4d81be52fe1811b3b057.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/b94a77e1852c4d81be52fe1811b3b057.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  1.GC 垃圾回收主要是在伊甸园区和养老区~<br>  2.假设内存满了，OOM ，堆内存不够！<br>  3.在JDK 8以后，永久存储区改了个名字（元空间）</p><hr><h2 id="12-新生区、老年区"><a href="#12-新生区、老年区" class="headerlink" title="12.新生区、老年区"></a>12.新生区、老年区</h2><p>类：诞生 和 成长的地方、甚至死亡。<br>伊甸园区，所有的的对象都是在伊甸园区new 出来的！<br>幸存者区（0,1）</p><p>假设我的伊甸园区只能存储10个对象，当伊甸园区满了，就会触发一次轻GC。</p><p><a href="https://img-blog.csdnimg.cn/b66bc8bb26c04eca81b8a49c267b3e37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/b66bc8bb26c04eca81b8a49c267b3e37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>这次gc有以下情况：<br>  有的对象可以还被引用，就幸存下来了。<br>  有的对象没有被引用了，就死了、没了。</p><p>  幸存的下来的对象就移动到伊甸园区。</p><p>当伊甸园区和性幸存区都满了，就会触发一次重GC。<br>  重gc 清理一次后，能活下来的对象就进入养老区了。</p><p>（就跟一场战争一样，不断的活下来）</p><p>真理：经过研究，99%的对象都是临时对象！ new</p><h2 id="13-永久区"><a href="#13-永久区" class="headerlink" title="13.永久区"></a>13.永久区</h2><p>  1.jdk 1.6之前：永久代，常量池是在方法区中<br>  2.jdk 1.7 ：永久代， 但是慢慢的退化了，去 永久代，常量池在堆中<br>  3.jdk 1.8 之后：无永久代，常量池在元空间</p><p>  永久区常驻内存的，用来存放JDK自身携带的class对象，interface元数据，存储的是Java运行时的一些环境或类信息这个区域不存在垃圾回收！关闭虚拟机就会释放这个区域的内存</p><p>  OOM出现条件：一个启动器，加载了大量的第三方jar包、Tomcat部署了太多应用，大量动态生成的反射类，直到内存满。</p><p><a href="https://img-blog.csdnimg.cn/6cdd5bbaecbc42609f79ca53039b09eb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/6cdd5bbaecbc42609f79ca53039b09eb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>逻辑上存在，物理上不存在。</p><p>在一个项目中，突然出现OOM 故障，那么该如何排除研究为什么出错~<br>  1.能够看到代码第几行出错：内存快照分析工具，Eclipse MAT，Jprofiler<br>  2.Dubug，一行行分析代码~</p><p><strong>MAT，Jprofiler作用：</strong><br>  1.分析Dump内存文件，快速定位内存泄漏；<br>  2.获得堆中的数据<br>  3.获得大的对象~</p><p>  idea 安装Jprofiler<br><a href="https://img-blog.csdnimg.cn/07cf04b0fd7a45cb81efa04285e0e364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/07cf04b0fd7a45cb81efa04285e0e364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  安装之后配置<br><a href="https://img-blog.csdnimg.cn/c16b7b86da93411da8468a842245f99d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/c16b7b86da93411da8468a842245f99d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/e14b75bcbc6e4528aaaaa525dbc2f652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/e14b75bcbc6e4528aaaaa525dbc2f652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  idea 配置vm 参数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">-Xms20m -Xmx20m -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+HeapDumpOnOutOfMemoryError</span><br><span class="hljs-number">1</span><br><br><span class="hljs-variable constant_">JAVA</span><br></code></pre></td></tr></table></figure><p>  windows 客户端安装</p><p><a href="https://img-blog.csdnimg.cn/d695a698f16946a49d7f45ede2697ce8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/d695a698f16946a49d7f45ede2697ce8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.ej-technologies.com<span class="hljs-regexp">/download/</span>jprofiler/files<br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>Dump 内存文件分析<br><a href="https://img-blog.csdnimg.cn/8bdd43c7dd6c4883a2b5eebd68ad54d6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/8bdd43c7dd6c4883a2b5eebd68ad54d6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>分析：<br>  一眼就可以看成ArrayList 出现问题了<br><a href="https://img-blog.csdnimg.cn/5e7124c38b23453b8febf85c7255fbe2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/5e7124c38b23453b8febf85c7255fbe2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>错误代码如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">byte</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<span class="hljs-comment">//1mb</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>    List&lt;P1&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            list.add(<span class="hljs-keyword">new</span> P1());<br>            <span class="hljs-keyword">count</span>++;<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Throwable e)&#123;<br>        e.printStackTrace();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;count===&quot;</span>+<span class="hljs-keyword">count</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  通过查看线程发现，第24行代码发现问题<br><a href="https://img-blog.csdnimg.cn/9c89d5910c004bdd94af0b88e84496df.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/9c89d5910c004bdd94af0b88e84496df.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  生成dump文件之后会产生 java_pid21756.hprof.analysis 文件夹，可以将其删除<br><a href="https://img-blog.csdnimg.cn/0df761e16dba4eccbabb13f108f4d361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/0df761e16dba4eccbabb13f108f4d361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="14-堆内存调优"><a href="#14-堆内存调优" class="headerlink" title="14.堆内存调优"></a>14.堆内存调优</h2><p>没有</p><hr><h2 id="15-GC-：垃圾回收机制"><a href="#15-GC-：垃圾回收机制" class="headerlink" title="15.GC ：垃圾回收机制"></a>15.GC ：垃圾回收机制</h2><p>  垃圾回收的区域只有在堆里面（方法区在堆里面）<br><a href="https://img-blog.csdnimg.cn/a6c6f4ed99e247789434d7c111ab3c2f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/a6c6f4ed99e247789434d7c111ab3c2f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h3 id="15-1垃圾回收-x3D-GC"><a href="#15-1垃圾回收-x3D-GC" class="headerlink" title="15.1垃圾回收 &#x3D; GC"></a>15.1<strong>垃圾回收 &#x3D; GC</strong></h3><p>JVM 在进行垃圾回收（GC）时，并不是堆这三个区域统一回收。大部分时候，回收都是新生代~<br>  1.新生代<br>  2.幸存区（form，to）<br>  3.老年区</p><p>  GC 两种类：轻GC（普通GC），重GC （全局GC）</p><p>  轻GC 指针对 新生代 和 偶尔走一下 幸存区。</p><p>  重GC 全部清完。</p><p><strong>题目：</strong><br>  1.JVM的内存模型和分区~详细到每一个区放什么？<br>  2.堆里面的分区有哪些？<br>  3.GC的算法有哪些？<br>    标记清除法<br>    标记整理<br>    复制算法<br>    引用计数法<br>    怎么用的？<br>  4.轻GC 和 重GC 分别再什么时候发生？</p><p><strong>引用计数法</strong></p><p>  假设我对象A 用了 一次就给它加上1<br>  假设我对象B 用了 两次就给它加上2<br>  假设我对象C 没有使用 就是 0</p><p>  引用计数法就是给每个对象分配一个计数器</p><p>假设C 对象为 0，它就要被清除出去了</p><p>  JVM 现在一般不采用这种方式，不高效。<br><a href="https://img-blog.csdnimg.cn/325a6d699d69470e820d03f775017475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/325a6d699d69470e820d03f775017475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/d744ae7f8fbb43ce9cc12e6aab391b61.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/d744ae7f8fbb43ce9cc12e6aab391b61.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h3 id="15-2复制算法"><a href="#15-2复制算法" class="headerlink" title="15.2复制算法"></a>15.2<strong>复制算法</strong></h3><p>  每次GC 都会将 伊甸园区 活得对象 移动到 幸存区 中，如果幸存区放不下 ，就移到养老区中。<br>  一旦伊甸园区被GC 后，就会是空的。<br>  当某对象从伊甸园区 存活下来了。</p><p>  谁空谁是to<br>  假设这个对象还活着，它就把这个对象复制到另一个区域 要么是 form 要么是 to</p><p>  当某个对象 经历15次（默认值）GC 都还没有死的时候，就会进入养老区。</p><p><a href="https://img-blog.csdnimg.cn/821af2ce63844fa39c0d2a8cc1435eb0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/821af2ce63844fa39c0d2a8cc1435eb0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h3 id="15-3图解复制算法"><a href="#15-3图解复制算法" class="headerlink" title="15.3图解复制算法"></a>15.3<strong>图解复制算法</strong></h3><p>  假设 幸存区里面，to 是空的，form 里面有对象。<br><a href="https://img-blog.csdnimg.cn/ef302d1f31614a4e8aec5cba0d2fb221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/ef302d1f31614a4e8aec5cba0d2fb221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  现在要做一次垃圾回收了<br>  首先：伊甸园区 存活的对象往 to 里面走</p><p><a href="https://img-blog.csdnimg.cn/4ade8f094c894e468a576a996743b98e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/4ade8f094c894e468a576a996743b98e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  其次，form 区里面的 对象也要往 to 里面走<br>  每次清理完之后，伊甸园区是空的，to区是空的。<br><a href="https://img-blog.csdnimg.cn/2bb94682abc545b29ef102fe43e4e78e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/2bb94682abc545b29ef102fe43e4e78e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/1ec0202460cc472e9bfc4a10a000db48.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/1ec0202460cc472e9bfc4a10a000db48.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  经历15次GC之后，会把幸存区 里面或者的对象 移到养老区</p><p><a href="https://img-blog.csdnimg.cn/dcd9295ed79e4c2385d254f0aab413aa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/dcd9295ed79e4c2385d254f0aab413aa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>好处：没有内存的碎片<br>坏事：浪费一半内存的空间：多了一半空间用于是空的。</p><p>赋值算法最佳使用场景：对象存活度较低的时候；新生区</p><hr><h3 id="15-4标记清除算法"><a href="#15-4标记清除算法" class="headerlink" title="15.4标记清除算法"></a>15.4<strong>标记清除算法</strong></h3><p>扫描这些对象，对活着的对象进行标记<br>清除：对没有标记的对象，进行清除</p><p><a href="https://img-blog.csdnimg.cn/67f7cff0b89e4ad39bfb85632e024ad3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/67f7cff0b89e4ad39bfb85632e024ad3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>优点：不需要额外的空间<br>缺点：两次扫描严重浪费时间，会产生内存碎片。</p><hr><h3 id="15-5标记压缩"><a href="#15-5标记压缩" class="headerlink" title="15.5标记压缩"></a>15.5<strong>标记压缩</strong></h3><p><a href="https://img-blog.csdnimg.cn/547c3933e3bc4f8b96606e86033b0c3f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/547c3933e3bc4f8b96606e86033b0c3f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h3 id="15-6总结："><a href="#15-6总结：" class="headerlink" title="15.6总结："></a>15.6<strong>总结：</strong></h3><p>  内存效率：复制算法 &gt; 标记清除算法 &gt; 标记压缩算法（时间复杂度）<br>  内存整齐度：复制算法 &#x3D; 标记压缩算法 &gt; 标记清除算法<br>  内存利用率： 标记压缩算法 &#x3D; 标记清除算法 &gt; 复制算法</p><p><strong>没有最优算法吗？</strong><br>  没有；<br>  没有最好的算法，只有最合适的算法~ —-&gt;GC： 分代收集算法<br>  每一代用合适的算法就好了。</p><p>年轻代： （大部分的对象都在这里都死了）<br>  存活率低<br>  复制算法！</p><p>老年代：<br>  存活率高，区域大<br>  标记清除 + 标记压缩 混合实现</p><p>JMM<br>java Memory Model<br>什么是JMM?</p><hr><p><strong>学习方法</strong></p><p>  1.百度<br>  2.思维导图</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2022/11/27/Java/Mybatis/"/>
    <url>/2022/11/27/Java/Mybatis/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a><br>1<br>1、简介<br>1-1.什么是Mybatis</p><p>  Mybatis是一款优秀的持久层框架，它支持定制化SQL、存储过程以及高级映射。<br>  Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。<br>  MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。<br>  MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p><p>github地址</p><p><a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a><br>1<br>依赖</p><p>org.mybatis mybatis 3.5.7 </p><p>1 2 3 4 5 6 1-2.持久化 数据持久化</p><p>持久化就是将程序的数据在持久状态和瞬时状态转化的过程<br>内存：断电即失<br>数据库（jdbc）、io文件持久化<br>生活：冷藏，罐头。<br>为什么需要持久化？<br>有一些对象，不能让他丢掉。<br>内存太贵了<br>1-3.持久层（名词，概念）<br>Dao层，Service层，Controller层…<br>完成持久化工作的代码块<br>层界限十分明显。<br>1-4.为啥需要Mybatis？<br>帮助程序员将数据存入到数据库中。<br>方便<br>传统的JDBC代码太复杂了。简化。框架。自动化。<br>不用Mybatis也可以。更容易上手。技术没有高低之分<br>特点</p><p>简单易学：只要两个jar文件+配置几个sql映射文件易于学习<br>灵活： sql写在xml里，便于统一管理和优化。<br>解除sql与程序代码的耦合：将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，。sql和代码的分离，提高了可维护性。<br>提供映射标签，支持对象与数据库的orm字段关系映射<br>提供对象关系映射标签，支持对象关系组建维护<br>提供xml标签，支持编写动态sql。<br>最重要的一点：使用的人多！</p><p>2、第一个Mybatis程序<br>思路：搭建环境——》导入Mybatis——》编写代码——》测试</p><p>2-1.搭建环境</p><p>mysql mysql-connector-java 5.1.49 </p><p>org.mybatis mybatis 3.5.3 </p><p>junit junit 4.13 test </p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 2-2.创建模块 1.编写mybatis核心配置文件 </p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 2.编写mybatis工具类</p><p>package cn.bloghut.dao.utils;</p><p>import org.apache.ibatis.io.Resources;<br>import org.apache.ibatis.session.SqlSession;<br>import org.apache.ibatis.session.SqlSessionFactory;<br>import org.apache.ibatis.session.SqlSessionFactoryBuilder;</p><p>import java.io.IOException;<br>import java.io.InputStream;</p><p>&#x2F;**</p><ul><li><p>获取SQLSessionFactory对—-》sqlSession</p><p>&#x2F;<br>public class MybatisUtils {<br>private static SqlSessionFactory factory;<br>static {<br>try {<br>&#x2F;&#x2F;使用mybatis第一步<br>String resource &#x3D; “mybatis-config”;<br>InputStream in &#x3D; Resources.getResourceAsStream(resource);<br>factory &#x3D; new SqlSessionFactoryBuilder().build(in);</p><p>} catch (IOException e) {<br>e.printStackTrace();<br>}<br>}<br>&#x2F;</p><ul><li></li></ul><ul><li>既然有了SqlSessionFactory，顾名思义，我们就可以从中获得SQLSession实例了</li><li>SQLSession 完全包含了面向库执行 SQL 命令所需的所有方法</li><li>@return<br>*&#x2F;<br>public static SqlSession getSqlSession(){<br>return factory.openSession();<br>}</li></ul></li></ul><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>3.编写代码</p><p>实体类<br>Dao接口<br>接口实现类<br>public class User implements Serializable {<br>private int id;<br>private String name;<br>private String pwd;<br>&#x2F;&#x2F;省略toString ，get&#x2F;set<br>}</p><p>public interface UserDao {<br>List getUser();<br>}</p><p>​      select * from users   </p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 4.测试</p><p>@Test<br>public void test(){<br>&#x2F;&#x2F;第一步，获得SQLSession对象<br>SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();<br>&#x2F;&#x2F;执行SQL<br>&#x2F;&#x2F;方式一<br>&#x2F;&#x2F;UserDao userDao &#x3D; sqlSession.getMapper(UserDao.class);<br>&#x2F;&#x2F;List users &#x3D; userDao.getUser();</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//方式二<br>List&lt;<span class="hljs-keyword">User</span>&gt; users = sqlSession.selectList(&quot;cn.bloghut.dao.UserDao.getUser&quot;);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> : users)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br>&#125;<br>//关闭SQLSession<br>sqlSession.<span class="hljs-keyword">close</span>();<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>3、CRUD<br>3-1.namespace<br>namespace中的包名要和Dao&#x2F;Mapper 接口的包名一致！</p><p>3-2.select<br>选择、查询语句<br>id ：就是对应的namespace接口中的方法名；<br>resuleType ：SQL语句执行的返回值<br>parameterType ：参数类型</p><p>1.编写接口</p><p>&#x2F;**</p><ul><li>根据id查询用户</li><li>@param id</li><li>@return<br>*&#x2F;<br>User getUserById(int id);<br>1<br>2<br>3<br>4<br>5<br>6<br>2.编写对应的mapper中的sql语句</li></ul><p> 1 2 3 3.测试</p><p>@Test<br>public void t1() {<br>SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();<br>UserMapper userMapper &#x3D; sqlSession.getMapper(UserMapper.class);<br>User user &#x3D; userMapper.getUserById(1);<br>System.out.println(user);</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sqlSession.<span class="hljs-keyword">close</span>();<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>3-3.insert</p><p>insert into users(name,pwd) values(#{name},#{pwd})</p><p>1<br>2<br>3<br>3-4.update</p><p>update users set name&#x3D;#{name},pwd&#x3D;#{pwd} where id &#x3D; #{id} </p><p>1 2 3 4 3-5.delete </p><p>delete from users where id &#x3D; #{id} </p><p>1 2 3 注意：增删改需要提交事务</p><p>3-6万能Map<br>  假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p><p>@Test<br>public void t5() {<br>SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();<br>UserMapper userMapper &#x3D; sqlSession.getMapper(UserMapper.class);<br>Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();<br>map.put(“username”, “闲言”);<br>map.put(“password”, “111”);<br>userMapper.addUser2(map);<br>sqlSession.commit();<br>sqlSession.close();<br>}</p><p>void addUser2(Map&lt;String,Object&gt; map);</p><p>insert into users(name,pwd) values(#{username},#{password}) </p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Map 传递参数，直接在sql中取出key 【parameterType&#x3D;“Map”】 对象传递参数，直接在sql中取对象的属性即可 【parameterType&#x3D;“Object”】 只有一个基本类型参数的情况下，可以直接在sql中取到 多个参数用Map或注解 3-7模糊查询 1.Java代码执行的时候，传递通配符 %%</p><p>List userLike &#x3D; userMapper.getUserLike(“%闲%”);<br>1<br>2.在sql拼接中使用通配符</p><p>select * from users where name like “%”#{value}”%”<br>1<br>4、配置解析<br>4-1、核心配置文件<br>mybatis-config.xml<br>configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>4-2.environments（环境配置）<br>MyBatis 可以配置成适应多种环境<br>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。<br>学会使用配置多套运行环境！<br>Mybatis默认的事务管理器就是JDBC，连接池：POOLED<br>4-3.属性properties<br>  这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。【db.properties】</p><p>编写一个配置文件</p><p>db.properties<br>driver&#x3D;com.mysql.jdbc.Driver<br>url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF8<br>username&#x3D;root<br>password&#x3D;123<br>1<br>2<br>3<br>4<br>5<br>4-4.类型别名typeAliases<br>  存在别名的是为Java类型设置一个短的名字<br>  存在的意义仅用来减少类完全限定的冗余</p><p>1 2 3   也可以指定一个包名，Mybatis会在包名下面搜索java Bean ，比如：   扫描实体类的包，它的默认别名就是为这个类的类型，首字母小写！ </p><p>1 2 3   在实体类比较少的时候，使用第一种方式   如果实体类十分多，建议使用第二种   第一种可以DIY别名，第二种则不行，如果非要改，需要在实体上增加注解</p><p>@Alias(“user”)<br>public class User implements Serializable {<br>1<br>2<br>4-5.映射器<br>MapperRegistry：注册绑定我们的Mapper文件；<br>方式一：【推荐使用】</p><p>1 2 3 4 5 方式二：使用class文件绑定注册 </p><p>1 2 3 4 注意点：   接口和他的mapper文件都需要在Mybatis核心配置文件中注册   接口和他的mapper文件配置文件必须再同一包下！</p><p>方式三：使用扫描包注册</p><p>1 2 3 4 5 注意点：   接口和他的Mapper配置文件必须同名！   接口和他的mapper文件配置文件必须再同一包下！</p><p>4-6生命周期和作用域<br>  不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。</p><p>SqlSessionFactoryBuilder</p><p>一旦创建了 SqlSessionFactory，就不再需要它了。<br>局部变量<br>SqlSessionFactory</p><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。<br>SqlSessionFactory 的最佳作用域是应用作用域。<br>最简单的就是使用单例模式或者静态单例模式<br>SqlSession（相当于从连接池中获取一个连接）</p><p>连接到连接池的请求！<br>关闭<br>SqlSession 的实例不是线程安全的，因此是不能被共享的，它的最佳的作用域是请求或方法作用域<br>用完之后需要赶紧关闭，<br>一个SQLSession 可以多次使用它的getMapper方法，获取多个mapper接口实例<br>打个比方：</p><p>SqlSessionFactoryBuilder 是造车公司<br>造了100台车，然后买给租车公司（SQLSessionFactory），然后倒闭<br>SQLSession 用户 租车，使用车<br>mapper 用户的使用，用户租到车之后可以开去这，开去那，任凭使用<br>用户（SQLSession） 执行完想做的事之后，必须归还“汽车” 给租车公司（SQLSessionFactory）</p><p>  这里面的每一个mapper 就代表一个具体的业务。</p><p>5、解决属性名和字段名不一致的问题<br>数据库中的字段和JavaBean不一致的情况</p><p>public class User {<br>private int id;<br>private String name;<br>private String password;<br>1<br>2<br>3<br>4</p><p> 1 2 3 解决办法 起别名 </p><p> 1 2 3 2、ResultMap 结果集映射 resultMap 元素是 MyBatis 中最重要最强大的元素。   ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。   MyBatis 会在幕后自动创建一个 ResultMap，再根据属性名来映射列到 JavaBean 的属性上。 </p><p>1 2 3 4 5 6</p><p>6、日志<br>6-1.日志工厂<br>如果一个数据库操作出现了异常，我们需要排错。日志就是最好的助手！<br>曾经：debug sout<br>现在：日志工厂</p><p>SLF4J<br>LOG4J 【掌握】<br>LOG4J2<br>JDK_LOGGING<br>COMMONS_LOGGING<br>STDOUT_LOGGING<br>NO_LOGGING</p><p>1 2 3 4</p><p>6-2.LOG4J<br>什么是LOG4J</p><p>Log4j是Apache的一个开源项目<br>通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件<br>我们可以控制每一条日志的输出格式；<br>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。<br>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。<br>1.先导入LOG4J的依赖</p><p>log4j log4j 1.2.17 </p><p>1 2 3 4 5 2.编写log4j.properties文件</p><h3 id="配置根"><a href="#配置根" class="headerlink" title="配置根"></a>配置根</h3><p>log4j.rootLogger &#x3D; debug,console ,fileAppender,dailyRollingFile,ROLLING_FILE,MAIL,DATABASE</p><h3 id="设置输出sql的级别，其中logger后面的内容全部为jar包中所包含的包名"><a href="#设置输出sql的级别，其中logger后面的内容全部为jar包中所包含的包名" class="headerlink" title="设置输出sql的级别，其中logger后面的内容全部为jar包中所包含的包名"></a>设置输出sql的级别，其中logger后面的内容全部为jar包中所包含的包名</h3><p>log4j.logger.org.apache&#x3D;debug<br>log4j.logger.java.sql.Connection&#x3D;debug<br>log4j.logger.java.sql.Statement&#x3D;debug<br>log4j.logger.java.sql.PreparedStatement&#x3D;debug<br>log4j.logger.java.sql.ResultSet&#x3D;debug</p><h3 id="配置输出到控制台"><a href="#配置输出到控制台" class="headerlink" title="配置输出到控制台"></a>配置输出到控制台</h3><p>log4j.appender.console &#x3D; org.apache.log4j.ConsoleAppender<br>log4j.appender.console.Target &#x3D; System.out<br>log4j.appender.console.layout &#x3D; org.apache.log4j.PatternLayout<br>log4j.appender.console.layout.ConversionPattern &#x3D; %d{ABSOLUTE} %5p %c{1}:%L - %m%n</p><h3 id="配置输出到文件"><a href="#配置输出到文件" class="headerlink" title="配置输出到文件"></a>配置输出到文件</h3><p>log4j.appender.fileAppender &#x3D; org.apache.log4j.FileAppender<br>log4j.appender.fileAppender.File &#x3D; logs&#x2F;log.log<br>log4j.appender.fileAppender.Append &#x3D; true<br>log4j.appender.fileAppender.Threshold &#x3D; DEBUG<br>log4j.appender.fileAppender.layout &#x3D; org.apache.log4j.PatternLayout<br>log4j.appender.fileAppender.layout.ConversionPattern &#x3D; %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n</p><h3 id="配置输出到文件，并且每天都创建一个文件"><a href="#配置输出到文件，并且每天都创建一个文件" class="headerlink" title="配置输出到文件，并且每天都创建一个文件"></a>配置输出到文件，并且每天都创建一个文件</h3><p>log4j.appender.dailyRollingFile &#x3D; org.apache.log4j.DailyRollingFileAppender<br>log4j.appender.dailyRollingFile.File &#x3D; logs&#x2F;log.log<br>log4j.appender.dailyRollingFile.Append &#x3D; true<br>log4j.appender.dailyRollingFile.Threshold &#x3D; DEBUG<br>log4j.appender.dailyRollingFile.layout &#x3D; org.apache.log4j.PatternLayout<br>log4j.appender.dailyRollingFile.layout.ConversionPattern &#x3D; %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n</p><h3 id="配置输出到文件，且大小到达指定尺寸的时候产生一个新的文件"><a href="#配置输出到文件，且大小到达指定尺寸的时候产生一个新的文件" class="headerlink" title="配置输出到文件，且大小到达指定尺寸的时候产生一个新的文件"></a>配置输出到文件，且大小到达指定尺寸的时候产生一个新的文件</h3><p>log4j.appender.ROLLING_FILE&#x3D;org.apache.log4j.RollingFileAppender<br>log4j.appender.ROLLING_FILE.Threshold&#x3D;ERROR<br>log4j.appender.ROLLING_FILE.File&#x3D;rolling.log<br>log4j.appender.ROLLING_FILE.Append&#x3D;true<br>log4j.appender.ROLLING_FILE.MaxFileSize&#x3D;10KB<br>log4j.appender.ROLLING_FILE.MaxBackupIndex&#x3D;1<br>log4j.appender.ROLLING_FILE.layout&#x3D;org.apache.log4j.PatternLayout<br>log4j.appender.ROLLING_FILE.layout.ConversionPattern&#x3D;[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n</p><p>4j.appender.A1.layout&#x3D;org.apache.log4j.xml.XMLLayout<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>3.配置log4j为日志实现</p><p>1 2 3 4 4.测试</p><p>6-3简单使用<br>  1.在要使用log4j的类中导入Apache的包</p><p>import org.apache.log4j.Logger;<br>1<br>  2.日志对象，参数为当前类的class</p><p>static Logger logger &#x3D; Logger.getLogger(UserTest.class);<br>1<br>  3.使用</p><p>日志级别<br>info<br>debug<br>error<br>@Test<br>public void testLog4j(){<br>logger.info(“info:进入了testLog4j方法”);<br>logger.debug(“debug:进入了testLog4j方法”);<br>logger.error(“error:进入了testLog4j方法”);<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p><p>7、分页<br>思考：为什么要分页？<br>  减少数据的处理量</p><p>7-1.使用Limit分页<br>  语法：select * from users limit startIndex,PageSize;</p><p>1.接口</p><p>&#x2F;**</p><ul><li>分页查询用户</li><li>@param map</li><li>@return<br>*&#x2F;<br>List getUserByLimit(Map&lt;String,Object&gt; map);<br>1<br>2<br>3<br>4<br>5<br>6<br>2.映射文件</li></ul><p> 1 2 3 3.测试</p><p>@Test<br>public void t4(){<br>SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();<br>UserMapper userMapper &#x3D; sqlSession.getMapper(UserMapper.class);<br>Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();<br>map.put(“currentPage”,0);<br>map.put(“pageSize”,2);<br>List users &#x3D; userMapper.getUserByLimit(map);<br>for (User user : users) {<br>System.out.println(user);<br>}<br>sqlSession.close();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>7-2.RowBounds分页<br>  不再使用SQL实现分页<br>1.接口</p><p>&#x2F;**</p><ul><li>使用RowBounds实现分页</li><li>@return<br>*&#x2F;<br>List getUserByRowBounds();<br>1<br>2<br>3<br>4<br>5<br>2.mapper.xml</li></ul><p> 1 2 3 3.测试</p><p>@Test<br>public void t5(){<br>SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();<br>RowBounds rowBounds &#x3D; new RowBounds(0, 2);<br>&#x2F;&#x2F;通过Java代码层实现分页<br>List users &#x3D; sqlSession.selectList(“cn.bloghut.dao.UserMapper.getUserByRowBounds”, null, rowBounds);<br>for (User user : users) {<br>System.out.println(user);<br>}<br>sqlSession.close();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>7-3.分页插件<br>官网</p><p><a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a><br>1</p><p>8、注解开发<br>8-1.面向接口编程<br>  大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程。</p><p>  根本原因:解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</p><p>  在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了;</p><p>  而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p><p>关于接口的理解<br>  接口从更深层次的理解，应是定义(规范，约束)与实现(名实分离的原则）的分离。<br>  接口的本身反映了系统设计人员对系统的抽象理解。</p><p>接口应有两类:<br>    第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class);<br>    第二类是对一个个体某一方面的抽象，即形成一个抽象面(interface) ;<br>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p><p>三个面向区别<br>  面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法．<br>  面向过程是指，我们考虑问题时，以一个具体的流程（事务过程)为单位，考虑它的实现.<br>  接口设计与非接口设计是针对复用技术而言的，与面向对象（过程)不是一个问题.更多的体现就是对系统整体的架构</p><p>8-2.使用注解开发<br>1.注解在接口上实现</p><p>@Select(“select * from users”)<br>List getUsers();<br>1<br>2<br>2.需要在核心配置文件中绑定接口！</p><p>1 2 3 4 3.测试</p><p>  本质：反射机制实现<br>  底层：动态代理！</p><p>8-3.Mybatis详细的执行流程！</p><p>8-4.CRUD<br>在配置文件绑定Mapper接口位置</p><p>1 2 3 我们可以在工具类创建的时候实现自动提交事务！</p><p>&#x2F;**</p><ul><li>既然有了SqlSessionFactory，顾名思义，我们就可以从中获得SQLSession实例了</li><li>SQLSession 完全包含了面向库执行 SQL 命令所需的所有方法</li><li>@return<br>*&#x2F;<br>public static SqlSession getSqlSession(){<br>return factory.openSession(true);<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>接口</li></ul><p>public interface UserMapper {</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Select</span>(<span class="hljs-string">&quot;select * from users&quot;</span>)<br>List&lt;User&gt; <span class="hljs-built_in">getUsers</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法存在多个参数，所有的参数前面必须加上 @Param 注解</span><br><span class="hljs-comment"> * @param id</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@Select</span>(<span class="hljs-string">&quot;select * from users where id = #&#123;id&#125;&quot;</span>)<br>User <span class="hljs-built_in">getUserById</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;id&quot;</span>) int id);<br><br><span class="hljs-variable">@Insert</span>(<span class="hljs-string">&quot;insert into users(name,pwd) values(#&#123;name&#125;,#&#123;password&#125;)&quot;</span>)<br>int <span class="hljs-built_in">insert</span>(User user);<br><br><span class="hljs-variable">@Update</span>(<span class="hljs-string">&quot;update  users  set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;</span>)<br>int <span class="hljs-built_in">update</span>(User user);<br><br><span class="hljs-variable">@Delete</span>(<span class="hljs-string">&quot;delete from users where id = #&#123;id&#125;&quot;</span>)<br>int <span class="hljs-built_in">delete</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;id&quot;</span>)int id);<br><br><span class="hljs-selector-tag">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>测试</p><p>public class T {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> t1() &#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    //底层主要应用反射<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    List&lt;<span class="hljs-keyword">User</span>&gt; users = mapper.getUsers();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> : users) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br>    &#125;<br>    sqlSession.<span class="hljs-keyword">close</span>();<br><br>&#125;<br><br>@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> t2() &#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    //底层主要应用反射<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = mapper.getUserById(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br>    sqlSession.<span class="hljs-keyword">close</span>();<br><br>&#125;<br><br>@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> t3() &#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    //底层主要应用反射<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>    <span class="hljs-keyword">user</span>.setName(&quot;xian&quot;);<br>    <span class="hljs-keyword">user</span>.setPassword(&quot;321&quot;);<br>    <span class="hljs-type">int</span> flag = mapper.<span class="hljs-keyword">insert</span>(<span class="hljs-keyword">user</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(flag);<br>    sqlSession.<span class="hljs-keyword">close</span>();<br><br>&#125;<br>@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> t4() &#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    //底层主要应用反射<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>    <span class="hljs-keyword">user</span>.setId(<span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">user</span>.setName(&quot;xy&quot;);<br>    <span class="hljs-keyword">user</span>.setPassword(&quot;321&quot;);<br>    <span class="hljs-type">int</span> flag = mapper.<span class="hljs-keyword">update</span>(<span class="hljs-keyword">user</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(flag);<br>    sqlSession.<span class="hljs-keyword">close</span>();<br>&#125;<br>@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> t5() &#123;<br>    SqlSession sqlSession = MybatisUtils.getSqlSession();<br>    //底层主要应用反射<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-type">int</span> flag = mapper.<span class="hljs-keyword">delete</span>(<span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(flag);<br>    sqlSession.<span class="hljs-keyword">close</span>();<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>关于@Param注解</p><p>基本类型的参数或者String类型，需要加上<br>引用类型不需要加<br>如果只有一个基本类型的话，可以忽略，但是建议都加上<br>我们在SQL中引用的就是我们这里的@Param(“uid”)中设定的属性名<br>#{} 和 ${} 区别</p><p><a href="https://blog.csdn.net/weixin_41231928/article/details/105120292">https://blog.csdn.net/weixin_41231928/article/details/105120292</a><br>1<br>9、Lombox<br>1.安装插件方便使用的第三方工具</p><p>2.导入依赖</p><p>org.projectlombok lombok 1.16.16 </p><p>1 2 3 4 5 6 3.在实体类上使用</p><p>@Data<br>@AllArgsConstructor<br>@NoArgsConstructor<br>public class User {<br>private int id;<br>private String name;<br>private String password;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>@Getter and @Setter<br>@FieldNameConstants<br>@ToString<br>@EqualsAndHashCode<br>@AllArgsConstructor 全参构造方法<br>@RequiredArgsConstructor and<br>@NoArgsConstructor 无参构造方法<br>@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog<br>@Data<br>@Builder<br>@SuperBuilder<br>@Singular<br>@Delegate<br>@Value<br>@Accessors<br>@Wither<br>@With<br>@SneakyThrows<br>@val<br>@var<br>experimental @var<br>@UtilityClass<br>Lombok config system<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>加@Data注解之前</p><p>加@Data注解之后</p><p>常见注解说明</p><p>@Data：无参构造、get、set、toString、equals、toString<br>@AllArgsConstructor：有参构造<br>@NoArgsConstructor：无参构造<br>@toString：toString()方法<br>1<br>2<br>3<br>4<br>10、多对一处理</p><p>  多个学生，对应一个老师<br>  对于学生这边而言，关联…多个学生，关联一个老师【多对一】<br>  对于老师而言，集合，一个老师，有很多学生【一对多】</p><p>10-1.按照查询嵌套处理</p><p> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 10-2.按照结果嵌套处理 </p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 mybatis多对一查询方式 子查询 连表查询</p><p>11、一对多处理<br>比如：一个老师拥有多个学生！<br>对于老师而言，就是一对多关系</p><p>实体类</p><p>@AllArgsConstructor<br>@NoArgsConstructor<br>@Data<br>public class Teacher {<br>private int id;<br>private String name;<br>private List students;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>区别</p><p>@Data<br>@AllArgsConstructor<br>@NoArgsConstructor<br>public class Student {<br>private int id;<br>private String name;<br>private int tid;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>11-1.按照查询嵌套处理</p><p> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 11-2按照结果嵌套处理 </p><p> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 小结   关联-association   集合-collection   JavaType &amp; ofType     JavaType 用来指定实体类中的类型的     ofType 用来指定映射到List 集合中的pojo类型 ，泛型中的约束类型</p><p>面试高频</p><p>Mysql引擎<br>InnoDB底层原理<br>索引<br>索引优化！<br>12、动态SQL<br>  什么是动态SQL：动态SQL就是根据不同的条件生成不同的SQL语句</p><p>if<br>choose (when, otherwise)<br>trim (where, set)<br>foreach<br>1<br>2<br>3<br>4<br>12-1.if标签<br>这里需要用到1 &#x3D; 1，因为1&#x3D;1 这个条件无论如何都满足的 后面的条件 and 拼接才能成功。</p><p> 1 2 3 4 5 6 7 8 9 12-2.where标签   使用where标签可以排除掉 1&#x3D; 1，如果我们没有设置查询条件，mybatis自动把 where标签去掉。</p><p> where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。</p><p> 1 2 3 4 5 6 7 8 9 10 11 12-3.Choose标签   类似Java中的switch，只满足一个，如果都不满足，则执行outherwise </p><p> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 12-4.set标签   set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号。 </p><p>update blog title&#x3D;#{title}, author &#x3D; #{author} where id &#x3D; #{id} </p><p>1 2 3 4 5 6 7 8 9 10 11 12   所谓动态SQL，本质还是SQL语句，只是我们在SQL层面，去执行一个逻辑代码</p><p>12-5.foreach<br>  foreach 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</p><p>  提示 你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 foreach。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p><p>官方例子</p><p> 1 2 3 4 5 6 7 8 9 in： 类似一个区间 item： 当前元素 index： 当前迭代号，类似数组下标 open：开头 separator：分割 close：结尾 例： </p><p> 1 2 3 4 5 6 7 或者 </p><p> 1 2 3 4 5 6 7 8 动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</p><p>13、缓存<br>13-1.简介<br>查询 ： 连接数据库 ：好资源！<br>一次查询的结果，给他暂存到一个可以直接取到的地方！—》内存 ： 缓存</p><p>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</p><p>1.什么是缓存(Cache)？</p><p>存在内存中的临时数据<br>将用户经常查询的数据放在缓存（内存)，用户去查询数据就不用从磁盘上的（关系型数据库数据文件）查询，从缓存中查询，从而提高程序效率，解决了高并发的性能问题。<br>2.为什么使用缓存？</p><p>减少和数据库的交互次数，减少系统开销，提高系统效率<br>3.什么样的数据能使用缓存？</p><p>经常查询且不改变的数据。<br>缓存的重要性是不言而喻的。 使用缓存， 我们可以避免频繁的与数据库进行交互， 尤其是在查询越多、缓存命中率越高的情况下， 使用缓存对性能的提高更明显。</p><p>13-2.Mybatis 缓存<br>  MyBatis 包含一个非常强大的查询缓存特性,它可以非 常方便地配置和定制。缓存可以极大的提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存。 一级缓存和二级缓存。<br>默认情况下，只有一级缓存（SqlSession级别的缓存， 也称为本地缓存）开启。<br>二级缓存需要手动开启和配置，他是基于namespace级 别的缓存。<br>为了提高扩展性。MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存，将缓存数据保存到三方缓存里。<br>13-3.一级缓存（本地缓存）<br>与数据库同一次会话期间查询到的数据会放在本地缓存中<br>以后如果需要获取相同的数据，直接从缓存中取，没必要再去查询数据库。<br>一级缓存是sqlSession级别的缓存，默认一直是开启的。<br>测试步骤：</p><p>开启日志<br>测试在一个Session中查询两台相同记录<br>查看日志输出</p><p>缓存失效情况</p><p>查询不同的东西<br>增删改操作，可能会改变原来的数据，所以必定会刷新缓存<br>@Test<br>public void t2(){<br>SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();<br>UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);<br>User user &#x3D; mapper.getUserById(1);<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs abnf">User user1 <span class="hljs-operator">=</span> new User()<span class="hljs-comment">;</span><br>user1.setId(<span class="hljs-number">2</span>)<span class="hljs-comment">;</span><br>user1.setName(<span class="hljs-string">&quot;咸鱼&quot;</span>)<span class="hljs-comment">;</span><br>user1.setPwd(<span class="hljs-string">&quot;123456&quot;</span>)<span class="hljs-comment">;</span><br>mapper.update(user1)<span class="hljs-comment">;</span><br><br>User user2 <span class="hljs-operator">=</span> mapper.getUserById(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>System.out.println(user <span class="hljs-operator">=</span><span class="hljs-operator">=</span> user2)<span class="hljs-comment">;</span><br>sqlSession.close()<span class="hljs-comment">;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17</p><p>查询不同的Mapper.xml<br>手动清除</p><p>@Test<br>public void t2(){<br>SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();<br>UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);<br>User user &#x3D; mapper.getUserById(1);<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>sqlSession.clearCache();&#x2F;&#x2F;手动清理缓存<br>User user2 &#x3D; mapper.getUserById(1);<br>System.out.println(user &#x3D;&#x3D; user2);<br>sqlSession.close();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11</p><p>小结：一级缓存默认是开启的，只在一次SQLSession中有效，也就是拿到连接 到关闭连接这个区间有效。</p><p>13-4.二级缓存（全局缓存）<br>  基于namespace级别的缓存，一个namespace对应一个二级缓存。</p><p>工作机制：</p><p>一个会话，查询一条数据，这个数据就会被放在当前的一级缓存中。<br>如果会话关闭，一级缓存中的数据会被保存到二级缓存中，新的会话查询信息，就可以参照二级缓存。<br>sqlSession即通过EmployeeMapper查询Employee，也通过DepartmentMapper查询Department，不同namespace查出的数据会放在自己对应的缓存中（map）。<br>使用步骤：<br>开启全局缓存</p><p>1 2 在要使用二级缓存的Mapper.xml中开启 </p><p>1 2 测试 我们需要将实体类序列化！否则就会报错！</p><p>小结：</p><p>只要开启了二级缓存，在同一个Mapper下就有效<br>所有的数据都会先放在一级缓存中；<br>只有当会话提交，或者会话关闭的时候，才会提交到二级缓存中<br>13-5.缓存原理</p><p>13-6.自定义缓存-ehcache<br>Ehcache是一种广泛使用的开源Java分布式缓存。</p><p>1.导入依赖</p><p>org.mybatis.caches mybatis-ehcache 1.1.0 </p><p>1 2 3 4 5 6 2.在mapper文件中设置</p><p>3.编写ehcache配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;cache<br>        <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;cloud_user&quot;</span><br>        <span class="hljs-attribute">eternal</span>=<span class="hljs-string">&quot;false&quot;</span><br>        <span class="hljs-attribute">maxElementsInMemory</span>=<span class="hljs-string">&quot;5000&quot;</span><br>        <span class="hljs-attribute">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span><br>        <span class="hljs-attribute">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span><br>        <span class="hljs-attribute">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span><br>        <span class="hljs-attribute">timeToLiveSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span><br>        <span class="hljs-attribute">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2022/11/27/Java/Mysql/"/>
    <url>/2022/11/27/Java/Mysql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-数据库驱动"><a href="#1-数据库驱动" class="headerlink" title="1.数据库驱动"></a>1.数据库驱动</h2><p>  驱动：声卡、显卡</p><p><a href="https://img-blog.csdnimg.cn/b5ba877be8a84452ad15437cba4f6e95.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/b5ba877be8a84452ad15437cba4f6e95.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  我们的程序会通过 数据库驱动 和数据库打交道</p><hr><h2 id="2-JDBC"><a href="#2-JDBC" class="headerlink" title="2.JDBC"></a>2.JDBC</h2><p>  sun 公司为了简化开发 人员的（对数据库的统一）操作，提供一个（Java操作数据库的）规范，俗称JDBC这些规范的实现由具体的厂商去做~</p><p>  没有什么是加一层解决不了的<br><a href="https://img-blog.csdnimg.cn/9986af9325c54f10951deb9e6693d07f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/9986af9325c54f10951deb9e6693d07f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  java.sql<br>  javax.sql<br>  还需要导入一个数据库驱动包 mysql-connector-java-x.x.xx.jar</p><hr><h2 id="3、第一个JDBC程序"><a href="#3、第一个JDBC程序" class="headerlink" title="3、第一个JDBC程序"></a>3、第一个JDBC程序</h2><p>  创建数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> jdbcstudy;<br><br>use jdbcstudy;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users(<br>`id` <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span>,<br>`<span class="hljs-type">name</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>`<span class="hljs-keyword">password</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>`email` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>`birthday` <span class="hljs-type">date</span><br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,&quot;闲言博客&quot;,&quot;321&quot;,&quot;123@163.com&quot;,&quot;2000-12-15&quot;)<br>,(<span class="hljs-number">2</span>,&quot;闲言&quot;,&quot;123&quot;,&quot;123@qq.com&quot;,&quot;2000-12-31&quot;)<br>,(<span class="hljs-number">3</span>,&quot;csdn闲言_&quot;,&quot;456&quot;,&quot;123@qq.com&quot;,&quot;2001-2-27&quot;)<br><span class="hljs-number">123456789101112131415</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  1、创建一个普通项目<br>  2、添加数据库驱动到项目中<br><a href="https://img-blog.csdnimg.cn/87f764075e07406d84391e0e07e157d1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/87f764075e07406d84391e0e07e157d1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/46edd53154004d16b46e72bc039e0e9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/46edd53154004d16b46e72bc039e0e9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>现在lib 目录 可以展开了<br><a href="https://img-blog.csdnimg.cn/2cb6f65302fc4dd9bf631f05945282bf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/2cb6f65302fc4dd9bf631f05945282bf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson01;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> JdbcFirstDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 10:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcFirstDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2.创建连接</span><br>            <span class="hljs-comment">// useUnicode=true</span><br>            <span class="hljs-comment">// characterEncoding=utf8</span><br>            <span class="hljs-comment">// useSSL=true</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcstudy&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,username , password);<br>            <span class="hljs-comment">//3.连接成功，返回数据库对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users&quot;</span>;<br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>            <span class="hljs-comment">//4.执行sql</span><br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>            <span class="hljs-comment">//5.遍历结果集</span><br>            <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>                System.out.println(<span class="hljs-string">&quot;id：&quot;</span>+resultSet.getString(<span class="hljs-string">&quot;id&quot;</span>)+<span class="hljs-string">&quot;  name：&quot;</span>+<br>                        resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>)<br>                        +<span class="hljs-string">&quot;  password: &quot;</span>+resultSet.getString(<span class="hljs-string">&quot;password&quot;</span>));<br>            &#125;<br>            resultSet.close();<br>            statement.cancel();<br>            connection.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>步骤总结</strong></p><ol><li>加载驱动</li><li>创建连接 DriverManager</li><li>获取数据库对象 Statement</li><li>执行SQL</li><li>[获取结果集]</li><li>释放连接</li></ol><p><strong>DriverManager</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>DriverManager.registerDriver(new com.mysql.jdbc.Driver());<br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="hljs-regexp">//</span>固定写法，加载驱动<br><br><span class="hljs-regexp">//</span>Connection 代表数据库<br><span class="hljs-regexp">//</span>数据库设置自动提交<br><span class="hljs-number">12345</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>URL</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbcstudy&quot;</span>;<br><br>jdbc:mysql:<span class="hljs-regexp">//</span>主机名:端口号/数据库名?参数<span class="hljs-number">1</span>&amp;参数<span class="hljs-number">2</span>&amp;参数<span class="hljs-number">3</span><br><br><span class="hljs-regexp">//</span>oracle  --<span class="hljs-number">1521</span><br>jdbc:oracle:thin:@localhost:<span class="hljs-number">1521</span>:sid <br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>Connection</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">connection.commit();  <span class="hljs-regexp">//</span>设置提交事务<br>connection.isReadOnly();<span class="hljs-regexp">//</span>是否只读<br>connection.setAutoCommit(true);<span class="hljs-regexp">//</span>设置事务自动提交<br><span class="hljs-number">123</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>Statement（执行SQL的对象） prepareStatement()（执行SQL的对象）</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">statement.executeQuery(sql);<span class="hljs-regexp">//</span>执行查询，返回一个结果集<br>statement.execute();<span class="hljs-regexp">//</span>执行任何SQL<br>statement.executeUpdate();<span class="hljs-regexp">//</span>执行更新操作：插入、修改、删除，返回受影响的行数<br><span class="hljs-number">123</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>ResultSet 查询的结果集：封装了程序结果</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">--- 在不知道类型的情况下使用getObject类型<br>resultSet.getObject()<span class="hljs-comment">; </span><br><br>-- 在知道类型的情况下使用对应类型<br>resultSet.getString()<span class="hljs-comment">;</span><br>resultSet.getBigDecimal()<span class="hljs-comment">;</span><br>resultSet.getFloat()<span class="hljs-comment">;</span><br>resultSet.getDate()<span class="hljs-comment">;</span><br>resultSet.getDouble()<span class="hljs-comment">;</span><br>resultSet.getInt()<span class="hljs-comment">;</span><br>resultSet.getLong()<span class="hljs-comment">;</span><br><span class="hljs-number">1234567891011</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>遍历，指针</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">resultSet.<span class="hljs-keyword">next</span>();<span class="hljs-regexp">//</span>移动到下一个<br>resultSet.beforeFirst();<span class="hljs-regexp">//</span>移动到第一个<br>resultSet.afterLast();<span class="hljs-regexp">//</span>移动到最后面<br>resultSet.previous();<span class="hljs-regexp">//</span>移动到前一行<br>resultSet.absolute(row);<span class="hljs-regexp">//</span>移动到指定行<br><span class="hljs-number">12345</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>释放资源</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">resultSet.<span class="hljs-keyword">close</span>();<br><span class="hljs-keyword">statement</span>.cancel();<br><span class="hljs-keyword">connection</span>.<span class="hljs-keyword">close</span>();<br><span class="hljs-number">123</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><h2 id="4、Statement-对象详解"><a href="#4、Statement-对象详解" class="headerlink" title="4、Statement 对象详解"></a>4、Statement 对象详解</h2><p>  jdbc中的statement 用于向数据库发送SQL语句，想要完成对数据库的增、删、改、查，只需要通过这个对象向数据库发送增删改查语句即可</p><p>  Statement 对象的 executeUpdate方法，用于向数据库 发送增、删、改的SQL语句，executeUpdate执行完后，将会返回一个整数（即增删改语句导致数据库几行数据发生了变化）</p><p>  Statement. executeQuery()方法用于向数据库发送 查询语句，executeQuery()方法返回代表查询结果的ResultSet对象。</p><p><strong>CRUD操作–insert</strong><br>  使用statement.executeUpdate(String sql)方法完成数据添加操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();<br>String <span class="hljs-keyword">sql</span> = &quot;insert into user(...) values(...)&quot;<br><span class="hljs-type">int</span> num = <span class="hljs-keyword">statement</span>.executeUpdate(<span class="hljs-keyword">sql</span>);<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;插入成功&quot;);<br>&#125;<br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>CRUD操作–delete</strong><br><strong>加粗样式</strong>使用statement.executeUpdate(String sql)方法完成数据删除操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();<br>String <span class="hljs-keyword">sql</span> = &quot;delete from user where id = 1&quot;<br><span class="hljs-type">int</span> num = <span class="hljs-keyword">statement</span>.executeUpdate(<span class="hljs-keyword">sql</span>);<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;删除成功&quot;);<br>&#125;<br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>CRUD操作–update</strong><br>  使用statement.executeUpdate(String sql)方法完成数据修改操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();<br>String <span class="hljs-keyword">sql</span> = &quot;update user set name=&#x27;&#x27; where id = 1&quot;<br><span class="hljs-type">int</span> num = <span class="hljs-keyword">statement</span>.executeUpdate(<span class="hljs-keyword">sql</span>);<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;修改成功&quot;);<br>&#125;<br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>CRUD操作–select</strong><br>  使用statement.executeQuery(String sql) 完成查询操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span>  = <span class="hljs-keyword">connection</span>.createStatement();<br>String <span class="hljs-keyword">sql</span> = &quot;select * from user&quot;;<br>ResultSet rs = <span class="hljs-keyword">statement</span>.executeQuery(<span class="hljs-keyword">sql</span>);<br><span class="hljs-keyword">while</span>(rs.next())&#123;<br>    //根据获取列的数据类型，分别调用rs的相应方法映射到java对象中<br>&#125;<br><span class="hljs-number">123456</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>代码实现：</strong><br>1.提取工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02.utils;<br><br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> JdbcUtils</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;db.properties&quot;</span>);<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            properties.load(in);<br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            username = properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>            <span class="hljs-comment">//驱动只加载一次</span><br>            Class.forName(driver);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//获取连接</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, username, password);<br>    &#125;<br><br>    <span class="hljs-comment">//释放连接资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(Connection connection, Statement statement, ResultSet resultSet)</span> &#123;<br>        <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                statement.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resultSet != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                resultSet.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>2.增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInstance</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInsert</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//2.创建SQL的执行对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//3.执行SQL</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into users(id,name,password,email,birthday) values(4,&#x27;闲言&#x27;,&#x27;123&#x27;,&#x27;123@qq.com&#x27;,null) &quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, statement, resultSet);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>3.删</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInstance</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDelete</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//2.创建SQL的执行对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//3.执行SQL</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from users where id = 4&quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, statement, resultSet);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>4.改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInstance</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUpdate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//2.创建SQL的执行对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//3.执行SQL</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update users set name=&#x27;update闲言&#x27; where id = 2&quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, statement, resultSet);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>5.查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInstance</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/1 23:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestQuery</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//2.创建SQL的执行对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//3.执行SQL</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users&quot;</span>;<br>            <span class="hljs-comment">//4.遍历结果集</span><br>            resultSet = statement.executeQuery(sql);<br>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                System.out.println(resultSet.getString(<span class="hljs-number">2</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, statement, resultSet);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="5-PreparedStatement-对象"><a href="#5-PreparedStatement-对象" class="headerlink" title="5.PreparedStatement 对象"></a>5.PreparedStatement 对象</h2><p><a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">SQL注入</a>问题<br>  sql 存在漏洞，会被攻击，导致数据泄漏。SQL会被拼接</p><p>  preparedStatement 可以防止SQL 注入，效率更好！</p><h3 id="5-1、新增"><a href="#5-1、新增" class="headerlink" title="5.1、新增"></a>5.1、新增</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInsert</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 9:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInsert</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JdbcUtils.getConnection();<br><br>            <span class="hljs-comment">//区别</span><br>            <span class="hljs-comment">//使用 ？ 占位符代替参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into users(id,name,password,email,birthday) values(?,?,?,?,?)&quot;</span>;<br>            pst = connection.prepareStatement(sql); <span class="hljs-comment">//预编译sql，先写sql 然后不执行</span><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>            pst.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;闲言&quot;</span>);<br>            pst.setString(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>            pst.setString(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;123@qq.com&quot;</span>);<br>            <span class="hljs-comment">// 注意点： sql.Date 数据库</span><br>            <span class="hljs-comment">//        util.Date java  new java.util.Date().getTime() 获得时间戳</span><br>            pst.setDate(<span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date().getTime()));<br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pst.executeUpdate();<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, pst, <span class="hljs-literal">null</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="5-2、删除"><a href="#5-2、删除" class="headerlink" title="5.2、删除"></a>5.2、删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInsert</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 9:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDelete</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JdbcUtils.getConnection();<br><br>            <span class="hljs-comment">//区别</span><br>            <span class="hljs-comment">//使用 ？ 占位符代替参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from users where id = ?&quot;</span>;<br>            pst = connection.prepareStatement(sql); <span class="hljs-comment">//预编译sql，先写sql 然后不执行</span><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br><br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pst.executeUpdate();<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, pst, <span class="hljs-literal">null</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="5-3、修改"><a href="#5-3、修改" class="headerlink" title="5.3、修改"></a>5.3、修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInsert</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 9:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUpdate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JdbcUtils.getConnection();<br><br>            <span class="hljs-comment">//区别</span><br>            <span class="hljs-comment">//使用 ？ 占位符代替参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update   users set name=? where id = ?&quot;</span>;<br>            pst = connection.prepareStatement(sql); <span class="hljs-comment">//预编译sql，先写sql 然后不执行</span><br>            <span class="hljs-comment">//手动给参数赋值</span><br>            pst.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;闲言碎语&quot;</span>);<br>            pst.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> pst.executeUpdate();<br>            <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, pst, <span class="hljs-literal">null</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="5-4、查询"><a href="#5-4、查询" class="headerlink" title="5.4、查询"></a>5.4、查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestExecuteQuery</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 9:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestExecuteQuery</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取连接</span><br>            conn = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//编写sql</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where id = ?&quot;</span>;<br>            <span class="hljs-comment">//预编译</span><br>            pst = conn.prepareStatement(sql);<br>            pst.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            rs = pst.executeQuery();<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                System.out.println(rs.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>                System.out.println(rs.getString(<span class="hljs-string">&quot;password&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(conn, pst, rs);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="5-5、防止SQL注入"><a href="#5-5、防止SQL注入" class="headerlink" title="5.5、防止SQL注入"></a>5.5、防止SQL注入</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.bloghut.lesson03;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.<span class="hljs-keyword">Connection</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.PreparedStatement;<br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.ResultSet;<br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.<span class="hljs-keyword">Statement</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author by 闲言</span><br><span class="hljs-comment"> * @classname SQLIn</span><br><span class="hljs-comment"> * @description TODO</span><br><span class="hljs-comment"> * @date 2021/9/1 23:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> SqlIn &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">login</span>(&quot;闲言碎语&quot;, &quot;123&quot;);<br>//          <span class="hljs-keyword">login</span>(&quot;&#x27;or&#x27;  1=1&quot;,&quot;12133 &#x27;or&#x27;1=1&quot;);<br>    &#125;<br><br>    //登录业务<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> <span class="hljs-keyword">login</span>(String username, String <span class="hljs-keyword">password</span>) &#123;<br>        <span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span> = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pst = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br><br>        try &#123;<br>            <span class="hljs-keyword">connection</span> = JdbcUtils.getConnection();<br>            //preparedStatement 防止<span class="hljs-keyword">sql</span>注入的本质，把传递进来的参数当做字符<br>            //假设其中出现转义字符，就直接忽略了<br>            String <span class="hljs-keyword">sql</span> = &quot;select * from users where name = ? and password = ?&quot;;<br>            pst = <span class="hljs-keyword">connection</span>.prepareStatement(<span class="hljs-keyword">sql</span>);<br>            pst.setString(<span class="hljs-number">1</span>,username);<br>            pst.setString(<span class="hljs-number">2</span>,<span class="hljs-keyword">password</span>);<br>            resultSet = pst.executeQuery();<br>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(resultSet.getString(&quot;name&quot;));<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(resultSet.getString(&quot;password&quot;));<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;===================&quot;);<br>            &#125;<br>        &#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br>            e.printStackTrace();<br>        &#125; finally &#123;<br>            JdbcUtils.<span class="hljs-keyword">release</span>(<span class="hljs-keyword">connection</span>, pst, resultSet);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="6、使用IDEA-连接数据库"><a href="#6、使用IDEA-连接数据库" class="headerlink" title="6、使用IDEA 连接数据库"></a>6、使用IDEA 连接数据库</h2><p><a href="https://img-blog.csdnimg.cn/46e76eec80fe43d99e85a1642bb5f859.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/46e76eec80fe43d99e85a1642bb5f859.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/e434b65c23e846799035c1583decedad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/e434b65c23e846799035c1583decedad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>连接<br><a href="https://img-blog.csdnimg.cn/aaacb1ba555947f0b66544603cc118f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/aaacb1ba555947f0b66544603cc118f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>连接成功后可以选择数据库<br><a href="https://img-blog.csdnimg.cn/0b405c320d8d41f89a2aa3d8aa88d6a7.png#pic_center"><img src="https://img-blog.csdnimg.cn/0b405c320d8d41f89a2aa3d8aa88d6a7.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>勾选需要连接的数据库</p><p><a href="https://img-blog.csdnimg.cn/6053e733d47f4c81b4da6bc1a82ebf1c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/6053e733d47f4c81b4da6bc1a82ebf1c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>双击表名即可查看表信息<br><a href="https://img-blog.csdnimg.cn/83429f339b2f453b9068b2db9b3f88fc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/83429f339b2f453b9068b2db9b3f88fc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="7、事务"><a href="#7、事务" class="headerlink" title="7、事务"></a>7、事务</h2><p>  要么都成功，要么失败！</p><p><strong>ACID原则</strong></p><ol><li>原子性：要么全部完成，要么都不完成</li><li>一致性：总数不变</li><li>持久性：一旦提交不可逆了，持久化到数据库了</li><li>隔离性：多个线程互不干扰</li></ol><p><strong>隔离性问题：</strong></p><ol><li>脏读：一个事务读取另一个没有提交的事务</li><li>不可重复读：在同一个事务内，重复读取表中的数据，表数据发生了变化</li><li>虚读（幻读）：在一个事务内，读取到别人插入的数据，导致前后读出来的结果不一致</li></ol><p><strong>代码实现</strong></p><ol><li>开启事务</li><li>一组业务执行完成，提交事务</li><li>可以在catch语句中 显示的定义 回滚语句，但默认失败就会回滚</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson04;<br><br><span class="hljs-keyword">import</span> cn.bloghut.lesson02.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestTransaction</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/2 10:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTransaction_error</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取连接</span><br>            connection = JdbcUtils.getConnection();<br>            <span class="hljs-comment">//开启事务(关闭自动提交)</span><br>            connection.setAutoCommit(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">//编写sql</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;<br>            pst = connection.prepareStatement(sql1);<br>            pst.executeUpdate();<br><br>            <span class="hljs-comment">//int i = 1 / 0; 报错</span><br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;<br>            pst = connection.prepareStatement(sql2);<br>            pst.executeUpdate();<br>            <span class="hljs-comment">//提交事务</span><br>            connection.commit();<br>            System.out.println(<span class="hljs-string">&quot;成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//出现异常，回滚</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.rollback();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JdbcUtils.release(connection, pst, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="8-数据库连接池"><a href="#8-数据库连接池" class="headerlink" title="8.数据库连接池"></a>8.<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0&spm=1001.2101.3001.7020">数据库连接池</a></h2><p><strong>数据库连接——执行完毕——释放</strong><br>（连接—释放 :十分浪费系统资源）</p><p><strong>池化技术：准备一些预先的资源，过来就连接预先准备好的</strong></p><p>最小连接数：10<br>最大连接数：15<br>等待超时： 100ms</p><p><strong>开源数据库实现</strong></p><ol><li>dbcp</li><li>c3p0</li><li>druid：阿里巴巴</li></ol><p>  使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了。</p><p><strong>DBCP</strong></p><ul><li>需要用到的jar包</li><li>commons-dbcp-1.4</li><li>commons-pool-1.6</li></ul><p><strong>C3P0</strong></p><ul><li>需要用到的jar包</li><li>c3p0-0.9.5.5</li><li>mchange-commons-java-0.2.19</li></ul><p>结论：无论使用什么数据源，本质还是一样，DataSource接口不会变，方法就不会变。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pol&amp;&amp;Excel</title>
    <link href="/2022/11/27/Java/POI&amp;&amp;EasyExcel/"/>
    <url>/2022/11/27/Java/POI&amp;&amp;EasyExcel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1、常用信息<br>  (1)、将用户信息导出为excel表格（导出数据…)</p><p>  (2)、将Excel表中的信息录入到网站数据库（习题上传…)</p><p>  (3)开发中经常会设计到excel的处理，如导出Excel，导入Excel到数据库中!操作Excel目前比较流行的就是Apache POI和阿里巴巴的easyExcel !</p><p>是什么：组件，工具</p><p>  Apache POI 是用Java编写的免费开源的跨平台的 Java API，Apache POI提供API给Java程式对Microsoft Office格式档案读和写的功能。</p><p>2、Apache POI<br>官网：</p><p><a href="https://poi.apache.org/">https://poi.apache.org/</a><br>1</p><p>3、easyExcel<br>官网：</p><p><a href="https://www.yuque.com/easyexcel/doc/easyexcel">https://www.yuque.com/easyexcel/doc/easyexcel</a><br>1<br>  Java领域解析，生成Excel比较有名的框架有Apache poi,jxl等，但他们都存在一个严重的问题就是非常的耗内存，如果你的系统并发量不大的话可能还行，但是一旦并发上来后一定会OOM或者JVM频繁的full gc.</p><p>  EasyExcel是阿里巴巴开源的一个excel处理框架，以使用简单，节省内存著称，EasyExcel能大大减少占用内存的主要原因是在解析Excel时没有将文件数据一次性全部加载到内存中，而是从磁盘上一行行读取数据，逐个解析。</p><p>  EasyExcel采用一行一行的解析模式，并将一行的解析结果以观察者的模式通知处理（AnalysisEventListener）。</p><p>4、xls和xlsx区别<br>03和07版本的写，就是对象不同，方法一样</p><p>最大行列得数量不同：</p><p>  xls最大只有65536行、256列</p><p>  xlsx可以有1048576行、16384列</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--xls(03)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--xlsx(07)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>poi 操作xls的<br>poi-ooxml 操作xlsx的</p><p>操作的版本不同，使用的工具类也不同</p><p>工作簿：<br>工作表：<br>行：<br>列：</p><p>5、POI Excel 写 03和07版本方式<br>5.1小数据量<br>package cn.bloghut;</p><p>import org.apache.poi.hssf.usermodel.HSSFWorkbook;<br>import org.apache.poi.ss.usermodel.Cell;<br>import org.apache.poi.ss.usermodel.Row;<br>import org.apache.poi.ss.usermodel.Sheet;<br>import org.apache.poi.ss.usermodel.Workbook;<br>import org.apache.poi.xssf.usermodel.XSSFWorkbook;<br>import org.joda.time.DateTime;<br>import org.junit.jupiter.api.Test;</p><p>import java.io.FileNotFoundException;<br>import java.io.FileOutputStream;<br>import java.util.Date;</p><p>&#x2F;**</p><ul><li><p>@Classname ExcelWrite</p></li><li><p>@Description TODO</p></li><li><p>@Date 2022&#x2F;1&#x2F;7 12:41</p></li><li><p>@Created by 闲言<br>*&#x2F;<br>public class ExcelWrite {</p><p>String PATH &#x3D; “G:\狂\POIStudy\xy-poi”;</p><p>&#x2F;**</p><ul><li><p>写工作簿 03版本<br>*&#x2F;<br>@Test<br>public void Write03() throws Exception {<br>&#x2F;&#x2F;1.创建一个工作簿<br>Workbook workbook &#x3D; new HSSFWorkbook();<br>&#x2F;&#x2F;2.创建 一个工作表<br>Sheet sheet &#x3D; workbook.createSheet(“闲言粉丝统计表”);<br>&#x2F;&#x2F;3.创建一行<br>Row row1 &#x3D; sheet.createRow(0);<br>&#x2F;&#x2F;4.创建一个单元格<br>&#x2F;&#x2F;(1,1)<br>Cell cell1 &#x3D; row1.createCell(0);<br>cell1.setCellValue(“今日新增观众”);<br>&#x2F;&#x2F;(1,2)<br>Cell cell2 &#x3D; row1.createCell(1);<br>cell2.setCellValue(666);</p><p>&#x2F;&#x2F;创建第二行<br>Row row2 &#x3D; sheet.createRow(1);<br>&#x2F;&#x2F;(2,1)<br>Cell cell21 &#x3D; row2.createCell(0);<br>cell21.setCellValue(“统计时间”);<br>&#x2F;&#x2F;(2,2)<br>Cell cell22 &#x3D; row2.createCell(1);<br>String datetime &#x3D; new DateTime().toString(“yyyy-MM-dd HH:mm:ss”);<br>cell22.setCellValue(datetime);</p><p>&#x2F;&#x2F;生成一张表(IO流)，03版本就是使用xls结尾<br>FileOutputStream fos &#x3D; new FileOutputStream(PATH + “闲言观众统计表03.xls”);<br>&#x2F;&#x2F;输出<br>workbook.write(fos);<br>&#x2F;&#x2F;关闭流<br>fos.close();<br>System.out.println(“文件生成完毕”);</p></li></ul><p>}</p><p>&#x2F;**</p><ul><li><p>写工作簿 07版本<br>*&#x2F;<br>@Test<br>public void Write07() throws Exception {<br>&#x2F;&#x2F;1.创建一个工作簿<br>Workbook workbook &#x3D; new XSSFWorkbook();<br>&#x2F;&#x2F;2.创建 一个工作表<br>Sheet sheet &#x3D; workbook.createSheet(“闲言粉丝统计表”);<br>&#x2F;&#x2F;3.创建一行<br>Row row1 &#x3D; sheet.createRow(0);<br>&#x2F;&#x2F;4.创建一个单元格<br>&#x2F;&#x2F;(1,1)<br>Cell cell1 &#x3D; row1.createCell(0);<br>cell1.setCellValue(“今日新增观众”);<br>&#x2F;&#x2F;(1,2)<br>Cell cell2 &#x3D; row1.createCell(1);<br>cell2.setCellValue(666);</p><p>&#x2F;&#x2F;创建第二行<br>Row row2 &#x3D; sheet.createRow(1);<br>&#x2F;&#x2F;(2,1)<br>Cell cell21 &#x3D; row2.createCell(0);<br>cell21.setCellValue(“统计时间”);<br>&#x2F;&#x2F;(2,2)<br>Cell cell22 &#x3D; row2.createCell(1);<br>String datetime &#x3D; new DateTime().toString(“yyyy-MM-dd HH:mm:ss”);<br>cell22.setCellValue(datetime);</p><p>&#x2F;&#x2F;生成一张表(IO流)，03版本就是使用xlsx结尾<br>FileOutputStream fos &#x3D; new FileOutputStream(PATH + “闲言观众统计表07.xlsx”);<br>&#x2F;&#x2F;输出<br>workbook.write(fos);<br>&#x2F;&#x2F;关闭流<br>fos.close();<br>System.out.println(“文件生成完毕”);</p></li></ul><p>}</p></li></ul><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>注意对象一个区别，文件后缀</p><p>5.2大文件写HSSF（03）<br>缺点：最多只能处理65536行，否则会抛异常</p><p>java.lang.IllegalArgumentException: Invalid row number (65536) outside allowable range (0..65535)<br>1</p><p>优点：过程中写入缓存，不操作磁盘，最后一次性吸入磁盘，速度快</p><p>@Test<br>public void Write03BigData() throws Exception{</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">    <span class="hljs-comment">//时间</span><br>    long <span class="hljs-keyword">begin</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-comment">//1.创建一个工作簿</span><br>   Workbook workbook = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HSSFWorkbook()</span>;<br>    <span class="hljs-comment">//2.创建一个表</span><br>    Sheet sheet = workbook.create<span class="hljs-constructor">Sheet(<span class="hljs-string">&quot;第一页&quot;</span>)</span>;<br>    <span class="hljs-comment">//写入数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> rowNum = <span class="hljs-number">0</span>;rowNum&lt;<span class="hljs-number">65536</span>;rowNum++)&#123;<br>        <span class="hljs-comment">//3.创建行</span><br>        Row row = sheet.create<span class="hljs-constructor">Row(<span class="hljs-params">rowNum</span>)</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> CellNum = <span class="hljs-number">0</span>;CellNum&lt;<span class="hljs-number">10</span>;CellNum++)&#123;<br>           Cell cell = row.create<span class="hljs-constructor">Cell(CellNum)</span>;<br>           cell.set<span class="hljs-constructor">CellValue(CellNum)</span>;<br>       &#125;<br>    &#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    <span class="hljs-comment">//获取io流</span><br>    FileOutputStream fos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(PATH+<span class="hljs-string">&quot;Write03BigData.xls&quot;</span>)</span>;<br>    <span class="hljs-comment">//生成一张表</span><br>    workbook.write(fos);<br>    fos.close<span class="hljs-literal">()</span>;<br>    long <span class="hljs-keyword">end</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;耗时：&quot;</span>+(<span class="hljs-keyword">end</span>-<span class="hljs-keyword">begin</span>));<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>结果：</p><p>5.3大文件写XSSF（07）<br>缺点：写数据时速度非常慢，非常耗内存，也会发生内存溢出，如100万条。<br>优点：可以写较大数据量，如20万条。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void <span class="hljs-constructor">Write07BigData()</span> throws Exception&#123;<br><br>    <span class="hljs-comment">//时间</span><br>    long <span class="hljs-keyword">begin</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-comment">//1.创建一个工作簿</span><br>    Workbook workbook = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XSSFWorkbook()</span>;<br>    <span class="hljs-comment">//2.创建一个表</span><br>    Sheet sheet = workbook.create<span class="hljs-constructor">Sheet(<span class="hljs-string">&quot;第一页&quot;</span>)</span>;<br>    <span class="hljs-comment">//写入数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> rowNum = <span class="hljs-number">0</span>;rowNum&lt;<span class="hljs-number">65537</span>;rowNum++)&#123;<br>        <span class="hljs-comment">//3.创建行</span><br>        Row row = sheet.create<span class="hljs-constructor">Row(<span class="hljs-params">rowNum</span>)</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> CellNum = <span class="hljs-number">0</span>;CellNum&lt;<span class="hljs-number">10</span>;CellNum++)&#123;<br>            Cell cell = row.create<span class="hljs-constructor">Cell(CellNum)</span>;<br>            cell.set<span class="hljs-constructor">CellValue(CellNum)</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    <span class="hljs-comment">//获取io流</span><br>    FileOutputStream fos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(PATH+<span class="hljs-string">&quot;Write03BigData.xlsx&quot;</span>)</span>;<br>    <span class="hljs-comment">//生成一张表</span><br>    workbook.write(fos);<br>    fos.close<span class="hljs-literal">()</span>;<br>    long <span class="hljs-keyword">end</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;耗时：&quot;</span>+(<span class="hljs-keyword">end</span>-<span class="hljs-keyword">begin</span>));<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>结果：</p><p>5.4大文件写SXSSF<br>优点：可以写非常大的数据量，如100万条甚至更多条写数据速度快，占用更少的内存</p><p>注意：</p><p>过程中会产生临时文件，需要清理临时文件<br>默认由100条记录被保存在内存中，如果超过这数量，则最前面的数据被写入临时文件<br>如果想自定义内存中数据的数量，可以使用new SXSSFWorkbook（数量）<br>@Test<br>public void Write07BigDataS() throws Exception{</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">    <span class="hljs-comment">//时间</span><br>    long <span class="hljs-keyword">begin</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-comment">//1.创建一个工作簿</span><br>    Workbook workbook = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SXSSFWorkbook()</span>;<br>    <span class="hljs-comment">//2.创建一个表</span><br>    Sheet sheet = workbook.create<span class="hljs-constructor">Sheet(<span class="hljs-string">&quot;第一页&quot;</span>)</span>;<br>    <span class="hljs-comment">//写入数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> rowNum = <span class="hljs-number">0</span>;rowNum&lt;<span class="hljs-number">100000</span>;rowNum++)&#123;<br>        <span class="hljs-comment">//3.创建行</span><br>        Row row = sheet.create<span class="hljs-constructor">Row(<span class="hljs-params">rowNum</span>)</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> CellNum = <span class="hljs-number">0</span>;CellNum&lt;<span class="hljs-number">10</span>;CellNum++)&#123;<br>            Cell cell = row.create<span class="hljs-constructor">Cell(CellNum)</span>;<br>            cell.set<span class="hljs-constructor">CellValue(CellNum)</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    <span class="hljs-comment">//获取io流</span><br>    FileOutputStream fos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(PATH+<span class="hljs-string">&quot;Write03BigDataS.xlsx&quot;</span>)</span>;<br>    <span class="hljs-comment">//生成一张表</span><br>    workbook.write(fos);<br>    fos.close<span class="hljs-literal">()</span>;<br>    <span class="hljs-comment">//清除临时文件</span><br>    ((SXSSFWorkbook) workbook).dispose<span class="hljs-literal">()</span>;<br>    long <span class="hljs-keyword">end</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;耗时：&quot;</span>+(<span class="hljs-keyword">end</span>-<span class="hljs-keyword">begin</span>));<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>  SXSSFWorkbook-来至官方的解释︰实现”BigGridDemo”策略的流式XSSFWorkbook版本。这允许写入非常大的文件而不会耗尽内存，因为任何时候只有可配置的行部分被保存在内存中。</p><p>  请注意，仍然可能会消耗大量内存，这些内存基于您正在使用的功能，例如合并区域，注.…….当然只存储在内存中，因此如果广泛使用，可能需要大量内存。<br>再使用POI的时候!内存问题Jprofile !</p><p>6、POI Excel读 03和07版本方式<br>6.1 （03版本）<br>@Test<br>public void Read03() throws Exception{<br>&#x2F;&#x2F;1.获取文件流<br>FileInputStream fis &#x3D; new FileInputStream(PATH+”xy-poi闲言观众统计表03.xls”);<br>&#x2F;&#x2F;2.创建一个工作簿。使用excel能操作的这边都可以操作！<br>Workbook workbook &#x3D; new HSSFWorkbook(fis);<br>&#x2F;&#x2F;3.获取表<br>Sheet sheet &#x3D; workbook.getSheetAt(0);<br>&#x2F;&#x2F;4.获取第一行<br>Row row1 &#x3D; sheet.getRow(0);<br>&#x2F;&#x2F;5.获取第一列<br>Cell cell1 &#x3D; row1.getCell(0);<br>&#x2F;&#x2F;6.获取第一行第一列的值<br>String stringCellValue &#x3D; cell1.getStringCellValue();<br>&#x2F;&#x2F;获取第二列<br>Cell cell2 &#x3D; row1.getCell(1);<br>&#x2F;&#x2F;获取第一行第二列的值<br>double numericCellValue &#x3D; cell2.getNumericCellValue();<br>System.out.println(stringCellValue+” | “+numericCellValue);</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    fis.<span class="hljs-keyword">close</span>();<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>  注意获取值的类型即可</p><p>6.2（07版本）<br>@Test<br>public void Read07() throws Exception{<br>&#x2F;&#x2F;1.获取文件流<br>FileInputStream fis &#x3D; new FileInputStream(PATH+”xy-poi闲言观众统计表07.xlsx”);<br>&#x2F;&#x2F;2.创建一个工作簿。使用excel能操作的这边都可以操作！<br>Workbook workbook &#x3D; new XSSFWorkbook(fis);<br>&#x2F;&#x2F;3.获取表<br>Sheet sheet &#x3D; workbook.getSheetAt(0);<br>&#x2F;&#x2F;4.获取第一行<br>Row row1 &#x3D; sheet.getRow(0);<br>&#x2F;&#x2F;5.获取第一列<br>Cell cell1 &#x3D; row1.getCell(0);<br>&#x2F;&#x2F;6.获取第一行第一列的值<br>String stringCellValue &#x3D; cell1.getStringCellValue();<br>&#x2F;&#x2F;获取第二列<br>Cell cell2 &#x3D; row1.getCell(1);<br>&#x2F;&#x2F;获取第一行第二列的值<br>double numericCellValue &#x3D; cell2.getNumericCellValue();<br>System.out.println(stringCellValue+” | “+numericCellValue);<br>fis.close();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>  注意获取值的类型即可</p><p>6.3读取不同的数据类型<br>@Test<br>public void CellType03() throws Exception{<br>&#x2F;&#x2F;获取文件流<br>FileInputStream fis &#x3D; new FileInputStream(PATH+”明显表.xls”);<br>&#x2F;&#x2F;获取一个工作簿<br>Workbook workbook &#x3D; new HSSFWorkbook(fis);<br>&#x2F;&#x2F;获取一个工作表<br>Sheet sheet &#x3D; workbook.getSheetAt(0);<br>&#x2F;&#x2F;获取第一行内容<br>Row row &#x3D; sheet.getRow(0);<br>if (row !&#x3D; null){<br>&#x2F;&#x2F;获取所有的列<br>int Cells &#x3D; row.getPhysicalNumberOfCells();<br>for (int col &#x3D; 0;col &lt; Cells;col++){<br>&#x2F;&#x2F;获取当前列<br>Cell cell &#x3D; row.getCell(col);<br>if (cell !&#x3D; null){<br>&#x2F;&#x2F;获取当前行的第 col 列的值<br>String cellValue &#x3D; cell.getStringCellValue();<br>System.out.print(cellValue+” | “);<br>}<br>}<br>}<br>&#x2F;&#x2F;获取标准的内容<br>&#x2F;&#x2F;获取有多少行<br>int rowCount &#x3D; sheet.getPhysicalNumberOfRows();<br>&#x2F;&#x2F;从1开始，第一行是标题<br>for (int rowNum &#x3D; 1;rowNum &lt; rowCount;rowNum++){<br>Row rowData &#x3D; sheet.getRow(rowNum);<br>if (rowData !&#x3D; null){<br>&#x2F;&#x2F;获取当前行的列数<br>int cellCount &#x3D; rowData.getPhysicalNumberOfCells();<br>System.out.println();<br>for (int col &#x3D; 0;col &lt; cellCount;col++){<br>&#x2F;&#x2F;获取当前列的值<br>Cell cellData &#x3D; rowData.getCell(col);<br>&#x2F;&#x2F;打印当前行当前列的值<br>System.out.print(“[“+(rowNum+1)+”-“+(col+1)+”]”);<br>&#x2F;&#x2F;匹配列的类型<br>if (cellData !&#x3D; null){<br>&#x2F;&#x2F;获取列的类型<br>int cellType &#x3D; cellData.getCellType();<br>String cellValue &#x3D; “”;<br>switch (cellType){<br>case Cell.CELL_TYPE_STRING:&#x2F;&#x2F;字符串<br>System.out.print(“[string]”);<br>cellValue &#x3D; cellData.getStringCellValue();<br>break;<br>case Cell.CELL_TYPE_BOOLEAN:&#x2F;&#x2F;布尔<br>System.out.print(“[boolean]”);<br>cellValue &#x3D; String.valueOf(cellData.getBooleanCellValue());<br>break;<br>case Cell.CELL_TYPE_BLANK:&#x2F;&#x2F;空<br>System.out.print(“[blank]”);<br>break;<br>case Cell.CELL_TYPE_NUMERIC:&#x2F;&#x2F;数字（日期、普通数字）<br>System.out.print(“[numeric]”);<br>if (HSSFDateUtil.isCellDateFormatted(cellData)){<br>&#x2F;&#x2F;如果是日期<br>System.out.print(“[日期] “);<br>Date date &#x3D; cellData.getDateCellValue();<br>cellValue &#x3D; new DateTime(date).toString(“yyyy-MM-dd HH:mm:ss”);<br>}else {<br>&#x2F;&#x2F;不是日期格式，防止数字过长<br>System.out.print(“[转换字符串输出] “);<br>&#x2F;&#x2F;转为字符串<br>cellData.setCellType(HSSFCell.CELL_TYPE_STRING);<br>cellValue &#x3D; cellData.toString();</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">                            &#125;<br>                            break;<br>                        <span class="hljs-keyword">case</span>  Cell.CELL_TYPE_ERROR://错误<br>                            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;[error]&quot;);<br>                            break;<br>                    &#125;<br>                    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;[&quot;+cellValue+&quot;]\n&quot;);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;over&quot;);<br>    fis.<span class="hljs-keyword">close</span>();<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>  如果是07版本的Excel ，只需要将HSSFWorkbook类修改为XSSFWorkbook类。将xls文件修改为xlsx文件即可</p><p>测试：读取以下表格内容</p><p>结果：</p><p>7 EasyExcel操作<br>7.1导入依赖</p><p>com.alibaba<br>easyexcel<br>2.2.0-beta2</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7.2写入测试<br>1.格式类</p><p>@Getter<br>@Setter<br>@EqualsAndHashCode<br>public class DemoData {<br>@ExcelProperty(“字符串标题”)<br>private String string;<br>@ExcelProperty(“日期标题”)<br>private Date date;<br>@ExcelProperty(“数字标题”)<br>private Double doubleData;<br>&#x2F;**<br>* 忽略这个字段<br>*&#x2F;<br>@ExcelIgnore<br>private String ignore;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>2.写的方法</p><p>@Test<br>public void simpleWrite(){<br>&#x2F;&#x2F; 写法1<br>String fileName &#x3D; PATH+”EasyTest.xlsx”;<br>&#x2F;&#x2F;write(fileName,格式类)<br>&#x2F;&#x2F;sheet(表名)<br>&#x2F;&#x2F;doWrite(数据)<br>EasyExcel.write(fileName,DemoData.class).sheet(“模板”).doWrite(data());</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#125;<br><br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>结果</p><p>固定套路：<br>1、写入：固定类格式进行写入<br>2、读取：根据监听器设置的规则进行读取</p><p>7.3读测试<br>演示读取以下excel表格数据</p><p>1.格式类</p><p>@Getter<br>@Setter<br>@EqualsAndHashCode<br>public class DemoData {<br>private String string;<br>private Date date;<br>private Double doubleData;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>2.监听器</p><p>package cn.bloghut.esay;</p><p>import com.alibaba.excel.context.AnalysisContext;<br>import com.alibaba.excel.event.AnalysisEventListener;<br>import com.alibaba.fastjson.JSON;</p><p>import java.util.ArrayList;<br>import java.util.List;</p><p>&#x2F;&#x2F; 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去<br>public class DemoDataListener extends AnalysisEventListener {</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-built_in">int</span> BATCH_COUNT = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">private</span> List&lt;DemoData&gt; cachedDataList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(BATCH_COUNT);<br><br><span class="hljs-keyword">private</span> DemoDAO demoDAO;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DemoDataListener</span>()</span> &#123;<br>    <span class="hljs-comment">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span><br>    demoDAO = <span class="hljs-keyword">new</span> DemoDAO();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DemoDataListener</span>(<span class="hljs-params">DemoDAO demoDAO</span>)</span> &#123;<br>    <span class="hljs-keyword">this</span>.demoDAO = demoDAO;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取数据会执行invoke 方法</span><br><span class="hljs-comment"> * DemoData 类型</span><br><span class="hljs-comment"> * AnalysisContext 分析上下文</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param data</span><br><span class="hljs-comment"> * @param context</span><br><span class="hljs-comment"> */</span><br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span>(<span class="hljs-params">DemoData data, AnalysisContext context</span>)</span> &#123;<br>    System.<span class="hljs-keyword">out</span>.println(JSON.toJSONString(data));<br>    cachedDataList.<span class="hljs-keyword">add</span>(data);<br>    <span class="hljs-comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span><br>    <span class="hljs-keyword">if</span> (cachedDataList.size() &gt;= BATCH_COUNT) &#123;<br>        saveData();<br>        <span class="hljs-comment">// 存储完成清理 list</span><br>        cachedDataList.clear();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 所有数据解析完成了 都会来调用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param context</span><br><span class="hljs-comment"> */</span><br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterAllAnalysed</span>(<span class="hljs-params">AnalysisContext context</span>)</span> &#123;<br>    <span class="hljs-comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span><br>    saveData();<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;所有数据解析完成&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加上存储数据库</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveData</span>()</span> &#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>+cachedDataList.size());<br>    demoDAO.save(cachedDataList);<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;存储数据库成功&quot;</span>);<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>DAO类（不操作数据库，用不到）</p><p>public class DemoDAO {<br>public void save(List list) {<br>&#x2F;&#x2F; 如果是mybatis,尽量别直接调用多次insert,自己写一个mapper里面新增一个方法batchInsert,所有数据一次性插入<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>测试</p><p>@Test<br>public void simpleRead() throws Exception{<br>String fileName &#x3D; PATH+”EasyTest.xlsx”;<br>EasyExcel.read(fileName,DemoData.class,new DemoDataListener()).sheet().doRead();</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#125;<br><br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>结果</p><hr><p><a href="https://flork-github-io.vercel.app/categories/Java/">Java</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springCloud</title>
    <link href="/2022/11/27/Java/SpringCloud/"/>
    <url>/2022/11/27/Java/SpringCloud/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h3><ul><li>什么是微服务？</li></ul><p>微服务是最近几年流行起来的一直架构思想。更直白的说可以理解为一种新的思维方式，为问题的解决提供了一种不同的解决思路，与此同时，也提供了大量的就业机会。</p><p>微服务将的单一的应用程序划分为一组小的服务，每个服务运行在其自己独立的进程之中，服务之间可以相互协调，互相配置。为用户提供了最终的价值，服务之间采用轻量级别的通信机制（HTTP）。</p><p>微服务的核心思想是将传统的一站式应用，根据业务的拆分成一个一个的服务，彻底的去耦合，每一个微服务能够提供的单个的业务功能， 一个服务做一件事情，从技术的角度看就是一种小而独立的处理过程，类似进程的个概念。</p><ul><li>优点</li></ul><ol><li>单一的职责原则</li><li>高内聚，足够小，代码容易理解</li><li>开发简单，效率高</li><li>能够使用不同的语言开发</li><li>可以集成第三方的软件</li><li>……………</li></ol><ul><li>缺点</li></ul><ol><li>服务间的通信成本</li><li>系统部署依赖问题</li><li>数据的一致性问题</li><li>性能和监控问题</li></ol><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><h4 id="SpringCloud和SpringBoot的关系"><a href="#SpringCloud和SpringBoot的关系" class="headerlink" title="SpringCloud和SpringBoot的关系"></a>SpringCloud和SpringBoot的关系</h4><ul><li>SpringBoot专注于开苏方便的开发单个个体微服务；</li><li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li><li>SpringBoot可以离开SpringCloud独立使用，开发项目，但SpringCloud离不开SpringBoot，属于依赖关系；</li><li>SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架；</li></ul><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><ul><li>Netflix在涉及Eureka时，遵循的就是API原则.</li><li>Eureka是Netflix的有个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.</li><li>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client.</strong></li><li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li><li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).</li><li>Eureka Server：提供服务的注册与发现</li><li>Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能狗找到</li><li>Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到消费服务</li></ul><h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><h4 id="1-eureka-server"><a href="#1-eureka-server" class="headerlink" title="1. eureka-server"></a><strong>1. eureka-server</strong></h4><ul><li><p>导入依赖</p></li><li><p><code>  &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;            &lt;version&gt;1.4.6.RELEASE&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;        &lt;/dependency&gt; - 配置yml- ```yml  server:    port: 7001  # Eureka配置  eureka:    instance:      # Eureka服务端的实例名字      hostname: 127.0.0.1    client:      # 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)      register-with-eureka: false      # fetch-registry如果为false,则表示自己为注册中心,客户端的化为 ture      fetch-registry: false      # Eureka监控页面~      service-url:        defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/  YAML</code></p></li><li><p>启动类注解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">boot</span>.<span class="hljs-property">SpringApplication</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">boot</span>.<span class="hljs-property">autoconfigure</span>.<span class="hljs-property">SpringBootApplication</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">cloud</span>.<span class="hljs-property">netflix</span>.<span class="hljs-property">eureka</span>.<span class="hljs-property">server</span>.<span class="hljs-property">EnableEurekaServer</span>;<br><br><span class="hljs-comment">//启动之后，访问 http://localhost:7001/</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span> <span class="hljs-comment">//服务端的启动类，可以接受别人注册进来</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServer_7001</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SpringApplication</span>.<span class="hljs-title function_">run</span>(<span class="hljs-title class_">EurekaServer</span>_7001.<span class="hljs-property">class</span>,args);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable constant_">JAVA</span><br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost:7001/">http://localhost:7001/</a></p></li></ul><h4 id="2-eureka-client"><a href="#2-eureka-client" class="headerlink" title="2.eureka-client"></a><strong>2.eureka-client</strong></h4><ul><li>导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>MAVEN<br></code></pre></td></tr></table></figure><ul><li>配置yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Eureka配置：配置服务注册中心地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka/</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">springcloud-provider-dept-8001</span> <span class="hljs-comment">#修改Eureka上的默认描述信息</span><br>    <span class="hljs-comment">#如果此时停掉springcloud-provider-dept-8001 等30s后 监控会开启保护机制：</span><br><br><span class="hljs-string">YML</span><br></code></pre></td></tr></table></figure><ul><li>注解</li><li>主启动类中加入@EnableDiscoveryClient 注解 &#x2F;&#x2F;<em>开启服务发现客户端的注解，可以用来获取一些配置的信息，得到具体的微服务</em></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-comment">// @EnableEurekaClient 开启Eureka客户端注解，在服务启动后自动向注册中心注册服务</span><br><span class="hljs-variable">@EnableEurekaClient</span><br>public class DeptProvider_8001 &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(DeptProvider_8001.class,args);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-selector-tag">JAVA</span><br></code></pre></td></tr></table></figure><h4 id="3-配置关于服务加载的监控信息"><a href="#3-配置关于服务加载的监控信息" class="headerlink" title="3.配置关于服务加载的监控信息"></a>3.配置关于服务加载的监控信息</h4><ul><li>导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>MAVEN<br></code></pre></td></tr></table></figure><ul><li>配置yml</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># info配置</span><br><span class="hljs-attribute">info</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-comment"># 项目的名称</span><br>  <span class="hljs-attribute">app.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">NYNUywg-springcloud</span><br>  <span class="hljs-comment"># 公司的名称</span><br>  <span class="hljs-attribute">company.name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">南阳师范学院计算机科学与技术学院</span><br><br><br>YML<br></code></pre></td></tr></table></figure><h4 id="4-EureKa自我保护机制"><a href="#4-EureKa自我保护机制" class="headerlink" title="4.EureKa自我保护机制"></a>4.EureKa自我保护机制</h4><p><strong>某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！</strong></p><ul><li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（默认是90秒），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），当一分钟内收到的心跳数大量减少时，会触发该保护机制。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</li><li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。<br>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：eureka.server.enable-self-preservation&#x3D;false【不推荐关闭自我保护机制】</li></ul><h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7002</span><br><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7003</span><br><br><br><span class="hljs-string">YML</span><br></code></pre></td></tr></table></figure><p><strong>Eureka保证的是AP</strong></p><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><h4 id="负载均衡以及Ribbon"><a href="#负载均衡以及Ribbon" class="headerlink" title="负载均衡以及Ribbon"></a>负载均衡以及Ribbon</h4><ul><li>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套客户端负载均衡的工具。</li><li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li></ul><p>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</p><p>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。</p><p>常见的负载均衡软件有 Nginx、Lvs 等等。</p><p>Dubbo、SpringCloud 中均给我们提供了负载均衡，SpringCloud 的负载均衡算法可以自定义。</p><p>负载均衡简单分类：</p><p>集中式LB</p><p>即在服务的提供方和消费方之间使用独立的LB设施，如Nginx(反向代理服务器)，由该设施负责把访问请求通过某种策略转发至服务的提供方！<br>进程式 LB</p><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。<br>Ribbon 就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</p><h4 id="集成Ribbon"><a href="#集成Ribbon" class="headerlink" title="集成Ribbon"></a>集成Ribbon</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Ribbon--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Eureka: Ribbon需要从Eureka服务中心获取要拿什么--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>MAVEN<br>eureka:<br>  client:<br>    register-with-eureka: false # 不向 Eureka注册自己<br>    service-url: # 从三个注册中心中随机取一个去访问<br>      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/<br><br><br>YML<br>//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号<br>@SpringBootApplication<br>@EnableEurekaClient //开启Eureka 客户端<br>public class DeptConsumer_80 &#123;<br>    public static void main(String[] args) &#123;<br>        SpringApplication.run(DeptConsumer_80.class, args);<br>    &#125;<br>&#125;<br><br><br>JAVA<br>@Configuration<br>public class ConfigBean &#123;<br>    //@Configuration -- spring  applicationContext.xml<br>    @LoadBalanced //配置负载均衡实现RestTemplate<br>    @Bean<br>    public RestTemplate getRestTemplate() &#123;<br>        return new RestTemplate();<br>    &#125;<br>&#125;<br><br><br>JAVA<br></code></pre></td></tr></table></figure><h4 id="如何切换或者自定义规则"><a href="#如何切换或者自定义规则" class="headerlink" title="如何切换或者自定义规则"></a>如何切换或者自定义规则</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">在这里插入代码片@Configuration<br>public class ConfigBean &#123;<br>    <span class="hljs-regexp">//</span>@Configuration -- spring  applicationContext.xml<br>    /**<br>     * IRule:<br>     * RoundRobinRule 轮询策略<br>     * RandomRule 随机策略<br>     * AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~<br>     * RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试<br>     */<br>    @Bean<br>    public IRule myRule() &#123;<br>        return new RandomRule();<span class="hljs-regexp">//</span>使用随机策略<br>        <span class="hljs-regexp">//</span>return new RoundRobinRule();<span class="hljs-regexp">//</span>使用轮询策略<br>        <span class="hljs-regexp">//</span>return new AvailabilityFilteringRule();<span class="hljs-regexp">//</span>使用轮询策略<br>        <span class="hljs-regexp">//</span>return new RetryRule();<span class="hljs-regexp">//</span>使用轮询策略<br>    &#125;<br>&#125;<br><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><h4 id="Feign简介"><a href="#Feign简介" class="headerlink" title="Feign简介"></a>Feign简介</h4><p>Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p><h4 id="Feign的使用步骤"><a href="#Feign的使用步骤" class="headerlink" title="Feign的使用步骤"></a>Feign的使用步骤</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;!--<span class="hljs-title class_">Feign</span>的依赖--&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><br><br><span class="hljs-variable constant_">MAVEN</span><br><span class="hljs-comment">// @FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务</span><br><span class="hljs-meta">@FeignClient</span>(value = <span class="hljs-string">&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptClientService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/dept/get/&#123;id&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Dept</span> <span class="hljs-title function_">queryById</span>(<span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;id&quot;</span>) <span class="hljs-title class_">Long</span> id);<br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/dept/list&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">Dept</span>&gt; <span class="hljs-title function_">queryAll</span>();<br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/dept/add&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">addDept</span>(<span class="hljs-title class_">Dept</span> dept);<br>&#125;<br><br><br><span class="hljs-variable constant_">JAVA</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-comment">// feign客户端注解,并指定要扫描的包以及配置接口DeptClientService</span><br><span class="hljs-meta">@EnableFeignClients</span>(basePackages = &#123;<span class="hljs-string">&quot;com.yang.springcloud.service&quot;</span>&#125;)<br><span class="hljs-comment">// 切记不要加这个注解，不然会出现404访问不到</span><br><span class="hljs-comment">//@ComponentScan(&quot;com.yang.springcloud.service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignDeptConsumer_80</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SpringApplication</span>.<span class="hljs-title function_">run</span>(<span class="hljs-title class_">FeignDeptConsumer</span>_80.<span class="hljs-property">class</span>, args);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable constant_">JAVA</span><br></code></pre></td></tr></table></figure><h3 id="Hystrix服务熔断"><a href="#Hystrix服务熔断" class="headerlink" title="Hystrix服务熔断"></a>Hystrix服务熔断</h3><p><strong>什么是服务熔断?</strong><br><strong>熔断机制是赌赢雪崩效应的一种微服务链路保护机制。</strong></p><p>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阀值缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是：@HystrixCommand。</p><p>服务熔断解决如下问题：</p><ul><li><strong>当所依赖的对象不稳定时，能够起到快速失败的目的；</strong></li><li><strong>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</strong></li></ul><ol><li>导依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入Hystrix依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>MAVEN<br></code></pre></td></tr></table></figure><ol><li>yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><br><span class="hljs-comment">#mybatis配置</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># springcloud-api 模块下的pojo包</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.yang.springcloud.pojo</span><br>  <span class="hljs-comment"># 本模块下的mybatis-config.xml核心配置文件类路径</span><br>  <span class="hljs-attr">config-location:</span> <span class="hljs-string">classpath:mybatis/mybatis-config.xml</span><br>  <span class="hljs-comment"># 本模块下的mapper配置文件类路径</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span><br><br><span class="hljs-comment">#spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springcloud-provider-dept</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/db01?useUnicode=true&amp;characterEncoding=UTF-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-comment"># Eureka配置：配置服务注册中心地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br>  <span class="hljs-comment">#修改Eureka上的默认描述信息</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">springcloud-provider-dept-8001</span><br>    <span class="hljs-comment">#prefer-ip-address: true #改为true后默认显示的是ip地址而不再是localhost</span><br><span class="hljs-comment"># info配置</span><br><span class="hljs-attr">info:</span><br>  <span class="hljs-comment"># 项目的名称</span><br>  <span class="hljs-attr">app.name:</span> <span class="hljs-string">NYNUywg-springcloud</span><br>  <span class="hljs-comment"># 公司的名称</span><br>  <span class="hljs-attr">company.name:</span> <span class="hljs-string">南阳师范学院计算机科学与技术学院</span><br><br><br><span class="hljs-string">YML</span><br></code></pre></td></tr></table></figure><ol><li>java</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询部门信息</span><br><span class="hljs-comment">     * 如果根据id查询出现异常,则走hystrixGet这段备选代码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = <span class="hljs-string">&quot;hystrixGet&quot;</span>)</span><br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/dept/get/&#123;id&#125;&quot;</span>)</span><span class="hljs-comment">//根据id查询</span><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-keyword">get</span>(<span class="hljs-meta">@PathVariable(<span class="hljs-string">&quot;id&quot;</span>)</span> <span class="hljs-built_in">Long</span> id)&#123;<br>        Dept dept = deptService.queryById(id);<br>        <span class="hljs-keyword">if</span> (dept==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> new RuntimeException(<span class="hljs-string">&quot;这个id=&gt;&quot;</span>+id+<span class="hljs-string">&quot;,不存在该用户，或信息无法找到~&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dept;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询备选方案(熔断)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Dept hystrixGet(<span class="hljs-meta">@PathVariable(<span class="hljs-string">&quot;id&quot;</span>)</span> <span class="hljs-built_in">Long</span> id)&#123;<br>        <span class="hljs-keyword">return</span> new Dept(id,<span class="hljs-string">&quot;这个id=&gt;&quot;</span>+id+<span class="hljs-string">&quot;,没有对应的信息,null---@Hystrix~&quot;</span>,<span class="hljs-string">&quot;在MySQL中没有这个数据库&quot;</span>);<br>    &#125;<br>&#125;<br><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>主启动类添加<code>@EnableCircuitBreaker</code>熔断注解</strong></p><h4 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h4><h4 id="什么是Hystrix"><a href="#什么是Hystrix" class="headerlink" title="什么是Hystrix"></a>什么是Hystrix</h4><h4 id="Hystrix能做什么"><a href="#Hystrix能做什么" class="headerlink" title="Hystrix能做什么"></a>Hystrix能做什么</h4><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><p>什么是服务降级?<br>服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，就是尽可能的把系统资源让给优先级高的服务。<br>资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。</p><p><strong>服务降级主要用于什么场景呢？</strong>当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。</p><p>降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行 ；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。</p><p>由上图可得，当某一时间内服务A的访问量暴增，而B和C的访问量较少，为了缓解A服务的压力，这时候需要B和C暂时关闭一些服务功能，去承担A的部分服务，从而为A分担压力，叫做服务降级。</p><p>服务降级需要考虑的问题</p><p>那些服务是核心服务，哪些服务是非核心服务<br>那些服务可以支持降级，那些服务不能支持降级，降级策略是什么<br>除服务降级之外是否存在更复杂的业务放通场景，策略是什么？<br>自动降级分类</p><p>1）超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p><p>2）失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p><p>3）故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p><p>4）限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p><h4 id="服务熔断和服务降级的区别"><a href="#服务熔断和服务降级的区别" class="headerlink" title="服务熔断和服务降级的区别"></a>服务熔断和服务降级的区别</h4><h4 id="Dashboard流监控"><a href="#Dashboard流监控" class="headerlink" title="Dashboard流监控"></a>Dashboard流监控</h4><h3 id="Zull"><a href="#Zull" class="headerlink" title="Zull"></a>Zull</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><h3 id="Grateway"><a href="#Grateway" class="headerlink" title="Grateway"></a>Grateway</h3><h3 id="SpringCloudConfig"><a href="#SpringCloudConfig" class="headerlink" title="SpringCloudConfig"></a>SpringCloudConfig</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程</title>
    <link href="/2022/11/27/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/11/27/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-计算机网络概念"><a href="#1-计算机网络概念" class="headerlink" title="1.计算机网络概念"></a>1.计算机网络概念</h2><p>  计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接（有线性、无线）起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。</p><p>网络编程的目的<br>  传播交流信息<br>  数据交换、通信。</p><p>想要达到这个效果，需要什么<br>  1.如何准确的定位网络上的一台主机 192.168.1.100： 端口，定位到这个计算机上的某个资源。<br>  2.找到了这个主机，如何传输数据呢？</p><p>JavaWeb ： 网页编程 B&#x2F;S架构<br>网络编程： TCP&#x2F;IP C&#x2F;S架构</p><p>网络通信要素<br>  如何实现网络的通信？<br>  通信双方的地址：<br>    IP、端口号。<br>    192.168.1.100:8080</p><p>TCP&#x2F;IP参考模型<br><a href="https://img-blog.csdnimg.cn/c18bc38f09c04c8aa8306523a28488ce.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/c18bc38f09c04c8aa8306523a28488ce.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>小结：<br>  1.网络编程中两个主要问题<br>    如何准确定位到网络上的一台或多台主机<br>    找到主机之后如何进行通信</p><p>  2.网络编程中的要素<br>    IP 和 端口号<br>    网络通信协议</p><p>  3.Java 万物皆对象</p><hr><h2 id="2-IP"><a href="#2-IP" class="headerlink" title="2.IP"></a>2.IP</h2><p>  ip地址：InetAddress</p><p>  1.唯一定位一台网络上计算机<br>  2.127.0.0.1： 本机localhost<br>  3.ip地址的分类<br>    IPV4&#x2F;IPv6<br>        IPV4 127.0.0.1 4个字节组成，0-255 42亿个 30亿都在北美，亚洲4亿。2011年就用尽<br>        IPV6 ；128位。8个无符号整数！</p><p>    公网-私网</p><hr><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson01;<br><br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TestInetAddress</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 测试IP</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/1 17:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInetAddress</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//查询本机的ip地址</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">localhost</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        System.out.println(localhost);<br><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">localHost</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>        System.out.println(localHost);<br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br>        <span class="hljs-comment">//查询网站ip地址</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>        System.out.println(name);<br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br>        <span class="hljs-comment">//常用方法</span><br>        <span class="hljs-comment">//System.out.println(name.getAddress());</span><br>        System.out.println(name.getHostAddress());<span class="hljs-comment">//获取主机ip地址</span><br>        System.out.println(name.getHostName());<span class="hljs-comment">// 获取域名</span><br>        System.out.println(name.getCanonicalHostName());<span class="hljs-comment">//获取规范的主机ip地址</span><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><h2 id="3-端口"><a href="#3-端口" class="headerlink" title="3.端口"></a>3.端口</h2><p>  端口表示计算机上的一个程序的进程。</p><p>  1.一栋楼表示一个ip ，这栋楼里面的 门牌号 就是端口号。<br>  2.不同的进程有不同的端口号！用来区分软件的。<br>  3.端口被规定为：0-65535<br>  4.TCP ，UDP： 每个都有 0-65535 * 2 ，单个协议下，端口号不能冲突。<br>  5.端口分类<br>    共有端口0-1023<br>      HTTP ： 80<br>      HTTPS ：443<br>      FTP ： 21<br>      Telet ： 23<br>    程序注册端口：1024-49151，分配给用户或者程序<br>        Tomcat：8080<br>        Mysql：3306<br>        Oracle：1521<br>    动态、私有：49152-65535</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">netstat</span> -ano <span class="hljs-comment">#查看所有端口</span><br>netstat -ano  | findstr <span class="hljs-string">&quot;5900&quot;</span> <span class="hljs-comment">#查看指定的端口</span><br>tasklist | findstr <span class="hljs-string">&quot;8696&quot;</span> <span class="hljs-comment">#查看指定端口的进程</span><br>Ctrl + Shift + ESC<br><span class="hljs-number">1234</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><p>练习代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.bloghut.lesson01;<br><br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author by 闲言</span><br><span class="hljs-comment"> * @classname TesyInetSocketAddress</span><br><span class="hljs-comment"> * @description TODO</span><br><span class="hljs-comment"> * @date 2021/8/1 18:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> TesyInetSocketAddress &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><br>        InetSocketAddress socketAddress = <span class="hljs-built_in">new</span> InetSocketAddress(&quot;127.0.0.1&quot;, <span class="hljs-number">8080</span>);<br>        InetSocketAddress socketAddress1 = <span class="hljs-built_in">new</span> InetSocketAddress(&quot;localhost&quot;, <span class="hljs-number">8080</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(socketAddress);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(socketAddress1);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;====================&quot;);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(socketAddress.getAddress());//ip地址<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(socketAddress.getHostName());//主机名称<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(socketAddress.getHostString());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(socketAddress.getPort());//端口<br>        <br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><h2 id="4-通信协议"><a href="#4-通信协议" class="headerlink" title="4.通信协议"></a>4.通信协议</h2><p>  协议：约定，就好比我们现在说的是普通话。</p><p>  网络通信协议：<br>    1.速率<br>    2.传输码率<br>    3.代码结构<br>    4.传输控制</p><p>  问题：非常的复杂</p><p>  TCP&#x2F;IP协议簇：实际上是一组协议<br>  重要：<br>    TCP：用户传输协议<br>    UDP：用户数据报协议</p><p>  出名的协议：<br>    TCP<br>    IP</p><p>TCP和UDP 对比：</p><p>  TCP：打电话<br>    连接： 稳定<br>    三次握手<br>      A：你愁啥？<br>      B：瞅你咋地？<br>      A：干一次！</p><p>    四次挥手</p><p>      A：我要断开了 （我要走了）<br>      B：我知道你要断开了（你真的要走了吗？）<br>      B：你真的断开了吗？（你真的真的要走了吗？）<br>      A：我真的断开了 （我真的要走了）</p><p>    客户端，服务端<br>    传输完成，释放连接、效率低</p><p><a href="https://img-blog.csdnimg.cn/1637d3ca26d646fb8e06b9e1e5d065db.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/1637d3ca26d646fb8e06b9e1e5d065db.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  第一次握手：建立连接时，客户端发送syn包（syn&#x3D;j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p><p>  第二次握手：服务器收到syn包，必须确认客户的SYN（ack&#x3D;j+1），同时自己也发送一个SYN包（syn&#x3D;k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>  第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack&#x3D;k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p><p><a href="https://img-blog.csdnimg.cn/a131044be05743418c6bb648b65021f6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/a131044be05743418c6bb648b65021f6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>UDP：发短信<br>  1.不连接，不稳定<br>  2.客户端、服务端：没有明确的界限<br>  3.不管有没有准备好，都可以发给你…<br>  4.导弹<br>  5.DDOS：洪水攻击！（饱和攻击）</p><hr><p>客户端<br>  1.建立连接<br>  2.发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TcpClientDemo1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 客户端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/1 22:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClientDemo1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//要知道服务器地址</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InetAddress</span> <span class="hljs-variable">serverIp</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;localhost&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999</span>;<br>            <span class="hljs-comment">//2.创建连接</span><br>            socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(serverIp,port);<br>            <span class="hljs-comment">//3.发生消息 IO流</span><br>            os = socket.getOutputStream();<br>            os.write(<span class="hljs-string">&quot;你好，闲言&quot;</span>.getBytes());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (os != <span class="hljs-literal">null</span>) &#123;<br>                os.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (socket != <span class="hljs-literal">null</span>) &#123;<br>                socket.close();<br>            &#125;<br><br>        &#125;<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>服务器<br>  1.建立服务连接的端口 ServerSocket<br>  2.等待用户的连接 accept<br>  3.接收用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TcpServerDemo01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 服务器端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/1 22:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpServerDemo01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 我得有一个地址</span><br>            serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>            <span class="hljs-comment">//2.等待客户端连接过来</span><br>            accept = serverSocket.accept();<br>            <span class="hljs-comment">//3.读取客户端消息</span><br>            is = accept.getInputStream();<br><br>        <span class="hljs-comment">/*byte[] buf = new byte[1024];</span><br><span class="hljs-comment">        int len;</span><br><span class="hljs-comment">        while ((len = is.read(buf)) != -1 )&#123;</span><br><span class="hljs-comment">            String s = new String(buf, 0, len);</span><br><span class="hljs-comment">            System.out.println(s);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>            <span class="hljs-comment">//管道流</span><br>            baos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">while</span> ((len = is.read(buff)) != -<span class="hljs-number">1</span>) &#123;<br>                baos.write(buff, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(baos.toString());<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (baos != <span class="hljs-literal">null</span>) &#123;<br>                baos.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>                is.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (accept != <span class="hljs-literal">null</span>) &#123;<br>                accept.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (serverSocket != <span class="hljs-literal">null</span>) &#123;<br>                serverSocket.close();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><p>TCP实现文件上传<br>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TcpServerDemo2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 服务端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/1 23:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpServerDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.创建服务</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">//2.监听客户端连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        <span class="hljs-comment">//3.获取输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> accept.getInputStream();<br><br>        <span class="hljs-comment">//4.文件输出</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;receive.jpg&quot;</span>));<span class="hljs-comment">//接收文件就要用文件的管道流</span><br>        <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = is.read(buff)) != -<span class="hljs-number">1</span>)&#123;<br>            fos.write(buff,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br><br>        <span class="hljs-comment">//通过客户端我接收完毕了</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> accept.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;我接收完毕了，你可以断开了&quot;</span>.getBytes());<br><br>        fos.close();<br>        is.close();<br>        accept.close();<br>        serverSocket.close();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson02;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> TcpClientDemo2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 客户端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/1 23:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TcpClientDemo2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.建立连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">//2.创建一个输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//3.读取文件</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;1.jpg&quot;</span>));<br>        <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-comment">//4.写出文件</span><br>        <span class="hljs-keyword">while</span> ((len = is.read(buff)) != -<span class="hljs-number">1</span>) &#123;<br>            os.write(buff, <span class="hljs-number">0</span>, len);<br>        &#125;<br><br>        <span class="hljs-comment">//通知服务器，我已经结束了</span><br>        socket.shutdownOutput();<span class="hljs-comment">//我已经传输完了的意思</span><br><br>        <span class="hljs-comment">//确定服务器接收完毕，才能够断开连接</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<span class="hljs-comment">//接收字符、就用字节的管道流</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">byte</span>[] buff2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len2;<br>        <span class="hljs-keyword">while</span> ((len2 = inputStream.read(buff)) != -<span class="hljs-number">1</span>) &#123;<br>            bos.write(buff2, <span class="hljs-number">0</span>, len2);<br>        &#125;<br>        System.out.println(bos.toString());<br><br><br>        <span class="hljs-comment">//5.释放资源</span><br>        bos.close();<br>        inputStream.close();<br>        is.close();<br>        os.close();<br>        socket.close();<br><br>    &#125;<br><br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><p>UDP<br>发短信，需要IP地址</p><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson3;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> UdpClientDemo1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 不需要连接服务器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/1 23:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-comment">//1.建立一个Socket</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br>        <span class="hljs-comment">//2.建个包</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好啊，服务器&quot;</span>;<br>        <span class="hljs-comment">//3.发送给谁</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">9090</span>;<br><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(msg.getBytes(), <span class="hljs-number">0</span>, msg.getBytes().length, address, port);<br>        <span class="hljs-comment">//4.发送包</span><br>        socket.send(packet);<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>接收端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.lesson3;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> UdpServerDemo1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/1 23:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpServerDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//开放端口</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9090</span>);<br>        <span class="hljs-comment">//接收数据包</span><br>        <span class="hljs-type">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buff, <span class="hljs-number">0</span>, buff.length);<br><br>        socket.receive(packet);<span class="hljs-comment">//阻塞接收</span><br><br>        System.out.println(packet.getAddress());<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(),<span class="hljs-number">0</span>,packet.getData().length));<br><br>        socket.close();<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>UDP 实现聊天实现</p><p>发送方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.chat;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> UdpSenderDemo01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 接收端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/2 0:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpSenderDemo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取连接</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8080</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//准备数据</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> reader.readLine();<br>            <span class="hljs-type">byte</span>[] datas = data.getBytes();<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span><br>                    (datas, <span class="hljs-number">0</span>,datas.length, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6666</span>));<br>            <span class="hljs-comment">//发送数据</span><br>            socket.send(packet);<br>            <span class="hljs-keyword">if</span> (data.equals(<span class="hljs-string">&quot;bye&quot;</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        socket.close();<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>接收方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.chat;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> UdpSendReceviDemo01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 接收端</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/8/2 0:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpReceiveDemo01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//准备接收包裹</span><br>            <span class="hljs-type">byte</span>[] container = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(container, <span class="hljs-number">0</span>, container.length);<br>            socket.receive(packet);<span class="hljs-comment">//阻塞式接收包裹</span><br><br><br>            <span class="hljs-type">byte</span>[] data = packet.getData();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">receiveData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, data.length);<br><br>            System.out.println(receiveData);<br><br>            <span class="hljs-comment">//断开连接 bye</span><br>            <span class="hljs-keyword">if</span> (receiveData.equals(<span class="hljs-string">&quot;bye&quot;</span>))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注解和反射</title>
    <link href="/2022/11/27/Java/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/11/27/Java/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-什么是注解？"><a href="#1-什么是注解？" class="headerlink" title="1.什么是注解？"></a>1.什么是注解？</h2><p>  1.Annotation 是从JDK 5.0开始引入的新技术</p><p>  2.Annotation的作用：<br>    不是程序本身，可以对程序作出解释（这一点和注释（comment）没什么区别）<br>    可以被其他程序（比如：编译器等）读取</p><p>  3.Annotation 的格式<br>注解是以“@注释名”在代码中存储在的，还可以添加一些参数值，例<br>如果：@SuppressWarnings（value&#x3D;“unchecked”）.</p><p>  4.Annotation 在哪里使用？<br>    可以附加在package 、class、method、field 等上面，相当于给他们添加了额外的辅助信息</p><p>    我们可以通过<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%B0%84&spm=1001.2101.3001.7020">反射</a>机制实现对这些元数据的访问</p><p>  注解和注释还是有很多相似的，比如他们都有个“注”，注释是给人看的，注解也是给人看的，但是它多了个“解”字。这个“解”是给程序来解释，这是一个区别 。<br>  java.Annotation</p><hr><h2 id="2-内置注解"><a href="#2-内置注解" class="headerlink" title="2.内置注解"></a>2.内置注解</h2><p>1.@Override：<br>  定义在java.lang.Override 中，此注解只使用于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明。<br><a href="https://img-blog.csdnimg.cn/8cb7e0e60d574b3fa027df7a439787c0.png#pic_center"><img src="https://img-blog.csdnimg.cn/8cb7e0e60d574b3fa027df7a439787c0.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>2.@Deprecated：<br>  定义在java.lang.Deprecated中，此注解，可以用于修辞方法、属性、类、表示不鼓励程序员使用这样的元素，同时是因为它很危险或者存在更好的选择。（一般来说表示废弃了的方法、或者类等等）</p><p><a href="https://img-blog.csdnimg.cn/72903c39ac0a44d79fad19c41efca69d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/72903c39ac0a44d79fad19c41efca69d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>3.@SuppressWarnings：<br>  定义在java.lang.SuppressWarings 中，用来抑制编译时的警告信息，<br>与前两个注解有所不同，需要添加一个参数才能正确使用，这些参数都是已经定义好了的<br>@SuppressWarnings（“all”）<br>@SuppressWarnings（“unchecked”）<br>@SuppressWarnings（value&#x3D;{“unchecked”，“deprecation”}）<br>等等</p><p>用于镇压警告<br><a href="https://img-blog.csdnimg.cn/d2723567cde848b58e7ae9a7f5000289.png#pic_center"><img src="https://img-blog.csdnimg.cn/d2723567cde848b58e7ae9a7f5000289.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/e69e63e968d34dbba6168f1cd9b24193.png#pic_center"><img src="https://img-blog.csdnimg.cn/e69e63e968d34dbba6168f1cd9b24193.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="3-元注解"><a href="#3-元注解" class="headerlink" title="3.元注解"></a>3.<a href="https://so.csdn.net/so/search?q=%E5%85%83%E6%B3%A8%E8%A7%A3&spm=1001.2101.3001.7020">元注解</a></h2><p>  元注解的作用就是负责注解其他注解，Java定义了四个标准的meta-annotation类型，它们被用来提供对其他annotation 类型做说明。</p><p>  这些类型和它们锁支持的类在java.langannotation 包中可以找到（@Target，@Retention，@Documented，@Inherited）</p><p>  1.@Target：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p><p>  2.@Retention：表示需要在什么级别保存该注解信息，用于描述注解的生命周期<br>（SOURCE（源代码） 《 CLASS（字节码） 《 RUNTIEM（运行时））</p><p>  3.@Document：说明该注解将被包含在javadoc中</p><p>  4.@Inherited：说明子类可以继承父类中的该注解</p><hr><h2 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h2><p>  使用@interface 自定义注解是，自动继承了 java.lang.annotation.Annotation接口</p><p>分析：<br>  1.@Interited 用来声明一个注解，格式：public @ interface 注解名{ 定义内容 }<br>  2.其中的每一个方法实际上是声明了一个配置参数<br>  3.方法的名称就是参数的名称<br>  4.返回值类型就是参数的类型（返回值只能是基本类型，Class，String，enum）。<br>  5.可以通过default 来声明参数的默认值<br>  6.如果只有一个参数成员，一般参数名为value<br>  7.注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值</p><p><strong>案例1：有多个值，多个不同的类型，有默认值</strong><br><a href="https://img-blog.csdnimg.cn/23a6c1df9349432c8a76d51ccc8afea1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/23a6c1df9349432c8a76d51ccc8afea1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>案例2：只有一个值</strong><br>如果注解只有一个值，可以使用value命名，可以在调用的使用省略value</p><p><a href="https://img-blog.csdnimg.cn/9bdc05e6622f4100be15c5dc88e99fa9.png#pic_center"><img src="https://img-blog.csdnimg.cn/9bdc05e6622f4100be15c5dc88e99fa9.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/3f099ecdf2274b6a927cd6706269cee6.png#pic_center"><img src="https://img-blog.csdnimg.cn/3f099ecdf2274b6a927cd6706269cee6.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>如果只有一个值，但其名称不是value，则不能省略</strong><br><a href="https://img-blog.csdnimg.cn/2fc95524cbcc40739b93c53986a15b2b.png#pic_center"><img src="https://img-blog.csdnimg.cn/2fc95524cbcc40739b93c53986a15b2b.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/49c7c9d889ff449d87e80bdb2d3fac29.png#pic_center"><img src="https://img-blog.csdnimg.cn/49c7c9d889ff449d87e80bdb2d3fac29.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="5-Java反射概述"><a href="#5-Java反射概述" class="headerlink" title="5.Java反射概述"></a>5.Java反射概述</h2><p>动态 VS 静态语言</p><p><strong>动态语言</strong><br>  是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。<br>主要动态语言:Object-C、C#、JavaScript、PHP、Python等。</p><p><strong>静态语言</strong><br>  与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。</p><p>  Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活!</p><p>Java Reflection<br>  Reflection(反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。（写出来的代码编译成.class之后就不能变了）</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Class</span> c = <span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>)<br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  加载完类之后，在堆<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>的方法区中就产生了一个Class类型的对象（一个类只有<br>一个Class对象)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为:反射</p><p><a href="https://img-blog.csdnimg.cn/26b08fe590e14df79f48e2f7ce7ebb7a.png#pic_center"><img src="https://img-blog.csdnimg.cn/26b08fe590e14df79f48e2f7ce7ebb7a.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>Java 反射机制提供的功能</strong></p><p>  1.在运行时判断任意一个对象所属的类<br>  2.在运行时构造任意一个类的对象<br>  3.在运行时判断任意一个类所具有的成员变量和方法<br>  4.在运行时获取泛型信息<br>  5.在运行时调用任意一个对象的成员变量和方法<br>  6.在运行时处理注解<br>  7.生成动态代理</p><p><strong>反射优缺点</strong></p><p>优点:<br>  可以实现动态创建对象和编译，体现出很大的灵活性</p><p>缺点:<br>  对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</p><p><strong>反射相关主要API</strong></p><p>  java.lang.Class :代表一个类</p><p>  java.lang.reflect.Method:代表类的方法</p><p>  java.lang.reflect.Field:代表类的成员变量</p><p>  java.lang.reflect.Constructor:代表类的构造器</p><h2 id="6-Class-类"><a href="#6-Class-类" class="headerlink" title="6.Class 类"></a>6.Class 类</h2><p>  在Object类中定义了以下的方法，此方法将被所有子类继承</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">Class</span>&lt;?&gt; getClass();<br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即:可以通过对象反射求出类的名称。</p><p><a href="https://img-blog.csdnimg.cn/67fdd57e312546edbb1a15f19fc48ebb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/67fdd57e312546edbb1a15f19fc48ebb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  对象照镜子后可以得到的信息:某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构(class&#x2F;interface&#x2F;enum&#x2F;annotation&#x2F;primitive type&#x2F;void&#x2F;门)的有关信息。</p><p>  1.Class本身也是一个类<br>  2.Class对象只能由系统建立对象<br>  3.一个加载的类在JVM中只会有一个Class实例<br>  4.一个Class对象对应的是一个加载到JVM中的一个.class文件<br>  5.每个类的实例都会记得自己是由哪个Class 实例所生成<br>  6.通过Class可以完整地得到一个类中的所有被加载的结构<br>  7.Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</p><p><strong>Class 类的常用方法</strong></p><p><a href="https://img-blog.csdnimg.cn/3e9117d522644b6881b670badaeed5af.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/3e9117d522644b6881b670badaeed5af.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>获取Class类的实例</strong></p><p>  1.若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Class clazz<span class="hljs-operator">=</span> Person.class<span class="hljs-comment">;</span><br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  2.已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Class clazz <span class="hljs-operator">=</span> person.getClass()<span class="hljs-comment">;</span><br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  3.已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Class clazz<span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;demo01.Student&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.reflection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> Test03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 测试Class类的创建方式有哪些</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/7/31 17:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test03</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(<span class="hljs-string">&quot;这个人是：&quot;</span>+person.name);<br><br>        <span class="hljs-comment">//方式1：通过对象获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> person.getClass();<br>        System.out.println(c1.hashCode());<br><br>        <span class="hljs-comment">//方式2. forname 获取</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;cn.bloghut.reflection.Student&quot;</span>);<br>        System.out.println(c2.hashCode());<br><br>        <span class="hljs-comment">//方式3. 通过类名.class 获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> Student.class;<br>        System.out.println(c3.hashCode());<br><br>        <span class="hljs-comment">//方式4：基本内置类型的包装类都有一个Type 属性</span><br>        Class&lt;Integer&gt; c4 = Integer.TYPE;<br>        System.out.println(c4);<br><br>        <span class="hljs-comment">///获得父类类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">superclass</span> <span class="hljs-operator">=</span> c1.getSuperclass();<br>        System.out.println(superclass);<br><br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="7-哪些类型可以有Class-对象？"><a href="#7-哪些类型可以有Class-对象？" class="headerlink" title="7.哪些类型可以有Class 对象？"></a>7.哪些类型可以有Class 对象？</h2><p>  1.class:外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类。<br>  2.interface:接口<br>  3.[] ：数组<br>  4.enum:枚举<br>  5.annotation:注解 @interface<br>  6.primitive type ：基本数据类型<br>  7.void</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package cn.bloghut.reflection;<br><br>import java.lang.annotation.ElementType;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author by 闲言</span><br><span class="hljs-comment"> * @classname Test04</span><br><span class="hljs-comment"> * @description 测试所有类型的Class</span><br><span class="hljs-comment"> * @date 2021/7/31 17:30</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> Test04 &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-comment">//类</span><br>        Class c1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span><span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//接口</span><br>        Class c2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Comparable</span>.</span></span><span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//一维数组</span><br>        Class c3 = String<span class="hljs-literal">[]</span>.<span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//二维数组</span><br>        Class c4 = <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span><span class="hljs-literal">[]</span>.<span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//注解</span><br>        Class c5 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Override</span>.</span></span><span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//枚举</span><br>        Class c6 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ElementType</span>.</span></span><span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//基本类型</span><br>        Class c7 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//void</span><br>        Class c8 = void.<span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">// Class</span><br>        Class c9 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">class</span>;<br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c1);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c2);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c3);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c4);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c5);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c6);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c7);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c8);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c9);<br><br>        <span class="hljs-comment">//只要元素类型与维度一样，就是同Class</span><br>        <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span>  a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-number">10</span>]</span>;<br>        <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span>  b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-number">100</span>]</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(a.get<span class="hljs-constructor">Class()</span>.hash<span class="hljs-constructor">Code()</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(b.get<span class="hljs-constructor">Class()</span>.hash<span class="hljs-constructor">Code()</span>);<br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="8-类加载与内存分析"><a href="#8-类加载与内存分析" class="headerlink" title="8.类加载与内存分析"></a>8.<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%8A%A0%E8%BD%BD&spm=1001.2101.3001.7020">类加载</a>与内存分析</h2><p>  当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p><p><a href="https://img-blog.csdnimg.cn/50e4629e58e84ef188d88e623bc0f13d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/50e4629e58e84ef188d88e623bc0f13d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>加载:</strong><br>  将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构,然后生成一个代表这个类的java.lang.Class对象.（获取，不能主动创建）</p><p><strong>链接:</strong><br>  将Java类的二进制代码合并到JVM的运行状态之中的过程。<br>  1.验证: 确保加载的类信息符合JVM规范，没有安全方面的问题<br>  2.准备: 正式为类变量(static)分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。<br>  3.解析: 虚拟机常量池内的符号引用（常量名）替换为直接引用(地址)的过程。</p><p><strong>初始化:</strong><br>  1.执行类构造器()方法的过程。类构造器()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。(类构造器是构造类信息的，不是构造该类对象的构造器)。<br>  2.当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。<br>  3.虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。</p><h2 id="9-什么时候会发生类的初始化"><a href="#9-什么时候会发生类的初始化" class="headerlink" title="9.什么时候会发生类的初始化"></a>9.什么时候会发生类的初始化</h2><p><strong>类的主动引用(一定会发生类的初始化)</strong><br>  1.当虚拟机启动，先初始化main方法所在的类<br>  2.new一个类的对象<br>  3.调用类的静态成员(除了final常量)和静态方法<br>  4.使用java.lang.reflect包的方法对类进行反射调用<br>  5.当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</p><p><strong>类的被动引用(不会发生类的初始化)</strong><br>  1.当访问一个静态域时，只有真正声明这个域的类才会被初始化。如:当通过子类引用父类的静态变量，不会导致子类初始化<br>  2.通过数组定义类引用，不会触发此类的初始化<br>  3.引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了)</p><p>代码测试</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> cn.bloghut.reflection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> Test06</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 测试类什么时候会初始化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/7/31 18:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test06</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main 类被加载&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//1.主动引用</span><br>        <span class="hljs-comment">//Son son = new Son();</span><br><br>        <span class="hljs-comment">//2.反射也会产生主动引用</span><br>        <span class="hljs-comment">//Class.forName(&quot;cn.bloghut.reflection.Son&quot;);</span><br><br>        <span class="hljs-comment">//不会产生类的引用方法</span><br>        <span class="hljs-comment">//System.out.println(Son.b);</span><br><br>        System.out.println(Son.M);<br><br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类被加载&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类被加载&quot;</span>);<br>        m = <span class="hljs-number">300</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><h2 id="10-类加载器的作用"><a href="#10-类加载器的作用" class="headerlink" title="10.类加载器的作用"></a>10.类加载器的作用</h2><p><strong>类加载的作用</strong>:<br>  将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p><p><strong>类缓存</strong>:<br>  标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象</p><p><a href="https://img-blog.csdnimg.cn/acbac8e4e7ad487ca348622607e15fe3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/acbac8e4e7ad487ca348622607e15fe3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  类加载器作用是用来把类（class）装载进内存的。JVM 规范定义了如下类型的类加载器。</p><p><a href="https://img-blog.csdnimg.cn/f2a99e3ad1cf43518c31db2d0189f458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/f2a99e3ad1cf43518c31db2d0189f458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>引导类加载器</strong>:<br>  用C++编写的，是JVM自带的类加载器，负责Java平台核心库，用来装载核心类库。该加载器无法直接获取。</p><p><strong>扩展类加载器</strong>:<br>  负责jre&#x2F;lib&#x2F;ext目录下的jar包或-java.ext.dirs指定目录下的jar包装入工作库。</p><p><strong>系统类加载器</strong>:<br>  负责java -classpath或-Djava.class.path所指的目录下的类与jar包装入工作，是最常用的加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.reflection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> Test07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/7/31 18:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//获取系统的类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">systemClassLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<span class="hljs-comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><br>        <span class="hljs-comment">//获取系统类加载器的父类加载器-&gt;扩展类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> systemClassLoader.getParent();<br>        System.out.println(parent);<span class="hljs-comment">//sun.misc.Launcher$ExtClassLoader@1540e19d</span><br><br>        <span class="hljs-comment">//获取扩展类加载器的父类加载器-&gt;根加载器（C++）</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent1</span> <span class="hljs-operator">=</span> parent.getParent();<br>        System.out.println(parent1);<span class="hljs-comment">//null</span><br><br>        <span class="hljs-comment">//测试当前类是哪个加载器加载的</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;cn.bloghut.reflection.Test07&quot;</span>).getClassLoader();<br>        System.out.println(c1);<span class="hljs-comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><br>        <span class="hljs-comment">//测试JDK内部哪个加载器加载的</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(c2);<span class="hljs-comment">//null</span><br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>创建运行时类的对象</strong></p><p>通过反射获取运行时类的完整结构<br>  Field、Method、Constructor、Superclass、Interface、Annotation</p><p>  1.实现的全部接口<br>  2.所继承的父类<br>  3.全部的构造器<br>  4.全部的方法<br>  5.全部的Field<br>  6.注解</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package cn.bloghut.reflection;<br><br>import java.lang.reflect.Constructor;<br>import java.lang.reflect.Field;<br>import java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author by 闲言</span><br><span class="hljs-comment"> * @classname Test08</span><br><span class="hljs-comment"> * @description TODO</span><br><span class="hljs-comment"> * @date 2021/7/31 19:00</span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">class</span> Test08 &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;<br><br>        Class&lt;?&gt; c1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;cn.bloghut.reflection.User&quot;</span>)</span>;<br><br>        <span class="hljs-comment">//获得类的名称</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c1.get<span class="hljs-constructor">Name()</span>);<span class="hljs-comment">//获得包名+类名</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(c1.get<span class="hljs-constructor">SimpleName()</span>);<span class="hljs-comment">//类名</span><br><br>        <span class="hljs-comment">//获得类的属性</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br>        Field<span class="hljs-literal">[]</span> fields = c1.get<span class="hljs-constructor">Fields()</span>;<span class="hljs-comment">//只能找到public 修饰的属性</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(field);<br>        &#125;<br>        fields = c1.get<span class="hljs-constructor">DeclaredFields()</span>;<span class="hljs-comment">//找到private 修饰的属性</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(field);<br>        &#125;<br><br>        <span class="hljs-comment">//获取指定属性的值</span><br>        <span class="hljs-comment">//Field name = c1.getField(&quot;name&quot;);报错</span><br>        Field name = c1.get<span class="hljs-constructor">DeclaredField(<span class="hljs-string">&quot;name&quot;</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(name);<br><br>        <span class="hljs-comment">//获得类的方法</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br>        Method<span class="hljs-literal">[]</span> methods = c1.get<span class="hljs-constructor">Methods()</span>;<span class="hljs-comment">//获取本类及父类的全部public 方法</span><br>        <span class="hljs-keyword">for</span> (Method <span class="hljs-keyword">method</span> : methods) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getMethods（）：&quot;</span>+<span class="hljs-keyword">method</span>);<br>        &#125;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br>        methods = c1.get<span class="hljs-constructor">DeclaredMethods()</span>;<span class="hljs-comment">//获取本类的所有方法</span><br>        <span class="hljs-keyword">for</span> (Method <span class="hljs-keyword">method</span> : methods) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getDeclaredMethods（）：&quot;</span>+<span class="hljs-keyword">method</span>);<br>        &#125;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br>        <span class="hljs-comment">//获取指定方法</span><br>        Method getName = c1.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;getName&quot;</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(getName);<br><br>        Method setName = c1.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;setName&quot;</span>, String.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(setName);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br>        <span class="hljs-comment">//获取指定的构造器</span><br>        Constructor&lt;?&gt;<span class="hljs-literal">[]</span> constructors = c1.get<span class="hljs-constructor">Constructors()</span>;<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getConstructors&quot;</span>+constructor);<br>        &#125;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;============================&quot;</span>);<br>        constructors = c1.get<span class="hljs-constructor">DeclaredConstructors()</span>;<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getDeclaredConstructors（）：&quot;</span>+constructor);<br>        &#125;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;======================&quot;</span>);<br><br>        <span class="hljs-comment">//获取指定构造器</span><br>        Constructor&lt;?&gt; declaredConstructor = c1.get<span class="hljs-constructor">DeclaredConstructor(String.<span class="hljs-params">class</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>, <span class="hljs-params">int</span>.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;指定&quot;</span>+declaredConstructor);<br><br><br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>小结：<br>  如何获取属性，方法，构造器名称</p><p><strong>有了Class对象，能做什么呢？</strong><br>  1.创建类的对象:调用Class对象的newlnstance()方法<br>  2.类必须有一个无参数的构造器。<br>  3.类的构造器的访问权限需要足够</p><p>思考?难道没有无参的构造器就不能创建对象了吗?只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。</p><p><strong>步骤如下</strong>:<br>  1.通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器<br>  2.向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数<br>  3.通过Constructor实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> Test09</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 动态创建对象，通过反射</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/7/31 20:18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//获得Class对象</span><br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;cn.bloghut.reflection.User&quot;</span>);<br>        <span class="hljs-comment">//构造一个对象</span><br>        <span class="hljs-comment">//User user = (User)c1.newInstance();//本质上是调用了类的无参构造器</span><br>       <span class="hljs-comment">// System.out.println(user);</span><br><br>       <span class="hljs-comment">// Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(String.class, int.class, int.class);</span><br><br>        <span class="hljs-comment">//User user2 = (User)constructor.newInstance(&quot;闲言&quot;, 1, 18);</span><br>        <span class="hljs-comment">//System.out.println(user2);</span><br><br>        <span class="hljs-comment">//通过反射调用普通方法</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)c1.newInstance();<br>        <span class="hljs-comment">//通过反射获取方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">setName</span> <span class="hljs-operator">=</span> c1.getDeclaredMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>        <span class="hljs-comment">//invoke ： 激活的意思</span><br>        setName.invoke(user,<span class="hljs-string">&quot;闲言&quot;</span>);<br>        System.out.println(user.getName());<br><br>        <span class="hljs-comment">//通过反射操作属性</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> (User)c1.newInstance();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">//关掉检查</span><br>        <span class="hljs-comment">//反射不同直接操作私有属性，需要关闭安全简则，属性或方法的setAccessible</span><br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(c4,<span class="hljs-string">&quot;反射设置属性&quot;</span>);<br>        System.out.println(c4);<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738394041424344</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="11-调用指定方法"><a href="#11-调用指定方法" class="headerlink" title="11.调用指定方法"></a>11.调用指定方法</h2><p>通过反射，调用类中的方法，通过Method类完成。<br>  ①通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象， 并设置此方法操作时所需要的参数类型。</p><p>  ②之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。<br><a href="https://img-blog.csdnimg.cn/5ea149830d2c46d885e76d45c96cdc2c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/5ea149830d2c46d885e76d45c96cdc2c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>Object invoke(Object obj,Object … args)</p><p>  1.Objectb对应原方法的返回值，若原方法无返回值，此时返回null<br>  2.若原方法若为静态方法，此时形参Object obj可为null<br>  3.若原方法形参列表为空，则Object[] args为null<br>  4.若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。</p><p><strong>setAccessible(true)</strong><br>  1.Method和Field、Constructor对象都有setAccessible()方法<br>  2.setAccessible作用是启动和禁用访问安全检查的开关。<br>  3.参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。<br>    提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。<br>    使得原本无法访问的私有成员也可以访问<br>  4.参数值为false则指示反射的对象应该实施Java语言访问检查</p><p><strong>性能对比分析</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package cn.bloghut.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.<span class="hljs-keyword">Method</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author by 闲言</span><br><span class="hljs-comment"> * @classname Test10</span><br><span class="hljs-comment"> * @description 分析性能问题</span><br><span class="hljs-comment"> * @date 2021/7/31 22:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test10 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;<br>        test01();<br>        test02();<br>        test03();<br>    &#125;<br><br>    //普通方式调用<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> test01() &#123;<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>        long startTime = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            <span class="hljs-keyword">user</span>.getName();<br>        &#125;<br><br>        long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;普通方式调用10亿次：&quot; + (<span class="hljs-keyword">end</span> - startTime) + &quot;ms&quot;);<br>    &#125;<br><br>    //反射方式调用<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> test02() throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">Class</span>&lt;?&gt; c1 = <span class="hljs-keyword">Class</span>.forName(&quot;cn.bloghut.reflection.User&quot;);<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) c1.newInstance();<br><br>        <span class="hljs-keyword">Method</span> getName = c1.getDeclaredMethod(&quot;getName&quot;, <span class="hljs-keyword">null</span>);<br><br>        long startTime = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            getName.invoke(<span class="hljs-keyword">user</span>, <span class="hljs-keyword">null</span>);<br>        &#125;<br><br>        long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;反射方式调用10亿次：&quot; + (<span class="hljs-keyword">end</span> - startTime) + &quot;ms&quot;);<br>    &#125;<br><br>    //反射调用，关闭进程<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> test03() throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">Class</span>&lt;?&gt; c1 = <span class="hljs-keyword">Class</span>.forName(&quot;cn.bloghut.reflection.User&quot;);<br>        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) c1.newInstance();<br><br>        <span class="hljs-keyword">Method</span> getName = c1.getDeclaredMethod(&quot;getName&quot;, <span class="hljs-keyword">null</span>);<br>        getName.setAccessible(<span class="hljs-keyword">true</span>);<br>        long startTime = <span class="hljs-keyword">System</span>.currentTimeMillis();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            getName.invoke(<span class="hljs-keyword">user</span>, <span class="hljs-keyword">null</span>);<br>        &#125;<br><br>        long end = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;关闭检测方式调用10亿次：&quot; + (<span class="hljs-keyword">end</span> - startTime) + &quot;ms&quot;);<br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465</span><br><br>JAVA<br></code></pre></td></tr></table></figure><hr><h2 id="12-反射操作泛型"><a href="#12-反射操作泛型" class="headerlink" title="12.反射操作泛型"></a>12.反射操作泛型</h2><p>  Java采用泛型擦除的机制来引入泛型,Java中的泛型仅仅是给编译器javac使用的,确保数据的安全性和免去强制类型转换问题，但是，一旦编译完成﹐所有和泛型有关的类型型全部擦除</p><p>  为了通过反射操作这些类型,Java新增了ParameterizedType , GenericArrayType ,TypeVariable和 Wildcardlype 几种类型来代表不能被归一到Class 类中的类型，但是又和原始数据类型齐名的类型。<br>  1.ParameterizedType： 表示一种参数化类型，比如Collection<br>  2.GenericArrayType: 表示一种元素类型是参数化类型或者类型变量的数组类型<br>  3.TypeVariable: 是各种类型变量的公共父接口<br>  4.WildcardType: 代表一种通配符类型表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.reflection;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> Test11</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/7/31 22:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test11</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">(Map&lt;String, User&gt; map, List&lt;User&gt; list)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Map&lt;String, User&gt; <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        Class&lt;Test11&gt; c1 = Test11.class;<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">test01</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;test01&quot;</span>, Map.class, List.class);<br>        <span class="hljs-comment">//获取参数的泛型参数类型</span><br>        Type[] genericParameterTypes = test01.getGenericParameterTypes();<br>        <span class="hljs-keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;<br>            System.out.println(genericParameterType);<br>            <span class="hljs-comment">//判断这个泛型是不是参数化类型</span><br>            <span class="hljs-keyword">if</span> (genericParameterType <span class="hljs-keyword">instanceof</span> ParameterizedType)&#123;<br>                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();<br>                <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                    System.out.println(actualTypeArgument);<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===================================================================&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c1.getMethod(<span class="hljs-string">&quot;test02&quot;</span>);<br><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> method.getGenericReturnType();<br>        <span class="hljs-keyword">if</span> (type <span class="hljs-keyword">instanceof</span>  ParameterizedType)&#123;<br>            Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();<br>            <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                System.out.println(actualTypeArgument);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//控制台打印</span><br>java.util.Map&lt;java.lang.String, cn.bloghut.reflection.User&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.String<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cn</span>.bloghut.reflection.User<br>java.util.List&lt;cn.bloghut.reflection.User&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cn</span>.bloghut.reflection.User<br>===================================================================<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.String<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cn</span>.bloghut.reflection.User<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="13-获取注解信息"><a href="#13-获取注解信息" class="headerlink" title="13.获取注解信息"></a>13.获取注解信息</h2><p>  getAnnotation<br>  getAnnotations</p><p>练习：ORM<br>了解什么是ORM？<br>  Object relationship Mapping –》对象关系映射</p><p><a href="https://img-blog.csdnimg.cn/1ad62efa6acc4fb484bc6b46f0a33a0d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/1ad62efa6acc4fb484bc6b46f0a33a0d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMDI1Nzk4,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  1.类和表结构对应<br>  2.属性和字段对应<br>  3.对象和记录对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.bloghut.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.获取Class类对象</span><br>        Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;cn.bloghut.annotation.Student&quot;</span>);<br><br>        <span class="hljs-comment">//2.通过反射获取注解</span><br>        Annotation[] annotations = c.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation);<br>        &#125;<br><br>        <span class="hljs-comment">//获取注解的value值</span><br>        <span class="hljs-type">TableXy</span> <span class="hljs-variable">tableXy</span> <span class="hljs-operator">=</span> c.getAnnotation(TableXy.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> tableXy.value();<br>        System.out.println(value);<br><br>        <span class="hljs-comment">//获取类指定的注解</span><br>        <span class="hljs-comment">//暴力反射</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">FieldXy</span> <span class="hljs-variable">fieldXy</span> <span class="hljs-operator">=</span> field.getAnnotation(FieldXy.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> fieldXy.columnName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> fieldXy.type();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> fieldXy.length();<br>        System.out.println(<span class="hljs-string">&quot;columnName：&quot;</span>+columnName+<span class="hljs-string">&quot;   type：&quot;</span>+type+<span class="hljs-string">&quot;   length：&quot;</span>+length);<br><br>    &#125;<br>&#125;<br><span class="hljs-meta">@TableXy(&quot;db_student&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-meta">@FieldXy(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 18)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@FieldXy(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@FieldXy(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 3)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//类名的注解</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> TableXy&#123;<br><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br><br>&#125;<br><span class="hljs-comment">//属性的注解</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> FieldXy&#123;<br>    String <span class="hljs-title function_">columnName</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">type</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@cn.bloghut.annotation.<span class="hljs-constructor">TableXy(<span class="hljs-params">value</span>=<span class="hljs-params">db_student</span>)</span><br>db_student<br>columnName：db_name   <span class="hljs-keyword">type</span>：varchar   length：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2022/11/27/Java/JavaWeb/"/>
    <url>/2022/11/27/Java/JavaWeb/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-web基本概念"><a href="#1-web基本概念" class="headerlink" title="1.web基本概念"></a>1.web基本概念</h2><p>Java Web</p><h3 id="1-1、基本概念"><a href="#1-1、基本概念" class="headerlink" title="1.1、基本概念"></a>1.1、基本概念</h3><p>web 开发：</p><ul><li>web ，网页的意思，<a href="http://www.baidu.com/">www.baidu.com</a></li><li>静态web<ul><li>html，css，</li><li>提供给所有人看的数据始终不会发生变化！</li></ul></li><li>动态web<ul><li>提供给所有人看的数据会发生变化，每个人在不同的时间、不同的地点、看到的信息各不相同。</li><li>淘宝，几乎所有的网站</li><li>技术栈：Servlet&#x2F;Jsp、Asp、Php</li></ul></li></ul><p>在java 中，动态web资源开发的技术通常为JavaWeb；</p><hr><h3 id="1-2、Web应用程序"><a href="#1-2、Web应用程序" class="headerlink" title="1.2、Web应用程序"></a>1.2、Web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p><ol><li>a.html、b.html …多个web资源，这些web资源可以被外界访问，对外界提供服务；</li><li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上</li><li>URL</li><li>这个同一的web资源会被放在同一文件夹下，web应用程序—-》Tomcat 服务器</li><li>一个web应用由多部分组成（静态web，动态web）<ul><li>html，css，js</li><li>Jsp，Servlet</li><li>Java程序</li><li>jar包</li><li>配置文件（Properties）</li></ul></li></ol><p>  web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p><hr><h3 id="1-3、静态Web"><a href="#1-3、静态Web" class="headerlink" title="1.3、静态Web"></a>1.3、静态Web</h3><p>  *.htm, *.html 这些都是网页的后缀，如果服务器上一直存在这些东西，<br><a href="https://img-blog.csdnimg.cn/4e76ee408860437dab1717fda4aee670.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/4e76ee408860437dab1717fda4aee670.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>静态web存在的缺点</strong></p><ul><li>Web 页面 无法动态更新，所有用户看到的是同一页面<ul><li>轮播图，点击特性：伪动态</li><li>JavaScript</li><li>VBScript</li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><hr><h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>  页面会动态展示：“Web 的页面展示效果因人而异”；</p><p><a href="https://img-blog.csdnimg.cn/f3620c30b9fe453f9400fffec0598e74.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/f3620c30b9fe453f9400fffec0598e74.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>缺点：</strong></p><ul><li>假如服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序<ul><li>停机维护</li></ul></li></ul><p><strong>优点：</strong></p><ol><li>Web 页面 可以动态更新，所有用户看到的都不是同一页面</li><li>它可以和数据库交互（数据持久化：注册、商品信息）<br><a href="https://img-blog.csdnimg.cn/f84a5579d1f2418cb60f99fd5472b385.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/f84a5579d1f2418cb60f99fd5472b385.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></li></ol><p>新手村：—-》魔鬼训练（分析原理，看源码） —-》PK场</p><hr><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>ASP：</strong></p><ol><li>微软：国内最流行的就是ASP；</li><li>在html中嵌入VB脚本，ASP+COM</li><li>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱。</li><li>维护成本考</li><li>C#</li><li>IIS</li></ol><p><strong>PHP：</strong></p><ol><li>PHP开发速度快，功能很强大，跨平台，代码很简单（70%）</li><li>无法承载大访问量的情况（有局限性）</li></ol><p><strong>JSP&#x2F;Servlet：</strong></p><ol><li>B&#x2F;S：浏览器和服务器</li><li>C&#x2F;S：客户端和服务器</li></ol><ul><li>sun公司主推的B&#x2F;S架构</li><li>基于java语言的（所有的大公司，或者一些开源的组件，都是用java写的）</li><li>可以承载三高问题带来的影响；</li></ul><hr><h2 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h2><p>  服务器是一种被动的操作，用户处理用户的一些请求和给用户一些响应信息；</p><p><strong>IIS</strong><br>  微软的<br>  用来跑ASP程序的，windows中自带的</p><p><strong>Tomcat</strong><br>  Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>  Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p><p><strong>下载：</strong></p><ol><li>安装 or 解压</li><li>了解配置文件和目录</li><li>这个东西的作用</li></ol><h2 id="1、安装Tomcat"><a href="#1、安装Tomcat" class="headerlink" title="1、安装Tomcat"></a>1、安装Tomcat</h2><p>tomcat官网：</p><blockquote><p><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p></blockquote><p><a href="https://img-blog.csdnimg.cn/ed275053ee184d0ebb961a71dfc1466c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/ed275053ee184d0ebb961a71dfc1466c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="2、tomcat启动和配置"><a href="#2、tomcat启动和配置" class="headerlink" title="2、tomcat启动和配置"></a>2、tomcat启动和配置</h2><p>文件夹作用<br><a href="https://img-blog.csdnimg.cn/0148726bf76744f78b22a87b29ade85a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/0148726bf76744f78b22a87b29ade85a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>启动</strong>、<strong>关闭t</strong>omcat<br><a href="https://img-blog.csdnimg.cn/2e9d3ef8b047417e92bfa1fd2d754309.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/2e9d3ef8b047417e92bfa1fd2d754309.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>访问测试</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/<br><span class="hljs-number">1</span><br><br>XML<br></code></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/93bb1f3a37934108b22adbe8102e6aa1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/93bb1f3a37934108b22adbe8102e6aa1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/cd54875599234a54b9c1d6bc906740b5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/cd54875599234a54b9c1d6bc906740b5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>可以配置启动的端口号</strong></p><ul><li>http： 80</li><li>https：443</li><li>mysql：3306</li><li>redis：6379</li><li>tomcat默认：8080</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;Connector port<span class="hljs-operator">=</span><span class="hljs-string">&quot;8080&quot;</span> protocol<span class="hljs-operator">=</span><span class="hljs-string">&quot;HTTP/1.1&quot;</span><br>           connectionTimeout<span class="hljs-operator">=</span><span class="hljs-string">&quot;20000&quot;</span><br>           redirectPort<span class="hljs-operator">=</span><span class="hljs-string">&quot;8443&quot;</span> /&gt;<br><span class="hljs-number">123</span><br><br>XML<br></code></pre></td></tr></table></figure><p>可以配置主机的名称</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Host <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attribute">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span><br>            <span class="hljs-attribute">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attribute">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>12<br><br>XML<br></code></pre></td></tr></table></figure><p>完整配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Server</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8005&quot;</span> <span class="hljs-attr">shutdown</span>=<span class="hljs-string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="hljs-attr">SSLEngine</span>=<span class="hljs-string">&quot;on&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Listener</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">GlobalNamingResources</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Resource</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;UserDatabase&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;Container&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.apache.catalina.UserDatabase&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;User database that can be updated and saved&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">factory</span>=<span class="hljs-string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">pathname</span>=<span class="hljs-string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">GlobalNamingResources</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Service</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Engine</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Catalina&quot;</span> <span class="hljs-attr">defaultHost</span>=<span class="hljs-string">&quot;localhost&quot;</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Realm</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Realm</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">resourceName</span>=<span class="hljs-string">&quot;UserDatabase&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Realm</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;logs&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;localhost_access_log&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.txt&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%h %l %u %t <span class="hljs-symbol">&amp;quot;</span>%r<span class="hljs-symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span><br><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Engine</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Service</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Server</span>&gt;</span><br>123456789101112131415161718192021222324252627282930313233343536373839404142<br><br>XML<br></code></pre></td></tr></table></figure><hr><h2 id="3、高难度面试题"><a href="#3、高难度面试题" class="headerlink" title="3、高难度面试题"></a>3、高难度面试题</h2><p>请你谈谈网站是如何访问的！</p><ol><li><p>输入一个域名；点击回车</p></li><li><p>客户端在发送请求之前，会</p><p>先去检查 本机的 hosts 文件</p><p>有没有这个域名的映射</p><ul><li>有： 直接返回对应的ip地址，在这个地址中，有我们需要访问的web程序，可以直接访问<br>127.0.0.1 <a href="http://www.bloghut.cn/">www.bloghut.cn</a></li><li>没有：去DNS 服务器 找到的话就返回， 找不到就返回找不到</li></ul></li></ol><p><a href="https://img-blog.csdnimg.cn/01d4eb59ebc4456cbd1a2b5ba8558a5d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/01d4eb59ebc4456cbd1a2b5ba8558a5d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="4、发布一个web网站"><a href="#4、发布一个web网站" class="headerlink" title="4、发布一个web网站"></a>4、发布一个web网站</h2><p>  将自己写的网站放到服务器（Tomcat） 中指定的web应用的文件夹（webapps）下，就可以访问了</p><p>  网站应该有的结构</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">--webapps ：Tomcat服务器的web目录</span><br><span class="hljs-attribute"> - ROOT</span><br><span class="hljs-attribute"> - bloghut</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">网站的目录名</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">WEB_INF</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">classes ： java程序</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">lib ： web 应用依赖的jar包</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">web.xml : 网站的配置文件</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">index.html 默认的首页</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">static </span><br>       -css<br>          <span class="hljs-bullet">-</span> <span class="hljs-string">style.css</span><br>       -js<br>       -img<br><br>XML<br></code></pre></td></tr></table></figure><h2 id="1-什么是Http"><a href="#1-什么是Http" class="headerlink" title="1 什么是Http"></a>1 什么是Http</h2><p>  超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的;请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串，~</li><li>超文本：图片，音乐，视频，定位，地图…</li><li>80</li></ul><p><strong>https：安全的</strong></p><ul><li>443</li></ul><hr><h2 id="2、两个时代"><a href="#2、两个时代" class="headerlink" title="2、两个时代"></a>2、两个时代</h2><p><strong>http 1.0</strong></p><ul><li>http&#x2F;1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li></ul><p><strong>http 2.0</strong></p><ul><li>http&#x2F;1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li></ul><hr><h2 id="3、Http请求"><a href="#3、Http请求" class="headerlink" title="3、Http请求"></a>3、Http请求</h2><p><strong>客户端—–发请求（Request）——-服务器</strong></p><p>百度：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ada">Request URL: https://www.baidu.com/     <span class="hljs-comment">--请求地址</span><br>Request Method: GET                     <span class="hljs-comment">--请求方式</span><br>Status Code: <span class="hljs-number">200</span> OK                     <span class="hljs-comment">--状态码</span><br>Remote Address: <span class="hljs-number">14.215</span>.<span class="hljs-number">177.38</span>:<span class="hljs-number">443</span>       <span class="hljs-comment">--远程地址</span><br><span class="hljs-number">1234</span><br><span class="hljs-keyword">Accept</span>: text/html                     <span class="hljs-comment">--</span><br><span class="hljs-keyword">Accept</span>-Encoding: gzip, deflate,       <span class="hljs-comment">--编码</span><br><span class="hljs-keyword">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span>       <span class="hljs-comment">--  </span><br>Connection: keep-alive                <span class="hljs-comment">--</span><br>Cookie: <br>Host: www.baidu.com<br><span class="hljs-number">123456</span><br><br>XML<br></code></pre></td></tr></table></figure><hr><h3 id="3-1-请求行"><a href="#3-1-请求行" class="headerlink" title="3.1.请求行"></a>3.1.请求行</h3><ul><li>请求行中的请求方式：GET</li><li>请求方式：GET、POST、HEAD、DELETE、PUT<ul><li>get ：一次请求能够携带的参数比较少，大小限制，会在浏览器的url 地址栏显示内容，不安全，但高效。</li><li>post：一次请求能够携带的参数没有限制，大小没有限制，不会在浏览器的url 地址栏显示内容，安全，但不高效。</li></ul></li></ul><hr><h3 id="3-2-请求头"><a href="#3-2-请求头" class="headerlink" title="3.2.请求头"></a>3.2.请求头</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Accept</span>               <span class="hljs-comment">--告诉浏览器它所支持的数据类型</span><br><span class="hljs-keyword">Accept</span>-Encoding      <span class="hljs-comment">--告诉浏览器支持哪种编码格式  GBK、UTF-8 、GB2312</span><br><span class="hljs-keyword">Accept</span>-Language      <span class="hljs-comment">--告诉浏览器，它的语言环境</span><br>Cache-Control        <span class="hljs-comment">--缓存控制</span><br>Connection           <span class="hljs-comment">--告诉浏览器，请求完成是断开还是保持连接</span><br>HOST：               <span class="hljs-comment">--主机</span><br><span class="hljs-number">123456</span><br><br>XML<br></code></pre></td></tr></table></figure><hr><h2 id="4、Http响应"><a href="#4、Http响应" class="headerlink" title="4、Http响应"></a>4、Http响应</h2><p><strong>服务器—–响应(response)—–客户端</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Cache</span>-Control: private                   --缓存控制<br><span class="hljs-attribute">Connection</span>: keep-alive                   --连接<br><span class="hljs-attribute">Content</span>-Encoding: gzip                   --编码 <br><span class="hljs-attribute">Content</span>-Type: text/html;charset=utf-<span class="hljs-number">8</span>    --类型<br><span class="hljs-attribute">Date</span>: Fri, <span class="hljs-number">03</span> Sep <span class="hljs-number">2021</span> <span class="hljs-number">15</span>:<span class="hljs-number">18</span>:<span class="hljs-number">56</span> GMT      --当前时间<br><span class="hljs-attribute">Expires</span>: Fri, <span class="hljs-number">03</span> Sep <span class="hljs-number">2021</span> <span class="hljs-number">15</span>:<span class="hljs-number">18</span>:<span class="hljs-number">23</span> GMT   --当前时间<br><span class="hljs-attribute">Set</span>-Cookie: BDSVRTM=<span class="hljs-number">0</span>; path=/            -- cookie 会话技术<br><span class="hljs-attribute">Set</span>-Cookie: BD_HOME=<span class="hljs-number">1</span>; path=/<br><span class="hljs-attribute">Set</span>-Cookie: H_PS_PSSID=<br><span class="hljs-attribute">123456789</span><br><br><span class="hljs-attribute">XML</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-1-响应体"><a href="#4-1-响应体" class="headerlink" title="4.1.响应体"></a>4.1.响应体</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Accept</span>               <span class="hljs-comment">--告诉浏览器它所支持的数据类型</span><br><span class="hljs-keyword">Accept</span>-Encoding      <span class="hljs-comment">--告诉浏览器支持哪种编码格式  GBK、UTF-8 、GB2312</span><br><span class="hljs-keyword">Accept</span>-Language      <span class="hljs-comment">--告诉浏览器，它的语言环境</span><br>Cache-Control        <span class="hljs-comment">--缓存控制</span><br>Connection           <span class="hljs-comment">--告诉浏览器，请求完成是断开还是保持连接</span><br>HOST：               <span class="hljs-comment">--主机  </span><br>Refresh：            <span class="hljs-comment">--告诉客户端，多久刷新一次</span><br>Location             <span class="hljs-comment">--让网页重新定位</span><br><span class="hljs-number">12345678</span><br><br>XML<br></code></pre></td></tr></table></figure><hr><h3 id="4-2-响应状态码"><a href="#4-2-响应状态码" class="headerlink" title="4.2.响应状态码"></a>4.2.响应状态码</h3><ul><li>200 请求响应成功</li><li>4xx 找不到资源 404<ul><li>资源不存在</li></ul></li><li>3** 请求重定向<ul><li>重定向：你重新到我给你的新位置去</li></ul></li><li>5xx 服务器代码错误 500<ul><li>502 网关错误</li></ul></li></ul><hr><h2 id="5、常见面试题"><a href="#5、常见面试题" class="headerlink" title="5、常见面试题"></a>5、常见面试题</h2><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，<strong>经历了什么？</strong></p><p>我为什么要学习这个？</p><ol><li>在JavaWeb开发中需要使用大量的jar包，我们手动导入；</li><li>如何能够让一个东西帮我导入和配置这些jar包<ul><li>由此maven诞生了</li></ul></li></ol><h2 id="1-Maven项目架构管理工具"><a href="#1-Maven项目架构管理工具" class="headerlink" title="1.Maven项目架构管理工具"></a>1.<a href="https://so.csdn.net/so/search?q=Maven&spm=1001.2101.3001.7020">Maven</a>项目架构管理工具</h2><p>  我们目前用来就是方便导入jar包的！<br>  maven的核心思想：约定大于配置<br>    有约束，不要去违反</p><p>maven 会规定好你该如何去编写我们的Java代码，必须按照这个规范来；</p><hr><h2 id="2-下载安装Mavne"><a href="#2-下载安装Mavne" class="headerlink" title="2.下载安装Mavne"></a>2.下载安装Mavne</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//maven.apache<span class="hljs-meta">.org</span>/<br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/2baee409a6fe481cb6f093d5f7ec9441.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/2baee409a6fe481cb6f093d5f7ec9441.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>下载完成后解压即可</p><p><strong>目录结构</strong></p><ol><li>bin 放一些可执行文件</li><li>boot 该目录只包含一个jar文件，plexus-classworlds-2.5.2.jar。maven就是用它来加载自己的类库的。</li><li>conf 该目录下最重要的是settings.xml 文件，它主要用于全局的定制maven的行为</li><li>lib 该目录包含了maven运行时的java类库</li></ol><p><a href="https://img-blog.csdnimg.cn/4b79bd1a9d5647f5bf319d76b86f5e76.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/4b79bd1a9d5647f5bf319d76b86f5e76.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置<a href="https://so.csdn.net/so/search?q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">环境变量</a></h2><p>在我们的系统环境变量中<br>配置如下信息：</p><ol><li>M2_HOME maven目录下的bin目录</li><li>MAVEN_HOME maven的目录</li><li>在系统的path 中配置 MAVEN_HOME<br><a href="https://img-blog.csdnimg.cn/22d137c70a12448aa0ffdadabc06d5d6.png#pic_center"><img src="https://img-blog.csdnimg.cn/22d137c70a12448aa0ffdadabc06d5d6.png#pic_center" alt="在这里插入图片描述"></a></li></ol><p><a href="https://img-blog.csdnimg.cn/87717e8d6303472f9377fbed0006f55a.png#pic_center"><img src="https://img-blog.csdnimg.cn/87717e8d6303472f9377fbed0006f55a.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>测试是否安装成功<br><a href="https://img-blog.csdnimg.cn/3d0d078679794d8596df83dd68ca6f41.png#pic_center"><img src="https://img-blog.csdnimg.cn/3d0d078679794d8596df83dd68ca6f41.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><hr><h2 id="4-阿里云镜像"><a href="#4-阿里云镜像" class="headerlink" title="4.阿里云镜像"></a>4.阿里云镜像</h2><ul><li>镜像：mirros<br>作用：加速我们的下载</li><li>国内建议使用阿里云</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>123456<br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="5-本地仓库"><a href="#5-本地仓库" class="headerlink" title="5.本地仓库"></a>5.本地仓库</h2><p>在本地的仓库，远程仓库</p><p>建立一个本地仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Program Files (x86)\maven_repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br>1<br><br>JAVA<br></code></pre></td></tr></table></figure><h2 id="6-在idea中使用maven"><a href="#6-在idea中使用maven" class="headerlink" title="6.在idea中使用maven"></a>6.在idea中使用maven</h2><ul><li>启动idea</li><li>创建一个maven项目</li></ul><p><a href="https://img-blog.csdnimg.cn/4f77ad79138c4842b9333768acfa8088.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/4f77ad79138c4842b9333768acfa8088.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/cc530ed875fe4eb5b25291bfaa7e2c66.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/cc530ed875fe4eb5b25291bfaa7e2c66.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/79d75802dd0747018f55fc5b12202208.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/79d75802dd0747018f55fc5b12202208.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/6edc00439a754dc5b00f382280056bb4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/6edc00439a754dc5b00f382280056bb4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>idea中的maven设置</p><p><a href="https://img-blog.csdnimg.cn/73b8d64d5b744f08a18b0fac0bd9d629.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/73b8d64d5b744f08a18b0fac0bd9d629.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>经常在idea中出现一个问题，就是项目自动创建完成后， 这个maven home 会使用idea默认的，我们如果发现了这个问题，手动改为本地。</p><p><a href="https://img-blog.csdnimg.cn/01026a4fd8fd48b38584ffaf726f6424.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/01026a4fd8fd48b38584ffaf726f6424.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h2 id="7-创建一个普通的maven项目"><a href="#7-创建一个普通的maven项目" class="headerlink" title="7.创建一个普通的maven项目"></a>7.创建一个普通的maven项目</h2><p><a href="https://img-blog.csdnimg.cn/bd1e7dd6982548a3806c493ddc558b5f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/bd1e7dd6982548a3806c493ddc558b5f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/848a6022c971498fa04b9f8ef462add4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/848a6022c971498fa04b9f8ef462add4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/20f898fb21c94c2b93eeac73a300b423.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/20f898fb21c94c2b93eeac73a300b423.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>这个只有web的项目才有<br><a href="https://img-blog.csdnimg.cn/d4bf5fb0e8a34bfabe2364f89f05cb5b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/d4bf5fb0e8a34bfabe2364f89f05cb5b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h2 id="8-标记文件夹功能"><a href="#8-标记文件夹功能" class="headerlink" title="8.标记文件夹功能"></a>8.标记文件夹功能</h2><p><a href="https://img-blog.csdnimg.cn/b84e1311be6f4cd1ada0f1e11a96f794.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/b84e1311be6f4cd1ada0f1e11a96f794.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/1a2af9448ae24b3d876c74e11f9ac0bf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/1a2af9448ae24b3d876c74e11f9ac0bf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/ff47ad7d9d3643d4abc7d872380d61ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/ff47ad7d9d3643d4abc7d872380d61ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/37174a3fdfd44dc48dda077d2b0688ef.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/37174a3fdfd44dc48dda077d2b0688ef.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h2 id="9-在idea中配置tomcat"><a href="#9-在idea中配置tomcat" class="headerlink" title="9.在idea中配置tomcat"></a>9.在idea中配置tomcat</h2><p><a href="https://img-blog.csdnimg.cn/952dd899de394d4b865c1f8aecfb835e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/952dd899de394d4b865c1f8aecfb835e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/da49b457b7174190adae580a341ae579.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/da49b457b7174190adae580a341ae579.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/00f1dd32249a44e680c08468076f2547.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/00f1dd32249a44e680c08468076f2547.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/19aeaf496e44489c9defab758005fcfa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/19aeaf496e44489c9defab758005fcfa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>解决警告问题<br>为什么会有这个问题，我们访问一个网站，需要指定一个文件夹的名字<br><a href="https://img-blog.csdnimg.cn/e97ac26f35a3489ca073c6d63eb2c85c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/e97ac26f35a3489ca073c6d63eb2c85c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>这个过程叫虚拟路径映射<br><a href="https://img-blog.csdnimg.cn/f740c9239e28449cb4f2f82d9ac54d6a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/f740c9239e28449cb4f2f82d9ac54d6a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/0a0a73a2a7f44741bc687397aababc1c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/0a0a73a2a7f44741bc687397aababc1c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><a href="https://img-blog.csdnimg.cn/507bd0decf1b49a1be4fd911b8a661a4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/507bd0decf1b49a1be4fd911b8a661a4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h2 id="10-pom文件"><a href="#10-pom文件" class="headerlink" title="10.pom文件"></a>10.pom文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs xml">pom.xml 是maven的 核心配置文件<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-comment">&lt;!--maven 的版本和头文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--公司域名--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.bloghut<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--项目名--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--版本--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--项目的打包方式</span><br><span class="hljs-comment">  jar：java应用</span><br><span class="hljs-comment">  war：javaweb应用</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo1 Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的默认构建编码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--编码版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--具体依赖的jar包配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目构建用的东西--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br>XML<br></code></pre></td></tr></table></figure><h2 id="1-Servlet-简介"><a href="#1-Servlet-简介" class="headerlink" title="1.Servlet 简介"></a>1.<a href="https://so.csdn.net/so/search?q=Servlet&spm=1001.2101.3001.7020">Servlet</a> 简介</h2><p>  Servlet 就是sun公司开发动态web的一门技术<br> sun 在这些API 中提供了一个接口：Servlet，如果你想开发一个Servlet 程序，只需要完成两个步骤</p><ul><li>编写一个类，实现Servlet 接口</li><li>把开发号好的Java类部署到服务器中</li></ul><p>把<strong>实现了Servlet接口的Java 程序</strong>叫做：<strong>Servlet</strong></p><hr><h2 id="2-HelloServlet"><a href="#2-HelloServlet" class="headerlink" title="2.HelloServlet"></a>2.HelloServlet</h2><p>Servlet 接口有两个默认的实现类：<strong>HttpServlet</strong>、<strong>GenericServlet</strong></p><p>关于mavne 父子工程的理解<br>  父项目中会有</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;modules&gt;</span><br>    <span class="hljs-section">&lt;module&gt;</span><span class="hljs-attribute">servlet</span>-<span class="hljs-number">01</span>&lt;/module&gt;<br><span class="hljs-section">&lt;/modules&gt;</span><br><span class="hljs-attribute">123</span><br><br><span class="hljs-attribute">JAVA</span><br></code></pre></td></tr></table></figure><p>  子项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.bloghut<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>12345<br><br>JAVA<br></code></pre></td></tr></table></figure><p>父项目中的jar包 子项目可以直接使用</p><p>子项目中的jar包 父项目不能使用</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Zi <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span><br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>编写一个普通类，实现Servlet接口，这里我们直接继承httpServlet</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <br>&#125;<br><span class="hljs-number">123</span><br><br><span class="hljs-type">JAVA</span><br></code></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/49a1278c306645c59868e79c8f5e48f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/49a1278c306645c59868e79c8f5e48f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-comment">//由于get或者post只是请求实现的不同的方法，可以相互调用，业务逻辑都一样</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br><br><span class="hljs-comment">//        ServletOutputStream sos = resp.getOutputStream();</span><br>        <span class="hljs-type">PrintWriter</span> writer = resp.getWriter();<span class="hljs-comment">//响应流</span><br>        writer.println(<span class="hljs-string">&quot;hello,Servlet&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        doGet(req,resp);<br>    &#125;<br>&#125;<br><span class="hljs-number">123456789101112131415161718</span><br><br><span class="hljs-type">JAVA</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-编写Servlet的映射"><a href="#3-编写Servlet的映射" class="headerlink" title="3.编写Servlet的映射"></a>3.编写Servlet的映射</h2><p>  为什么需要映射：我们写的Java程序，但是要通过浏览访问，而浏览器需要连接web服务器，所以我们需要在web服务中注册我们写的Servlet，还需要给他一个浏览器能够访问的路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.bloghut.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br>123456789101112131415161718192021<br><br>JAVA<br></code></pre></td></tr></table></figure><p>配置tomcat</p><p>测试<br><a href="https://img-blog.csdnimg.cn/458b06824c6a49199f6fc837f5790dab.png#pic_center"><img src="https://img-blog.csdnimg.cn/458b06824c6a49199f6fc837f5790dab.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h2 id="4-Servlet-原理"><a href="#4-Servlet-原理" class="headerlink" title="4.Servlet 原理"></a>4.Servlet 原理</h2><p>  Servlet 是由web服务器调用，web服务器在收到浏览器请求之后，会调用相关API对请求处理。</p><p><a href="https://img-blog.csdnimg.cn/d67dfced2b254c1a8eae2a9b355e9408.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/d67dfced2b254c1a8eae2a9b355e9408.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h2 id="5-Mapping-问题："><a href="#5-Mapping-问题：" class="headerlink" title="5.Mapping 问题："></a>5.Mapping 问题：</h2><p>  一个请求（Servlet）可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.bloghut.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>123456789<br><br>JAVA<br></code></pre></td></tr></table></figure><p>  一个请求（Servlet）可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.bloghut.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello3<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>12345678910111213141516171819<br><br>JAVA<br></code></pre></td></tr></table></figure><p>  一个请求（Servlet）可以指定通用映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--默认请求路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>12345<br><br>JAVA<br></code></pre></td></tr></table></figure><p>指定一些后缀或者前缀等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>1234<br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>优先级问题</strong><br>  指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p><h2 id="6-ServletContext"><a href="#6-ServletContext" class="headerlink" title="6.ServletContext"></a>6.ServletContext</h2><p>  web容器在启动的时候，它会为每个web程序都创建一个ServletContext对象，它代表了当前的web应用。</p><h3 id="6-1-共享数据"><a href="#6-1-共享数据" class="headerlink" title="6.1.共享数据"></a>6.1.共享数据</h3><p>我在这个Servlet中保存的数据</p><p><a href="https://img-blog.csdnimg.cn/aa5e9f495f1a4f3da1e070d3214c0e7f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/aa5e9f495f1a4f3da1e070d3214c0e7f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>放置数据的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> HelloServlet</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 放置数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/11 14:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">setData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;闲言&quot;</span>;<span class="hljs-comment">//数据</span><br>        servletContext.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<span class="hljs-comment">//将一个数据保存在ServletContext中  名为：username  值为 闲言</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req,resp);<br>    &#125;<br>&#125;<br><br><br>读取数据的Servlet<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> by 闲言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span> GetServlet</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 获取数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/9/16 21:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) context.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.write(username);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doGet(req,resp);<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="6-2获取初始化参数"><a href="#6-2获取初始化参数" class="headerlink" title="6.2获取初始化参数"></a>6.2获取初始化参数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs scala">&lt;context-param&gt;<br>    &lt;param-name&gt;url&lt;/param-name&gt;<br>    &lt;param-value&gt;jdbc:mysql:<span class="hljs-comment">//localhost:3306/school&lt;/param-value&gt;</span><br>&lt;/context-param&gt;<br><span class="hljs-number">1234</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-comment">//获取上下文对象</span><br>        <span class="hljs-type">ServletContext</span> context = <span class="hljs-keyword">this</span>.getServletContext();<br>        <span class="hljs-comment">//获取初始参数</span><br>        <span class="hljs-type">String</span> url = context.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        <br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;url: &quot;</span>+url);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        doGet(req,resp);<br>    &#125;<br>&#125;<br><span class="hljs-number">12345678910111213141516</span><br><br><span class="hljs-type">JAVA</span><br></code></pre></td></tr></table></figure><h3 id="6-3-请求转发"><a href="#6-3-请求转发" class="headerlink" title="6.3 请求转发"></a>6.3 请求转发</h3><p>路径不会发生变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>    <span class="hljs-comment">//请求转发  /get 转发的路径</span><br>    <span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">dispatcher</span> <span class="hljs-operator">=</span> context.getRequestDispatcher(<span class="hljs-string">&quot;/get&quot;</span>);<br>    <span class="hljs-comment">//调用forward 实现请求转发</span><br>    dispatcher.forward(req,resp);<br><br>&#125;<br><span class="hljs-number">123456789</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/03c98898ae524d5bb1bafddc436dcd6e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/03c98898ae524d5bb1bafddc436dcd6e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h3 id="6-4-读取配置文件"><a href="#6-4-读取配置文件" class="headerlink" title="6.4 读取配置文件"></a>6.4 读取配置文件</h3><p><strong>Properties</strong><br>  在resources 目录下新建properties<br>  在java 目录下新建properties<br><strong>发现</strong>：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath；<br><strong>思路</strong>：需要一个文件流</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">properties文件<br><span class="hljs-attribute">username</span><span class="hljs-operator">=</span>xy123<br><span class="hljs-attribute">password</span><span class="hljs-operator">=</span><span class="hljs-number">123</span><br><span class="hljs-number">123</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ServletDemo05 extends HttpServlet &#123;<br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        InputStream stream = this.get<span class="hljs-constructor">ServletContext()</span>.get<span class="hljs-constructor">ResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/cn/bloghut/servlet/aa.properties&quot;</span>)</span>;<br><span class="hljs-comment">//        InputStream stream = this.getServletContext().getResourceAsStream(&quot;/WEB-INF/classes/db.properties&quot;);</span><br>        Properties pt = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br>        pt.load(stream);<br>        String username = pt.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>        String password = pt.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;password&quot;</span>)</span>;<br>        resp.get<span class="hljs-constructor">Writer()</span>.println(username+<span class="hljs-string">&quot;:&quot;</span>+password);<br>    &#125;<br><br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(<span class="hljs-params">req</span>,<span class="hljs-params">resp</span>)</span>;<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>效果<br><a href="https://img-blog.csdnimg.cn/af242e03ed024500921bb8aea4bacfd1.png#pic_center"><img src="https://img-blog.csdnimg.cn/af242e03ed024500921bb8aea4bacfd1.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>maven资源导出失败问题</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>123456789101112131415161718<br><br>JAVA<br></code></pre></td></tr></table></figure><h3 id="6-5HttpServletResponse"><a href="#6-5HttpServletResponse" class="headerlink" title="6.5HttpServletResponse"></a>6.5HttpServletResponse</h3><p>  web服务器接收到客户端的http请求，会针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletRespoonse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><p><strong>简单分类</strong></p><p>负责向浏览器发送数据的方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function">ServletOutputStream <span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function">PrintWriter <span class="hljs-title">getWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br><span class="hljs-number">12</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>负责向浏览器写一些响应头的方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setCharacterEncoding</span><span class="hljs-params">(<span class="hljs-type">String</span> charset)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setContentLength</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-type">long</span> len)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setContentType</span><span class="hljs-params">(<span class="hljs-type">String</span> type)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setDateHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">long</span> date)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">addDateHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">long</span> date)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">String</span> value)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">addHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">String</span> value)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setIntHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> value)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">addIntHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> value)</span></span>;<br><span class="hljs-number">1234567891011</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>响应的状态码常量</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs smali">public<span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_CONTINUE = 100;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_SWITCHING_PROTOCO<span class="hljs-class">LS = 101;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_OK = 200;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_CREATED = 201;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_ACCEPTED = 202;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_NON_AUTHORITATIVE_INFORMATION = 203;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_NO_CONTENT = 204;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_RESET_CONTENT = 205;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_PARTIA<span class="hljs-class">L_CONTENT = 206;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_MU<span class="hljs-class">LTIPLE_CHOICES = 300;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_MOVED_PERMANENT<span class="hljs-class">LY = 301;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_MOVED_TEMPORARI<span class="hljs-class">LY = 302;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_FOUND = 302;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_SEE_OTHER = 303;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_NOT_MODIFIED = 304;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_USE_PROXY = 305;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_TEMPORARY_REDIRECT = 307;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_BAD_REQUEST = 400;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_UNAUTHORIZED = 401;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_PAYMENT_REQUIRED = 402;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_FORBIDDEN = 403;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_NOT_FOUND = 404;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_METHOD_NOT_A<span class="hljs-class">LLOWED = 405;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_NOT_ACCEPTAB<span class="hljs-class">LE = 406;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_PROXY_AUTHENTICATION_REQUIRED = 407;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_REQUEST_TIMEOUT = 408;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_CONF<span class="hljs-class">LICT = 409;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_GONE = 410;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_<span class="hljs-class">LENGTH_REQUIRED = 411;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_PRECONDITION_FAI<span class="hljs-class">LED = 412;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_REQUEST_ENTITY_TOO_<span class="hljs-class">LARGE = 413;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_REQUEST_URI_TOO_<span class="hljs-class">LONG = 414;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_UNSUPPORTED_MEDIA_TYPE = 415;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_REQUESTED_RANGE_NOT_SATISFIAB<span class="hljs-class">LE = 416;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_EXPECTATION_FAI<span class="hljs-class">LED = 417;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_INTERNA<span class="hljs-class">L_SERVER_ERROR = 500;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_NOT_IMP<span class="hljs-class">LEMENTED = 501;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_BAD_GATEWAY = 502;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_SERVICE_UNAVAI<span class="hljs-class">LABLE = 503;</span><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_GATEWAY_TIMEOUT = 504;<span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span><span class="hljs-keyword"> static</span><span class="hljs-keyword"> final</span><span class="hljs-built_in"> int </span>SC_HTTP_VERSION_NOT_SUPPORTED = 505;<br>1234567891011121314151617181920212223242526272829303132333435363738394041<br><br>JAVA<br></code></pre></td></tr></table></figure><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a><strong>下载文件</strong></h4><p>1.向浏览器输出消息<br>2.下载文件<br>  2.1.要获取文件的路径<br>  2.2下载的文件名是啥<br>  2.3设置想办法让浏览器能够支持下载我们需要的东西<br>  2.4获取下载文件的输入流<br>  2.创建缓冲区<br>  2.5获取OutputStream对象<br>  2.6将FileOutputStream流写入到buff缓冲区<br>  2.7使用OutputStream将缓冲区中的数据输出到客户端！</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-comment">//要获取文件的路径</span><br><span class="hljs-comment">//        String realPath = this.getServletContext().getRealPath(&quot;/1.png&quot;);</span><br>        String realPath = <span class="hljs-string">&quot;G:\\JavaWeb\\狂\\servlet\\response-2\\target\\classes\\1.png&quot;</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;下载路径：&quot;</span> + realPath);<br>        <span class="hljs-comment">//下载的文件名是啥</span><br>        String fileName = realPath.substring(realPath.last<span class="hljs-constructor">IndexOf(<span class="hljs-string">&quot;//&quot;</span>)</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//设置想办法让浏览器能够支持下载我们需要的东西</span><br>        <span class="hljs-comment">//中文文件名URLEncoder.encode 编码，否则可能乱码</span><br>        resp.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;fileName=&quot;</span> + URLEncoder.<span class="hljs-params">encode</span>(<span class="hljs-params">fileName</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>)</span>);<br>        <span class="hljs-comment">//获取下载文件的输入流</span><br>        FileInputStream <span class="hljs-keyword">in</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-params">realPath</span>)</span>;<br>        <span class="hljs-comment">//创建缓冲区</span><br>        <span class="hljs-built_in">int</span> len = <span class="hljs-number">0</span>;<br>        byte<span class="hljs-literal">[]</span> buffer = <span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br>        <span class="hljs-comment">//获取OutputStream对象</span><br>        ServletOutputStream out = resp.get<span class="hljs-constructor">OutputStream()</span>;<br>        <span class="hljs-comment">//将FileOutputStream流写入到buff缓冲区</span><br>        <span class="hljs-comment">//使用OutputStream将缓冲区中的数据输出到客户端！</span><br>        <span class="hljs-keyword">while</span> ((len = <span class="hljs-keyword">in</span>.read(buffer)) &gt; <span class="hljs-number">0</span>) &#123;<br>            out.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        out.close<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">in</span>.close<span class="hljs-literal">()</span>;<br>    &#125;<br><br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(<span class="hljs-params">req</span>, <span class="hljs-params">resp</span>)</span>;<br>    &#125;<br><span class="hljs-number">12345678910111213141516171819202122232425262728293031</span><br><br>JAVA<br></code></pre></td></tr></table></figure><h4 id="验证码功能"><a href="#验证码功能" class="headerlink" title="验证码功能"></a>验证码功能</h4><p>验证码怎么来的？<br>  1.前端实现<br>  2.后端实现，需要用到Java图片类，生成一个图片</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ImageServlet extends HttpServlet &#123;<br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-comment">//如何让浏览器3秒自动刷新一次</span><br>        resp.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;refresh&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>)</span>;<br><br>        <span class="hljs-comment">//在内存中创建一个图片</span><br>        BufferedImage bufferedImage = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedImage(80, 20, BufferedImage.TYPE_INT_RGB)</span>;<br>        <span class="hljs-comment">//得到图片</span><br>        Graphics2D graphics = (Graphics2D) bufferedImage.get<span class="hljs-constructor">Graphics()</span>;<span class="hljs-comment">//笔</span><br>        <span class="hljs-comment">//设置背景颜色</span><br>        graphics.set<span class="hljs-constructor">Color(Color.<span class="hljs-params">white</span>)</span>;<br>        graphics.fill<span class="hljs-constructor">Rect(0, 0, 80, 20)</span>;<br>        <span class="hljs-comment">//给图片写出去</span><br>        graphics.set<span class="hljs-constructor">Color(Color.BLUE)</span>;<br>        graphics.set<span class="hljs-constructor">Font(<span class="hljs-params">new</span> Font(<span class="hljs-params">null</span>,Font.BOLD,20)</span>);<br>        graphics.draw<span class="hljs-constructor">String(<span class="hljs-params">makeNumber</span>()</span>,<span class="hljs-number">0</span>,<span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">//告诉浏览器器，这个请求用图片的方式打开</span><br>        resp.set<span class="hljs-constructor">ContentType(<span class="hljs-string">&quot;image/png&quot;</span>)</span>;<br>        <span class="hljs-comment">//网站存储缓存，不让浏览器缓存</span><br>        resp.set<span class="hljs-constructor">DateHeader(<span class="hljs-string">&quot;expires&quot;</span>,-1)</span>;<br>        resp.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Cache-Control&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>)</span>;<br>        resp.set<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Pragma&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>)</span>;<br><br>        <span class="hljs-comment">//把图片写给浏览器</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImageIO</span>.</span></span>write(bufferedImage,<span class="hljs-string">&quot;jpg&quot;</span>,resp.get<span class="hljs-constructor">OutputStream()</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">//生成随机数</span><br>    <span class="hljs-keyword">private</span> String make<span class="hljs-constructor">Number()</span> &#123;<br>        Random random = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Random()</span>;<br><br>        String str = random.next<span class="hljs-constructor">Int(9999)</span> + <span class="hljs-string">&quot;&quot;</span>;<br>        StringBuffer sb = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer()</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> - str.length<span class="hljs-literal">()</span>; i++) &#123;<br>            sb.append(<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125;<br>        return   sb.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> + str;<br>    &#125;<br><br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(<span class="hljs-params">req</span>, <span class="hljs-params">resp</span>)</span>;<br>    &#125;<br>&#125;<br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>实现重定向</strong><br><a href="https://img-blog.csdnimg.cn/03c98898ae524d5bb1bafddc436dcd6e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/03c98898ae524d5bb1bafddc436dcd6e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  B一个web资源收到客户端A请求后，B他会通知客户端去访问另一个web资源，这个过叫重定向。</p><p>  <br>  用户登录</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">sendRedirect</span><span class="hljs-params">(<span class="hljs-type">String</span> location)</span> throws IOException</span>;<br><span class="hljs-number">1</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     resp.setHeader(&quot;Location&quot;,&quot;/r2/img&quot;);</span><br><span class="hljs-comment">     resp.setStatus(302);</span><br><span class="hljs-comment">     */</span><br><br>    resp.send<span class="hljs-constructor">Redirect(<span class="hljs-string">&quot;/r2/img&quot;</span>)</span>;<span class="hljs-comment">//重定</span><br><br>&#125;<br><span class="hljs-number">12345678910</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p><ul><li>相同点<br>页面都会实现跳转</li><li>不同点<br>请求转发的时候，url不会产生变化<br>重定向的时候，url地址栏会发生变化</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-comment">//出来请求</span><br>    String username = req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>    String password = req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;password&quot;</span>)</span>;<br><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;username：&quot;</span>+username+<span class="hljs-string">&quot;   password：&quot;</span>+password);<br>    <span class="hljs-comment">//重定向一定要注意：“路径问题”，否则404</span><br>    resp.send<span class="hljs-constructor">Redirect(<span class="hljs-string">&quot;/r2/success.jsp&quot;</span>)</span>;<br>&#125;<br><br>@Override<br>protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(<span class="hljs-params">req</span>,<span class="hljs-params">resp</span>)</span>;<br>&#125;<br><span class="hljs-number">123456789101112131415</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p>  页面提交过来的HTTP请求包含了参数，放在URL里面了，tomcat自动解析封装在request对象里，再调用service方法，request可以根据键得到传过来的值</p><hr><h3 id="6-6HttpServletRequest"><a href="#6-6HttpServletRequest" class="headerlink" title="6.6HttpServletRequest"></a>6.6HttpServletRequest</h3><p>  HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，Http请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest中的方法，获取客户端的所有信息。</p><p><a href="https://img-blog.csdnimg.cn/519550aadbd543cca6cb71da869c6c31.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/519550aadbd543cca6cb71da869c6c31.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>获取前端传递的参数</strong><br><a href="https://img-blog.csdnimg.cn/f2f4c337163e4fb88c775fc2c139db90.png#pic_center"><img src="https://img-blog.csdnimg.cn/f2f4c337163e4fb88c775fc2c139db90.png#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p><strong>请求转发</strong><br>  1.转发时”&#x2F;“代表的是本应用程序的根目录 重定向时”&#x2F;“代表的是webapps目录</p><p>  2.getRequestDispatcher分成两种，可以用request调用，也可以用getServletContext()调用 不同的是request.getRequestDispatcher(url)的url可以是相对路径也可以是绝对路径。而this.getServletContext().getRequestDispatcher(url)的url只能是绝对路径。</p><p>  转发是一个web应用内部的资源跳转</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> LoginServlet extends HttpServlet &#123;<br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置编码</span><br>        req.set<span class="hljs-constructor">CharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>)</span>;<br><br>        String username = req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>        String password = req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;password&quot;</span>)</span>;<br>        String<span class="hljs-literal">[]</span> hobbys = req.get<span class="hljs-constructor">ParameterValues(<span class="hljs-string">&quot;hobbys&quot;</span>)</span>;<br>        <span class="hljs-comment">//后台接收中文乱码问题</span><br><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(username+<span class="hljs-string">&quot; : &quot;</span>+password+<span class="hljs-string">&quot; :&quot;</span>+ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">hobbys</span>)</span>);<br>        <span class="hljs-comment">//通过请求转发</span><br>        <span class="hljs-comment">//这里的 /  代表当前的web应用</span><br>        req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>)</span>.forward(req,resp);<br><br>    &#125;<br><br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>       <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(<span class="hljs-params">req</span>,<span class="hljs-params">resp</span>)</span>;<br>    &#125;<br>&#125; <br><span class="hljs-number">1234567891011121314151617181920212223</span><br><br>JAVA<br></code></pre></td></tr></table></figure><p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p><ul><li>相同点<br>页面都会实现跳转</li><li>不同点<br>请求转发的时候，url不会产生变化<br>重定向的时候，url地址栏会发生变化</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2022/11/27/Java/Spring/"/>
    <url>/2022/11/27/Java/Spring/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1、Spring<br>1-1.Spring 简介<br>Spring：春天——&gt;给软件行业带来了春天！</p><p>2002，首次推出了Spring框架的雏形：interface21框架！</p><p>Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日发布了1.0正式版。</p><p>Rod Johnson，Spring Framework创始人，著名作者。很难想象Rod Johnson的学历，真的让好多人大吃一惊，他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</p><p>Spring理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架！</p><p>1-2.Spring 的优点<br>Spring是一个开源的免费的框架（容器）！<br>Spring是一个轻量级的、非入侵式的框架！<br>控制反转（IOC），面向切面编程（AOP）！<br>支持事务的处理，对框架整合的支持！<br>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！</p><p>1-3.Spring 组成</p><p>1-4.Spring 拓展<br>现代化的Java开发！说白就是基于Spring的开发！</p><p>Spring Boot</p><p>一个快速开发的脚手架。<br>基于SpringBoot可以快速的开发单个微服务。<br>约定大于配置。<br>Spring Cloud</p><p>SpringCloud是基于SpringBoot实现的。<br>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！承上启下的作用！<br>弊端：发展了太久之后，违背了原来的理念！配置十分繁琐，人称：“配置地狱！”</p><p>2、IOC理论推导<br>2-1.UserDao 接口<br>public interface UserDao {</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">void</span> <span class="hljs-built_in">getUser</span>();<br><br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>2-2.UserDaoImpl 实现类<br>public class UserDaoImpl implements UserDao {</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span>()</span> &#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;获取用户数据&quot;</span>);<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>2-3.UserService 业务接口<br>public interface UserService {</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">void</span> <span class="hljs-built_in">getUser</span>();<br><br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>2-4.UserServiceImpl 业务实现类<br>public class UserServiceImpl implements UserService {</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br><br>public <span class="hljs-keyword">void</span> <span class="hljs-built_in">getUser</span>() &#123;<br>  userDao.<span class="hljs-built_in">getUser</span>();<br>&#125;<br><br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>2-5.测试<br>public class Test {<br>public static void main(String[] args) {</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">    UserService userService <span class="hljs-operator">=</span> new UserServiceImpl()<span class="hljs-comment">;</span><br>    userService.getUser()<span class="hljs-comment">;</span><br><br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>  在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！</p><p>  我们使用一个Set接口实现，已经发生了革命性的变化！</p><p>UserDao userDao;</p><p>public void setUserDao(UserDao userDao){<br>this.userDao &#x3D; userDao;<br>}<br>1<br>2<br>3<br>4<br>5<br>  之前，程序是主动创建对象！控制权在程序员手上！</p><p>  使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象！</p><p>控制反转了，主动权交给用户了</p><p>  这种思想，从本质上解决了问题，我们程序猿不用再去管理对象的创建了。系统的耦合性大大降低~，可以更加专注的在业务的实现上！这是IOC的原型！</p><p>3、IOC本质</p><p>  控制反转IoC（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p>  采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p>  控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection，DI）。</p><p>4、Spring 入门程序<br>4-1.实体类<br>public class User {<br>private String name;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>4-2.配置文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;!<span class="hljs-comment">--使用Spring 来创建对象，在Spring 中，这些都称为bean</span><br>类型  变量名 = <span class="hljs-built_in">new</span> 类型();<br><span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br><br>    bean = 对象 <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>id = 变量名<br><span class="hljs-keyword">class</span> = <span class="hljs-built_in">new</span> 的对象;<br>property 相当于 给对象中的属性设置一个值！<br><br><span class="hljs-comment">--&gt;</span><br>&lt;bean id=&quot;user&quot; <span class="hljs-keyword">class</span>=&quot;cn.bloghut.domain.User&quot;&gt;<br>        &lt;property <span class="hljs-type">name</span>=&quot;name&quot; <span class="hljs-keyword">value</span>=&quot;csdn_闲言&quot;/&gt;<br>&lt;/bean&gt;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 4-3.测试 public static void main(String[] args) { &#x2F;&#x2F;获取Spring 的上下文对象 ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“beans.xml”); &#x2F;&#x2F;我们的对象现在都在Spring 中管理了，我们要使用，直接去里面取出来就行了 User user &#x3D; (User)ac.getBean(“user”); &#x2F;&#x2F;打印 System.out.println(user.toString()); } 1 2 3 4 5 6 7 8 4-4.结果 User{name&#x3D;’闲言’} 1 4-5.思考问题？ Hello对象是谁创建的？</p><p>  Hello对象是由Spring创建的。</p><p>Hello对象的属性是怎么设置的？<br>  Hello对象的属性是由Spring容器设置的。</p><p>这个过程就叫控制反转：</p><p>  控制：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建的。</p><p>  反转：程序本身不创建对象，而变成被动的接收对象。</p><p>依赖注入：就是利用set方法来进行注入的。</p><p>IOC是一种编程思想，由主动的编程变成被动的接收。</p><p>可以通过new ClassPathXmlApplicationContext去浏览一下底层源码。</p><p>到了现在，不用在程序中去改动了，要实现不同的操作，只需要在xml配置文件中进行修改，所谓的IOC，一句话搞定：对象由Spring来创建，管理，装配！</p><p>5、IOC创建对象的方式<br>5-1.使用无参构造创建对象，默认！<br>public User() {<br>System.out.println(“User 空参构造方法执行了”);<br>}</p><p>1 2 3 4 5 6 7 8 5-2.使用有参构造创建对象 下标赋值</p><p>public User(String name) {<br>this.name &#x3D; name;<br>}</p><p>1 2 3 4 5 6 7 5-3.类型 public User(String name) { this.name &#x3D; name; }</p><p>参数名</p><p>1 2 3 4 5 6 7 8 9 10 11 12 13</p><p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！</p><p>Spring 容器，就类似于婚介网站。</p><p>信息都注册在里面<br>你想查看（获取）的时候再拿<br>6、Spring配置<br>6-1.别名</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“bean.xml”);<br>User user &#x3D; (User)ac.getBean(“user2”);<br>user.show();</p><p>输出：csnd_闲言<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>6-2.Bean的配置<br>别名可以通过很多种方式分割</p><p>空格分割<br>逗号分割<br>分号分割</p><p>&#x2F;&#x2F; User user &#x3D; (User)ac.getBean(“user”);<br>&#x2F;&#x2F; User user &#x3D; (User)ac.getBean(“user2”);<br>&#x2F;&#x2F; User user &#x3D; (User)ac.getBean(“u2”);<br>&#x2F;&#x2F; User user &#x3D; (User)ac.getBean(“u3”);<br>User user &#x3D; (User)ac.getBean(“u4”);<br>user.show();</p><p>输出：csdn_闲言<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>6-3.import<br>  这个import。一般用于团队开发使用，它可以将多个配置文件，导入合并为一个。</p><p>  假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p><p>张三<br>李四<br>王五</p><p>使用的时候，直接使用总的配置就可以了。</p><p>7、依赖注入<br>7-1.构造器注入<br>略</p><p>7-2.Set 注入<br>依赖：bean对象的创建依赖于容器！<br>注入：bean对象中的所有属性，由容器来注入！</p><p>Address类</p><p>public class Address {<br>private String address;<br>省略setter<br>}<br>1<br>2<br>3<br>4<br>student类</p><p>public class Student {</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>;<br><span class="hljs-keyword">private</span> Address address;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span>[] books;<br><span class="hljs-keyword">private</span> List&lt;<span class="hljs-keyword">String</span>&gt; hobbies;<br><span class="hljs-keyword">private</span> Map&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; card;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">Set</span>&lt;<span class="hljs-keyword">String</span>&gt; games;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> wife;<br><span class="hljs-keyword">private</span> Properties info;<br>省略setter<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>bean.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bloghut.domain.Address&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;csdn_闲言&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bloghut.domain.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入address 类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--String 类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;csdn_闲言&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--String 类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>JavaSE<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>JavaWeb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Spring<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--List--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Map--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;闲言&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;csdn——闲言&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;闲言博客&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;csdn——闲言——博客&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--set--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--String--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Properties--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>v1<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>v2<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span>v3<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 测试</p><p>public static void main(String[] args) {<br>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“bean.xml”);<br>Student student &#x3D; (Student)ac.getBean(“student”);<br>System.out.println(student);<br>}<br>1<br>2<br>3<br>4<br>5<br>输出</p><p>Student{<br>name&#x3D;’csdn_闲言’,<br>address&#x3D;Address{address&#x3D;’csdn_闲言’},<br>books&#x3D;[JavaSE, JavaWeb, Spring, SpringMVC, Mybatis],<br>hobbies&#x3D;[唱, 跳, rap, 篮球],<br>card&#x3D;{闲言&#x3D;csdn——闲言, 闲言博客&#x3D;csdn——闲言——博客},<br>games&#x3D;[唱, 跳, rap, 篮球],<br>wife&#x3D;’xxx’,<br>info&#x3D;{p3&#x3D;v3, p2&#x3D;v2, p1&#x3D;v1}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p><h2 id="8、拓展方式注入-可以使用p命名空间和c命名空间进行注入"><a href="#8、拓展方式注入-可以使用p命名空间和c命名空间进行注入" class="headerlink" title="8、拓展方式注入 可以使用p命名空间和c命名空间进行注入"></a>8、拓展方式注入 可以使用<strong>p命名空间</strong>和<strong>c命名空间</strong>进行注入</h2><p>p 命名空间对应 setter 方式注入（要提供set方法）<br>c 命令空间对应 构造方法 （要提供有参构造方法）</p><p>1 2 3 4 5 6 7 8 9 10 bean.xml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.bloghut.domain.User&quot;</span> p:<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;闲言&quot;</span> p:<span class="hljs-attribute">age</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;<br>&lt;bean <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;cn.bloghut.domain.User&quot;</span> c:<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;csdn——闲言&quot;</span> c:<span class="hljs-attribute">age</span>=<span class="hljs-string">&quot;19&quot;</span> /&gt;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 pojp</p><p>public class User {<br>private String name;<br>private int age;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span>() &#123;<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span>(String <span class="hljs-type">name</span>, <span class="hljs-type">int</span> age) &#123;<br>    this.name = <span class="hljs-type">name</span>;<br>    this.age = age;<br>&#125;<br>省略setter<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>测试</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“userbeans.xml”);<br>User user &#x3D; (User)ac.getBean(“user”);<br>User user2 &#x3D; (User)ac.getBean(“user2”);<br>System.out.println(user);<br>System.out.println(user2);<br>1<br>2<br>3<br>4<br>5<br>输出</p><p>User{name&#x3D;’闲言’, age&#x3D;18}<br>User{name&#x3D;’csdn——闲言’, age&#x3D;19}<br>1<br>2<br>9、bean的作用域</p><p>9-1.单例模式（Spring 默认机制）<br>scope&#x3D;”singleton”</p><p>User user2 &#x3D; (User)ac.getBean(“user2”);<br>User user3 &#x3D; (User)ac.getBean(“user2”);<br>System.out.println(user2.hashCode());<br>System.out.println(user3.hashCode());<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>输出</p><p>817406040<br>817406040<br>1<br>2<br>9-2.原型模式：每次从容器中get的时候，都会产生一个新对象</p><p>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“userbeans.xml”);<br>for (int i &#x3D; 0;i&lt; 5;i++){<br>System.out.println(ac.getBean(“user”).hashCode());<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>输出</p><p>817406040<br>1955915048<br>1270855946<br>2083117811<br>157683534<br>1<br>2<br>3<br>4<br>5<br>单线程—单例<br>多线程—多例</p><p>10.Bean的自动装配<br>自动装配是Spring 满足bean依赖的一种方式！<br>Spring 会在上下文自动寻找，并自动给bean 装配属性！</p><p>在Spring 中有三种装配的方式</p><p>在xml 中显示的配置<br>在java中显示配置<br>隐式 的自动装配bean【重要】<br>ByName方法自动装配</p><p>autowire&#x3D;“byName”<br>会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id！<br>弊端：set 方法后面的值和 id 相同<br>bean.xml</p><p>1 2 3 4 5 6 7 8 9 10 测试</p><p>public static void main(String[] args) {</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ApplicationContext ac = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>)</span>;<br>People people = ac.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;people&quot;</span>, People.<span class="hljs-params">class</span>)</span>;<br><br>people.get<span class="hljs-constructor">Cat()</span>.shout<span class="hljs-literal">()</span>;<br>people.get<span class="hljs-constructor">Dog()</span>.shout<span class="hljs-literal">()</span>;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>ByName方法自动装配</p><p>autowire&#x3D;“byType”<br>会自动在容器上下文中查找，和自己对象属性类型相同的bean<br>弊端：它必须保证类型全局唯一（在IOC容器中只能由一个）。</p><p>&lt;!–<br>byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean</p><p>–&gt;</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>测试</p><p>public static void main(String[] args) {</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ApplicationContext ac = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>)</span>;<br>People people = ac.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;people&quot;</span>, People.<span class="hljs-params">class</span>)</span>;<br><br>people.get<span class="hljs-constructor">Cat()</span>.shout<span class="hljs-literal">()</span>;<br>people.get<span class="hljs-constructor">Dog()</span>.shout<span class="hljs-literal">()</span>;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>总结：</p><p>  byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致<br>  byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</p><p>11、注解实现自动装配<br>jdk1.5支持的注解 Spring2.5支持的注解</p><p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML</p><p>@Autowired</p><p>@Quelifier</p><p>@Resource</p><p>xml头文件约束</p><p><a href="context:annotation-config/">context:annotation-config&#x2F;</a></p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>11-1.@Autowired<br>在属性上使用<br>在set方式上使用<br>使用Autowired 可以不用编写set方法了，前提是你这个自动装配的属性在IOC（Spring）容器中存在（需要通过其他方式注入进容器），且符合名字byName。<br>public class People {<br>@Autowired<br>private Dog dog;</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@Autowired<br><span class="hljs-keyword">private</span> Cat cat;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">People</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">People</span><span class="hljs-params">(Dog dog, Cat cat, <span class="hljs-type">String</span> name)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.dog = dog;<br>    <span class="hljs-keyword">this</span>.cat = cat;<br>    <span class="hljs-keyword">this</span>.name = name;<br>&#125;<br>省略setter<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>Autowired 有一个个唯一的属性（ required ）</p><p>@Target({ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE})<br>@Retention(RetentionPolicy.RUNTIME)<br>@Documented<br>public @interface Autowired {<br>boolean required() default true;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>@Nullable<br>  字段标记了这个注解，表示这个字段可以为null</p><p>@Qualifier</p><p>当我们的容器存在多个相同类型，不同名称的bean。使用@Autowired 无法完成自动装配了<br>这个时候需要使用@Qualifier 和@Autowired 注解一起使用。<br>使用@Qualifier 指定一个唯一的bean对象注入！<br>例如<br>IOC容器中存在多个 相同类型不同id的bean</p><p>通过@Qualifier 指定一个唯一的bean</p><p>测试</p><p>11-2.@Resource<br>  不指定name值，先去判断byName和byType，有一个能注入即成功</p><p>根据类型查找</p><p>11-3.根据类型和id查找<br>如果IOC容器中存在多个不同名称，相同类型的bean，可以通过@Resource注解的name属性指定唯一的id；</p><p>总结：</p><p>都是用来自动装配的，都可以放在<em>属性字段</em>上<br>@Autowired通过byType（类型）的方式实现，而且必须要求这个对象存在！<br>@Resource默认通过byName（id）的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！<br>执行顺序不同：@Autowired通过byType的方式实现。@Resource默认通过byName的方式实现。<br>12、使用注解开发<br>在Spring4之后，要使用注解开发，必须保证aop的包导入了</p><p>使用注解需要导入context约束，增加注解的支持！</p><p>&lt;context:component-scan base-package&#x3D;”cn.bloghut”&#x2F;&gt;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启注解支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 bean注入使用@Componet注解</p><p>等价于</p><p>@Component<br>public class User {</p><p>}<br>1<br>2<br>3<br>4<br>属性注入使用@Value注解</p><p>@Component public class User {</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><br><span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;闲言&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span>  <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>衍生注解</p><p>@Componet有几个衍生注解，在web开发中，会按照mvc三层架构分层！<br>@Service——–业务层注解<br>@Repository—持久层注解<br>@Controller—–控制层注解<br>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean</p><p>自动装配</p><p>@Autowired 自动装配通过类型、名字<br>如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value&#x3D;“xxx”)<br>@Nullable 字段标记了这个注解，说明这个字段可以为null<br>@Resource 自动装配通过名字，类型<br>作用域</p><p>@Scope(“singleton”)单例<br>1</p><p>总结</p><p>XML 与 注解</p><p>xml更加万能，适用于任何场合！维护简单方便<br>注解不是自己类使用不了， 维护相对复杂<br>XML 与 注解最佳实践</p><p>xml用来管理bean<br>注解只负责完成属性的注入<br>我们在使用过程中，只需要注意一个问题：必须让注解生效，就需要开启注解的支持</p><p>&lt;context:component-scan base-package&#x3D;”cn.bloghut”&#x2F;&gt;</p><p><a href="context:annotation-config/">context:annotation-config&#x2F;</a><br>1<br>2<br>3<br>4<br>5<br>13、java的方式配置Spring<br>  JavaConfig 是Spring的 一个子项目，在Spring 4之后，它成为了新功能</p><p>首先定义一个类，在类上添加@Component注解，让它加载到Spring IOC容器（让Spring 管理）<br>定义Java 配置类，在其类上添加@Configuration 注解，说明该类是一个配置类，这个类也会被Spring 托管，因为它本身是一个@Component<br>在Myconfig 类中 添加getUser 方法，返回一个user对象<br>getUser 方法上的@Bean 注解 则是注册一个bean功能，相当于</p><p>1<br>方法的名字，相当于bean 标签中的id 属性。<br>方法的返回值，相当于bean 标签中的class属性。（因为我们导包了，Spring 知道是哪一个）<br>如果完全使用了配置类方式去做，我们只能通过AnnotationConfigApplicationContext 上下文来获取容器，通过配置类的class 对象加载！</p><p>完整代码</p><p>@Configuration 这个一个配置类<br>@ComponentScan 用于扫描包<br>@Import 用于导入其他配置类<br>13-1.主配置类<br>@Configuration<br>@ComponentScan(basePackages &#x3D; {“cn.bloghut.domain”})<br>@Import({MyConfig2.class})<br>public class MyConfig {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回一个User Bean</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>@Bean<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> getUser()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>13-2.配置类2<br>@Configuration<br>public class MyConfig2 {</p><p>}<br>1<br>2<br>3<br>4<br>5<br>13-3.User实体类<br>@Component<br>public class User {<br>private String name;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;闲言&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>13-4.测试类<br>public class MyTest {<br>public static void main(String[] args) {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    ApplicationContext ac = <span class="hljs-built_in">new</span> AnnotationConfigApplicationContext(MyConfig.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = ac.getBean(&quot;getUser&quot;, <span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br><br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>14、代理模式<br>14-1.角色分析：<br>抽象角色：一般会使用接口或者抽象类来解决<br>真实角色：被代理的角色<br>代理角色：代理 真实角色，代理真实角色后，我们一般会做一些附属操作<br>客户：访问代理对象的人<br>代码步骤：</p><p>14-2.接口<br>public interface Rent {<br>&#x2F;**<br>* 租房<br>*&#x2F;<br>void rent();<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>14-3.真实角色<br>public class Host implements Rent{</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span>()</span> &#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;房东要出租房子&quot;</span>);<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>14-4.代理角色<br>public class Proxy implements Rent{</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">private</span> Host host;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span>()</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span>(<span class="hljs-params">Host host</span>)</span> &#123;<br>    <span class="hljs-keyword">this</span>.host = host;<br>&#125;<br><br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span>()</span> &#123;<br>    seeHouse();<br>    host.rent();<br>    fare();<br>    hetong();<br>&#125;<br><span class="hljs-comment">//看房</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span>()</span>&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;中介带你看房&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//收中介费</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fare</span>()</span>&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br>&#125;<br><span class="hljs-comment">//签合同</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hetong</span>()</span>&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;签合同&quot;</span>);<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>14-5.客户端访问代理角色<br>public class Client {<br>public static void main(String[] args) {</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">    Host host = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Host()</span>;<br>    <span class="hljs-comment">//代理,中介帮房东，但是呢？代理角色一般会有一些附属操作！</span><br>    Proxy proxy = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Proxy(<span class="hljs-params">host</span>)</span>;<br>    <span class="hljs-comment">//你不用面对房东，直接找中介租房即可！</span><br>    proxy.rent<span class="hljs-literal">()</span>;<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>14-6.代理模式的好处：<br>可以使真实角色的操作更加存粹！不用去关注一些公共的业务<br>\2. 公共交给了代理角色，实现了业务的分工<br>公共业务发生扩展的时候，方便集中管理<br>14-7.缺点：<br>一个真实角色就会产生一个代理角色，代码量会翻倍 开发效率变低</p><p>15、静态代理<br>有一天，公司领导要求我为 某个类的所有方法新增日志输出功能。<br>怎么做呢？<br>在原来的类上的每一个方法添加日志输出？<br>这就是改变原来人家的代码了。<br>改动原有的业务代码，在公司中是大忌！<br>有可能人家你修改了人家的代码，可能给改蹦了。<br>新增一个类，制作成本小，职责单一。<br>原来的开发方式（纵向开发）</p><p>添加日志功能（横切进去）</p><p>代码如下：<br>业务接口：</p><p>public interface UserService {<br>void add();</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>()</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span>()</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">query</span>()</span>;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>原来业务类</p><p>public class UserServiceImpl implements UserService {<br>@Override<br>public void add() {<br>System.out.println(“新增用户”);<br>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>()</span> &#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;删除用户&quot;</span>);<br>&#125;<br><br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span>()</span> &#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;修改用户&quot;</span>);<br>&#125;<br><br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span>()</span> &#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;查询用户&quot;</span>);<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>代理类</p><p>public class UserServiceProxy implements UserService {</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-title class_">UserService</span> userService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserService</span>(<span class="hljs-params">UserService userService</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span> = userService;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;add&quot;</span>);<br>    userService.<span class="hljs-title function_">add</span>();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;delete&quot;</span>);<br>    userService.<span class="hljs-title function_">delete</span>();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;update&quot;</span>);<br>    userService.<span class="hljs-title function_">update</span>();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">query</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;query&quot;</span>);<br>    userService.<span class="hljs-title function_">query</span>();<br>&#125;<br><br><span class="hljs-comment">//日志方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg</span>)&#123;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;【Debug 】使用了&quot;</span>+msg+<span class="hljs-string">&quot;方法&quot;</span>);<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>测试类</p><p>public static void main(String[] args) {</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">UserServiceProxy userService <span class="hljs-operator">=</span> new UserServiceProxy()<span class="hljs-comment">;</span><br>userService.setUserService(new UserServiceImpl())<span class="hljs-comment">;</span><br>userService.add()<span class="hljs-comment">;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>16、动态代理<br>动态代理和静态代理角色一样<br>动态代理的代理类是动态生成的，不是我们直接写好的<br>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<br>基于接口：JDK动态代理<br>基于类： cglib<br>java字节码实现： javasist<br>需要了解两个类：Proxy ：代理 InvocationHandler：调用处理程序</p><p>java.lang.reflect.Proxy<br>1<br>  Proxy提供了创建动态代理类和实例的静态方法，它也是由这些方法创建的所有动态代理类的超类。(大白话：这是一个静态类，类里边有方法得到代理类)</p><p>  动态代理类 （以下简称为代理类 ）是一个实现在类创建时在运行时指定的接口列表的类，具有如下所述的行为。 代理接口是由代理类实现的接口。 代理实例是代理类的一个实例。 每个代理实例都有一个关联的调用处理程序对象，它实现了接口</p><p>  通过其代理接口之一的代理实例上的方法调用将被分派到实例调用处理程序的invoke方法，传递代理实例， java.lang.reflect.Method被调用方法的java.lang.reflect.Method对象以及包含参数的类型Object Object的数组。 调用处理程序适当地处理编码方法调用，并且返回的结果将作为方法在代理实例上调用的结果返回。</p><p>代理类具有以下属性：</p><p>代理类是公共的，最终的，而不是抽象的，如果所有代理接口都是公共的。<br>如果任何代理接口是非公开的，代理类是非公开的，最终的，而不是抽象的 。<br>代理类的不合格名称未指定。 然而，以字符串”$Proxy”开头的类名空间应该保留给代理类。<br>一个代理类扩展了java.lang.reflect.Proxy 。<br>代理类完全按照相同的顺序实现其创建时指定的接口。<br>如果一个代理类实现一个非公共接口，那么它将被定义在与该接口相同的包中。 否则，代理类的包也是未指定的。 请注意，程序包密封不会阻止在运行时在特定程序包中成功定义代理类，并且类也不会由同一类加载器定义，并且与特定签名者具有相同的包。<br>由于代理类实现了在其创建时指定的所有接口， getInterfaces在其类对象上调用getInterfaces将返回一个包含相同列表接口的数组（按其创建时指定的顺序），在其类对象上调用getMethods将返回一个数组的方法对象，其中包括这些接口中的所有方法，并调用getMethod将在代理接口中找到可以预期的方法。<br>Proxy.isProxyClass方法将返回true，如果它通过代理类 - 由Proxy.getProxyClass返回的类或由Proxy.newProxyInstance返回的对象的类 - 否则为false。<br>所述java.security.ProtectionDomain代理类的是相同由引导类装载程序装载系统类，如java.lang.Object ，因为是由受信任的系统代码生成代理类的代码。 此保护域通常将被授予java.security.AllPermission 。<br>每个代理类有一个公共构造一个参数，该接口的实现InvocationHandler ，设置调用处理程序的代理实例。 而不必使用反射API来访问公共构造函数，也可以通过调用Proxy.newProxyInstance方法来创建代理实例，该方法将调用Proxy.getProxyClass的操作与调用处理程序一起调用构造函数。<br>17、基于Proxy类和InvocationHandler 实现动态代理<br>17-1.真实的角色<br>public class Host implements Rent{</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span>()</span> &#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;租房&quot;</span>);<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>17-2.被代理的接口<br>public interface Rent {</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rent</span>()</span>;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>17-3.代理 真实的角色 ProxyInvocationHandler<br>public class ProxyInvocationHandler implements InvocationHandler {</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//被代理的接口</span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">Rent</span> rent;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setRent</span>(<span class="hljs-params">Rent rent</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rent</span> = rent;<br>&#125;<br><span class="hljs-comment">//生成得到代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">getProxy</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">newProxyInstance</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getClassLoader</span>(),rent.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getInterfaces</span>(),<span class="hljs-variable language_">this</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理代理实例，并返回结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">proxy</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">method</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">args</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> <span class="hljs-variable">Throwable</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">invoke</span>(<span class="hljs-title class_">Object</span> proxy, <span class="hljs-title class_">Method</span> method, <span class="hljs-title class_">Object</span>[] args) throws <span class="hljs-title class_">Throwable</span> &#123;<br>    <span class="hljs-comment">//动态代理的本质，就是使用反射机制</span><br>    <span class="hljs-comment">//在方法调用前调用</span><br>    <span class="hljs-title function_">seeHouse</span>();<br>    <span class="hljs-title class_">Object</span> result = method.<span class="hljs-title function_">invoke</span>(rent,args);<br>    <span class="hljs-comment">//在方法调用后调用</span><br>    <span class="hljs-title function_">heTong</span>();<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">seeHouse</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;看房子&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">heTong</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;签合同&quot;</span>);<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>}</p><p>17-4.用户<br>public class Client {<br>public static void main(String[] args) {<br>&#x2F;&#x2F;创建真实角色<br>Host host &#x3D; new Host();<br>&#x2F;&#x2F;创建代理角色 不存在<br>ProxyInvocationHandler proxyInvocationHandler &#x3D; new ProxyInvocationHandler();<br>&#x2F;&#x2F;设置要代理的对象<br>proxyInvocationHandler.setRent(host);<br>&#x2F;&#x2F;获取代理对象，并强制转换<br>Rent proxy &#x3D; (Rent)proxyInvocationHandler.getProxy();<br>&#x2F;&#x2F;调用<br>proxy.rent();<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>17-5.输出结果<br>看房子<br>租房<br>签合同<br>1<br>2<br>3<br>18、基于Proxy类和InvocationHandler 实现动态代理 2<br>Proxy：生成动态代理实例的<br>InvocationHandler：调用处理程序并返回结果的</p><p>万能的自动生成代理类</p><p>package cn.bloghut.demo3;</p><p>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Method;<br>import java.lang.reflect.Proxy;</p><p>&#x2F;**</p><ul><li><p>@Classname ProxyInvocationHandler</p></li><li><p>@Description 自动生成代理类</p></li><li><p>@Date 2021&#x2F;5&#x2F;17 15:44</p></li><li><p>@Created by 闲言<br>*&#x2F;<br>public class ProxyInvocationHandler implements InvocationHandler {</p><p>&#x2F;&#x2F;1.被代理的接口<br>public Object target;</p><p>public void setTarget(Object target){<br>this.target &#x3D; target;<br>}</p><p>&#x2F;&#x2F;2.生成得到代理类（代理谁）<br>public Object getProxy(){<br>return Proxy.newProxyInstance(this.getClass().getClassLoader(),<br>target.getClass().getInterfaces(),this);<br>}</p><p>&#x2F;&#x2F;3.处理代理实例，并返回结果（代用代理程序）<br>public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br>&#x2F;&#x2F;动态获取方法名称<br>log(method.getName());<br>Object result &#x3D; method.invoke(target, args);<br>return result;<br>}<br>&#x2F;**</p><ul><li>打印日志方法</li><li>@param msg<br>*&#x2F;<br>public void log(String msg){<br>System.out.println(“[debug]&#x3D;&#x3D;&#x3D;&gt; 执行可”+msg+”方法”);<br>}</li></ul></li></ul><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>public static void main(String[] args) {</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//真实角色</span><br>UserServiceImpl userService = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UserServiceImpl()</span>;<br><span class="hljs-comment">//代理角色，不存在</span><br>ProxyInvocationHandler invocationHandler = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ProxyInvocationHandler()</span>;<br><span class="hljs-comment">//设置要代理的对象</span><br>invocationHandler.set<span class="hljs-constructor">Target(<span class="hljs-params">userService</span>)</span>;<br><span class="hljs-comment">//获取代理对象</span><br>UserService proxy = (UserService)invocationHandler.get<span class="hljs-constructor">Proxy()</span>;<br><span class="hljs-comment">//执行方法</span><br>proxy.query<span class="hljs-literal">()</span>;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>[debug]&#x3D;&#x3D;&#x3D;&gt; 执行可query方法<br>query<br>1<br>2<br>19、动态代理和静态代理总结<br>19-1.静态代理<br>由程序员创建或由特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了<br>静态代理通常只代理一个类<br>静态代理事先知道要代理的是什么<br>代码如下：</p><p>如下， HelloServiceProxy类是代理类，HelloServiceImpl类是委托类，这两个类都实现了HelloService接口。<br>其中HelloServiceImpl类是HelloService接口的真正实现者，而HelloServiceProxy类是通过调用HelloServiceImpl类的相关方法来提供特定服务的。<br>HelloServiceProxy类的echo()方法和getTime()方法会分别调用被代理的HelloServiceImpl对象的echo()方法和getTime()方法，并且在方法调用前后都会执行一些简单的打印操作。<br>由此可见，代理类可以为委托类预处理消息、把消息转发给委托类和事后处理消息等。<br>HelloService接口</p><p>public interface HelloService {<br>String echo(String msg);</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">Date <span class="hljs-built_in">getTime</span>();<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}</p><p>HelloServiceImpl委托类<br>public class HelloServiceImpl implements HelloService {<br>@Override<br>public String echo(String msg) {<br>return “echo:” + msg;<br>}</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Date</span> <span class="hljs-title function_">getTime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>HelloServiceProxy代理类</p><p>public class HelloServiceProxy implements HelloService {</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//表示被代理的HelloService 实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">HelloService</span> helloService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">HelloServiceProxy</span>(<span class="hljs-title class_">HelloService</span> helloService) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">helloService</span> = helloService;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setHelloServiceProxy</span>(<span class="hljs-params">HelloService helloService</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">helloService</span> = helloService;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">echo</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg</span>) &#123;<br>    <span class="hljs-comment">//预处理</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;before calling echo()&quot;</span>);<br>    <span class="hljs-comment">//调用被代理的HelloService 实例的echo()方法</span><br>    <span class="hljs-title class_">String</span> result = helloService.<span class="hljs-title function_">echo</span>(msg);<br>    <span class="hljs-comment">//事后处理</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;after calling echo()&quot;</span>);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Date</span> <span class="hljs-title function_">getTime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//预处理</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;before calling getTime()&quot;</span>);<br>    <span class="hljs-comment">//调用被代理的HelloService 实例的getTime()方法</span><br>    <span class="hljs-title class_">Date</span> date = helloService.<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-comment">//事后处理</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;after calling getTime()&quot;</span>);<br>    <span class="hljs-keyword">return</span> date;<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>测试</p><p>public class Test {<br>public static void main(String[] args) {<br>&#x2F;&#x2F;创建委托类<br>HelloServiceImpl helloService &#x3D; new HelloServiceImpl();<br>&#x2F;&#x2F;创建代理类<br>HelloServiceProxy helloServiceProxy &#x3D; new HelloServiceProxy(helloService);<br>&#x2F;&#x2F;调用方法<br>Date time &#x3D; helloServiceProxy.getTime();<br>System.out.println(time);<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>19-2.动态代理<br>在程序运行时，运用反射机制动态创建而成<br>动态代理是代理一个接口下的多个实现类<br>动态代理不知道要代理什么东西，只有在运行时才知道<br>  与静态代理类对照的是动态代理类，动态代理类的字节码在程序运行时由Java反射机制动态生成，无需程序员手工编写它的源代码。动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java反射机制可以生成任意类型的动态代理类。java.lang.reflect 包中的Proxy类和InvocationHandler接口提供了生成动态代理类的能力。</p><p>  Proxy类提供了创建动态代理类及其实例的静态方法。</p><p>代码如下：</p><p>public static void main(String[] args) {</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//真实角色</span><br>HelloServiceImpl helloService = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HelloServiceImpl()</span>;<br><span class="hljs-comment">//代理角色  不存在</span><br>ProxyInvocationHandler proxyInvocationHandler = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ProxyInvocationHandler()</span>;<br>proxyInvocationHandler.set<span class="hljs-constructor">Target(<span class="hljs-params">helloService</span>)</span>;<br>HelloService proxy = (HelloService)proxyInvocationHandler.get<span class="hljs-constructor">Proxy()</span>;<br><span class="hljs-comment">//执行方法</span><br>String echo = proxy.echo(<span class="hljs-string">&quot;Proxy InvocationHandler 实现动态代理&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(echo);<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>输出</p><p>代理方法执行前调用<br>代理方法执行后调用<br>echo:Proxy InvocationHandler 实现动态代理<br>1<br>2<br>3<br>public class ProxyInvocationHandler implements InvocationHandler {</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//要代理的类</span><br><span class="hljs-keyword">private</span> <span class="hljs-title class_">Object</span> target;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setTarget</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> target</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">target</span> = target;<br>&#125;<br><br><span class="hljs-comment">//获取要代理的实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">getProxy</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">newProxyInstance</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getClassLoader</span>(),target.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getInterfaces</span>(),<span class="hljs-variable language_">this</span>);<br>&#125;<br><br><span class="hljs-comment">//执行代理的方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">invoke</span>(<span class="hljs-title class_">Object</span> proxy, <span class="hljs-title class_">Method</span> method, <span class="hljs-title class_">Object</span>[] args) throws <span class="hljs-title class_">Throwable</span> &#123;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;代理方法执行前调用&quot;</span>);<br>    <span class="hljs-comment">//执行方法</span><br>    <span class="hljs-title class_">Object</span> result = method.<span class="hljs-title function_">invoke</span>(target, args);<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;代理方法执行后调用&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>20、什么是Aop<br>  AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生泛型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>20-1.Aop在Spring中的作用<br>提供声明事务：允许用户自定义切面</p><p>横切关注点：跨越应用程序多个模块的方法或功能。即与我们的业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等。。。<br>切面（ASPECT）：横切关注点 被模块化的特殊对象。即 它是一个类<br>通知（Advice）：切面必须要完成的工作，即 他是类中的一个方法<br>目标（target）：被通知的对象<br>代理（Proxy）：向目标对象应用通知之后创建的对象<br>切入点（PointCut）：切面通知 执行的”地点”的定义<br>连接点（jointPoint）：与切入点匹配的执行点</p><p>Spring Aop中，通过Advice定义横切逻辑，Spring中支持的5种类型的Advice</p><p>21、Aop 实现方式1-基于原生API<br>21-1.导入依赖</p><p>org.aspectj<br>aspectjweaver<br>1.9.4</p><p>1<br>2<br>3<br>4<br>5<br>21-2.在执行UserService实现类的所有方法前，增加日志功能<br>public class Log implements MethodBeforeAdvice {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param method 要执行的目标对象方法</span><br><span class="hljs-comment"> * @param args 参数</span><br><span class="hljs-comment"> * @param target       目标对象</span><br><span class="hljs-comment"> * @throws Throwable</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">before</span>(<span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-keyword">Object</span>[] args, <span class="hljs-keyword">Object</span> target) throws Throwable &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(target.getClass().getName()+&quot; 的 &quot;+<span class="hljs-keyword">method</span>.getName()+&quot;方法执行了&quot;);<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>21-3.在执行UserService实现类的所有方法后，增加日志功能<br>public class AfterLog implements AfterReturningAdvice {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param returnValue 返回值</span><br><span class="hljs-comment"> * @param method</span><br><span class="hljs-comment"> * @param args</span><br><span class="hljs-comment"> * @param target</span><br><span class="hljs-comment"> * @throws Throwable</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> afterReturning(<span class="hljs-keyword">Object</span> returnValue, <span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-keyword">Object</span>[] args, <span class="hljs-keyword">Object</span> target) throws Throwable &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;执行了&quot;+<span class="hljs-keyword">method</span>.getName()+&quot;方法， 返回结果为&quot;+returnValue);<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>21-4.UserService 接口<br>public interface UserService {<br>void add();</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>()</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span>()</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">select</span>()</span>;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>21-5.UserServiceImpl 接口<br>public class UserServiceImpl implements UserService {<br>public void add() {<br>System.out.println(“add”);<br>}</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">delete</span>() &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;delete&quot;);<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">update</span>() &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;update&quot;);<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">select</span>() &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;select&quot;);<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>21-6.bean.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bloghut.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bloghut.log.AfterLog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bloghut.log.Log&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--方式一，使用原生的Api 接口--&gt;</span><br><span class="hljs-comment">&lt;!--配置aop--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1.配置切入点  pointcut 切入点 expression 表达式, execution(要执行的位置!)--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 切入点  在什么地方执行你的代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* cn.bloghut.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--执行环绕增加！--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 21-7.测试类 public class Test { public static void main(String[] args) {</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">    ApplicationContext ac <span class="hljs-operator">=</span> new ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>)<span class="hljs-comment">;</span><br>    //动态代理 代理的是接口<br>    UserService userService <span class="hljs-operator">=</span> (UserService)ac.getBean(<span class="hljs-string">&quot;userService&quot;</span>)<span class="hljs-comment">;</span><br>    userService.add()<span class="hljs-comment">;</span><br><br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>21-7.输出结果<br>cn.bloghut.service.UserServiceImpl 的 add方法执行了<br>add<br>执行了add方法， 返回结果为null<br>1<br>2<br>3<br>22、Aop 实现方式2-切面方式<br>配置文件<br>配置aop<br>配置切入点<br>配置自定义切面要引用的类<br>在哪个方法配置<br>22-1.配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bloghut.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diyPointCut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bloghut.diy.DiyPointCut&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--方式一，使用原生的Api 接口--&gt;</span><br><span class="hljs-comment">&lt;!--配置aop--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--1.配置切入点  pointcut 切入点 expression 表达式, execution(要执行的位置!)--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 切入点  在什么地方执行你的代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* cn.bloghut.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--自定切面 ref 要引用的类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aspect&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diyPointCut&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--方法执行前 method：切入的方法 pointcut：切入点 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--方法执行后--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 22-2.自定义切面 package cn.bloghut.diy;</p><p>&#x2F;**</p><ul><li><p>@Classname DiyPointCut</p></li><li><p>@Description TODO</p></li><li><p>@Date 2021&#x2F;5&#x2F;17 17:23</p></li><li><p>@Created by 闲言<br>*&#x2F;<br>public class DiyPointCut {</p><p>public void before(){<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行之前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>}</p><p>public void after(){<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行之后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>}</p></li></ul><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>22-3.Usersevice 接口<br>package cn.bloghut.service;</p><p>&#x2F;**</p><ul><li><p>@Classname UserService</p></li><li><p>@Description TODO</p></li><li><p>@Date 2021&#x2F;5&#x2F;17 16:51</p></li><li><p>@Created by 闲言<br>*&#x2F;<br>public interface UserService {<br>void add();</p><p>void delete();</p><p>void update();</p><p>void select();</p></li></ul><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>22-4.UserServiceImpl 实现类<br>package cn.bloghut.service;</p><p>&#x2F;**</p><ul><li><p>@Classname UserServiceImpl</p></li><li><p>@Description TODO</p></li><li><p>@Date 2021&#x2F;5&#x2F;17 16:51</p></li><li><p>@Created by 闲言<br>*&#x2F;<br>public class UserServiceImpl implements UserService {<br>public void add() {<br>System.out.println(“add”);<br>}</p><p>public void delete() {<br>System.out.println(“delete”);<br>}</p><p>public void update() {<br>System.out.println(“update”);<br>}</p><p>public void select() {<br>System.out.println(“select”);<br>}</p></li></ul><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>22-5.测试类<br>package cn.bloghut.test;</p><p>import cn.bloghut.service.UserService;<br>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;</p><p>&#x2F;**</p><ul><li><p>@Classname Test2</p></li><li><p>@Description TODO</p></li><li><p>@Date 2021&#x2F;5&#x2F;17 17:24</p></li><li><p>@Created by 闲言<br>*&#x2F;<br>public class Test2 {<br>public static void main(String[] args) {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> ApplicationContext ac = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;bean2.xml&quot;);<br> UserService userService = ac.getBean(&quot;userService&quot;, UserService.<span class="hljs-keyword">class</span>);<br> userService.<span class="hljs-keyword">select</span>();<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>22-6.输出<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行之前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>select<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行之后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>1<br>2<br>3<br>23、Aop 实现方式3-注解方式<br>23-1.bean配置文件<br>注意开启注解aop支持<br><a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy&#x2F;</a></p><p><a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy&#x2F;</a></p></li></ul><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23-2.自定义类 标注这是一个切面 @Aspect &#x2F;&#x2F;标注这个类是一个切面 public class AnnotationPointcut { &#x2F;** * 定义切入点 <em>&#x2F; @Pointcut(“execution(</em> cn.bloghut.service.UserServiceImpl.*(..))”) public void pointcut(){}</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@<span class="hljs-keyword">Before</span>(&quot;pointcut()&quot;)<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span>  <span class="hljs-keyword">before</span>()&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;=================方法执行前=================&quot;);<br>&#125;<br><br>@<span class="hljs-keyword">After</span>(&quot;pointcut()&quot;)<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span>  <span class="hljs-keyword">after</span>()&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;=================方法执行后=================&quot;);<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>23-3.UserService 类：<br>public interface UserService {<br>void add();</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span>()</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span>()</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">select</span>()</span>;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>23-4.UserServiceImpl 类<br>public class UserServiceImpl implements UserService {<br>public void add() {<br>System.out.println(“add”);<br>}</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">delete</span>() &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;delete&quot;);<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">update</span>() &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;update&quot;);<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">select</span>() &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;select&quot;);<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>23-5.测试类<br>public static void main(String[] args) {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ApplicationContext ac = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;bean3.xml&quot;);<br>UserService userService = ac.getBean(&quot;userService&quot;, UserService.<span class="hljs-keyword">class</span>);<br>userService.<span class="hljs-keyword">delete</span>();<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>23-6.输出结果<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>delete<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>1<br>2<br>3<br>24、Spring 整合Mybatis<br>24-1.导入依赖</p><p>junit<br>junit<br>4.13<br>test</p><p>mysql<br>mysql-connector-java<br>5.1.47</p><p>org.mybatis<br>mybatis<br>3.5.2</p><p>org.springframework<br>spring-webmvc<br>5.2.0.RELEASE</p><p>org.springframework<br>spring-jdbc<br>5.1.9.RELEASE</p><p>org.aspectj<br>aspectjweaver<br>1.9.4</p><p>org.aspectj<br>aspectjrt<br>1.8.13</p><p>org.mybatis<br>mybatis-spring<br>2.0.2</p><p>org.projectlombok<br>lombok<br>1.16.10</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>24-2.编写数据源配置</p><p>2.sqlSessionFactory</p><p>3.sqlSessionTemplate</p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 24-3.需要给接口加实现类【】 public class UserMapperImpl implements UserMapper {</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 我们所有的操作，都使用sqlSession 来执行，在原来，现在都使用SQLSessionTemplate</span><br><br><span class="hljs-keyword">private</span> SqlSessionTemplate sqlSession;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSqlSessionTemplate</span>(<span class="hljs-params">SqlSessionTemplate sqlSession</span>)</span>&#123;<br>    <span class="hljs-keyword">this</span>.sqlSession = sqlSession;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span>()</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>).findAll();<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>24-4.将自己写的实现类，注入到容器中</p><p>1<br>2<br>3<br>24-5.测试<br>@Test<br>public void test1(){<br>ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(“applicationContext.xml”);<br>UserMapper userMapper &#x3D; ac.getBean(“userMapper”, UserMapper.class);<br>List all &#x3D; userMapper.findAll();<br>for (User user : all) {<br>System.out.println(user);<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>25、声明式事务<br>25-1.什么是事务<br>事务：把一组业务当成一个业务来做，要么都成功，要么都失败！<br>事务在项目开发中十分的重要，涉及到数据的一致性问题，不能马虎！<br>确保完整性和一致性<br>25-2.事务ACID 原则：<br>原则性<br>一致性<br>隔离性<br>多个业务可能操作同一个资源，防止数据损坏<br>持久性<br>事务一旦提交，无论系统发生什么问题，结果都不会被影响，被持久化的写到存储器中！<br>25-3.为什么需要事务？<br>如果不配置事务，可能存在数据提交不一致的情况下；<br>如果我们不在Spring 中去配置 声明式事务，我们就需要在代码中手动配置事务<br>事务在项目开发中十分重要，涉及到数据的一致性和完整性问题，不容马虎！<br>26、声明式事务代码<br>26-1.spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    DataSource：使用Spring 的数据源 替换Mybatis 的配置 c3p0 dbcp druid</span><br><span class="hljs-comment">    使用Spring 提供的JDBC org.springframework.jdbc.datasource.</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-comment">&lt;!--配置数据源--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--配置sqlSessionFactory 工厂--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--绑定mybatis的配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:cn/bloghut/mapper/*Mapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliases&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cn.bloghut.domain.User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--SqlSessionTemplate 就是sqlSession--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为它没有 set 方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--==============================事务配置开始==============================--&gt;</span><br><br><span class="hljs-comment">&lt;!--配置声明式事务--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--结合AOP 实现事务的织入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span><br>        <span class="hljs-comment">&lt;!--配置事务的传播特性：</span><br><span class="hljs-comment">            propagation</span><br><span class="hljs-comment">            read-only=&quot;true&quot; 只读</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--给所有方法配置事务--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--配置事务切入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切入点--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* cn.bloghut.mapper.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--切入事务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--==============================事务配置结束==============================--&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 26-2.applicationContext.xml</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">import</span> resource=&quot;spring-dao.xml&quot;/&gt;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 26-3.user 实体类 @Data @AllArgsConstructor @NoArgsConstructor public class User {</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> username;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> password;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> perms;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>26-4.UserMaper接口<br>public interface UserMapper {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">List&lt;<span class="hljs-keyword">User</span>&gt; findAll();<br><br><span class="hljs-type">int</span> <span class="hljs-keyword">add</span>(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-keyword">delete</span>(<span class="hljs-type">int</span> id);<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>26-5.UserMapper配置文件</p><p>​     select * from user;   </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">insert</span> id=&quot;add&quot; parameterType=&quot;cn.bloghut.domain.User&quot;&gt;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span>(username,<span class="hljs-keyword">password</span>,perms) <span class="hljs-keyword">values</span> (#&#123;username&#125;,#&#123;<span class="hljs-keyword">password</span>&#125;,#&#123;perms&#125;)<br>&lt;/<span class="hljs-keyword">insert</span>&gt;<br><br>&lt;<span class="hljs-keyword">delete</span> id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;<br><span class="hljs-keyword">delete</span> form <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = #&#123;<span class="hljs-keyword">value</span>&#125;<br>&lt;/<span class="hljs-keyword">delete</span>&gt;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26-6.UserMapper 实现类 public class UserMapperImpl implements UserMapper {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">private SqlSessionTemplate sqlSession;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setSqlSession(SqlSessionTemplate sqlSession) &#123;<br>    this.sqlSession = sqlSession;<br>&#125;<br><br><span class="hljs-built_in">public</span> List&lt;<span class="hljs-keyword">User</span>&gt; findAll() &#123;<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>    <span class="hljs-keyword">user</span>.setUsername(&quot;闲言&quot;);<br>    <span class="hljs-keyword">user</span>.setPassword(&quot;123&quot;);<br>    <span class="hljs-keyword">user</span>.setPerms(&quot;admin&quot;);<br><br>    mapper.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">user</span>);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    mapper.<span class="hljs-keyword">delete</span>(<span class="hljs-number">6</span>);<br>    <span class="hljs-keyword">return</span> mapper.findAll();<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">int</span> <span class="hljs-keyword">add</span>(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>) &#123;<br>    <span class="hljs-keyword">return</span> sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>).<span class="hljs-keyword">add</span>(<span class="hljs-keyword">user</span>);<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">int</span> <span class="hljs-keyword">delete</span>(<span class="hljs-type">int</span> id) &#123;<br>    <span class="hljs-keyword">return</span> sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>).<span class="hljs-keyword">delete</span>(id);<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>26-7.测试<br>public static void main(String[] args) {</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ApplicationContext ac = <span class="hljs-built_in">new</span> ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);<br>UserMapper userMapper = ac.getBean(&quot;userMapper&quot;, UserMapper.<span class="hljs-keyword">class</span>);<br>List&lt;<span class="hljs-keyword">User</span>&gt; users = userMapper.findAll();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> : users) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2022/11/27/Java/SpringMVC/"/>
    <url>/2022/11/27/Java/SpringMVC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>什么是mvc：<strong>Model</strong> <strong>View</strong> <strong>Controller</strong> 模型 -视图-控制器</p><h2 id="1-早些年"><a href="#1-早些年" class="headerlink" title="1.早些年"></a>1.早些年</h2><p><a href="https://img-blog.csdnimg.cn/67ff56873d924de7bd10282d6646759d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/67ff56873d924de7bd10282d6646759d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>  用户直接访问控制层，控制层就可以直接操作数据库；</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">servlet</span><span class="hljs-literal">--</span><span class="hljs-comment">CRUD</span><span class="hljs-literal">---</span><span class="hljs-comment">》数据库</span><br><span class="hljs-comment">弊端：程序十分臃肿，不利于维护</span><br><br><span class="hljs-comment">servlet的代码中：处理请求、响应、处理业务代码、处理逻辑代码</span><br><span class="hljs-comment">程序员调用</span><br><span class="hljs-comment">|</span><br><span class="hljs-comment">JDBC</span><br><span class="hljs-comment">|</span><br><span class="hljs-comment">架构：没有什么是加一层解决不了的！</span><br><br><span class="hljs-comment">JDBC</span> <span class="hljs-literal">--</span> <span class="hljs-comment">MYSQL   Oracle   SqlServer</span><br><span class="hljs-comment">1234567891011</span><br><br><span class="hljs-comment">JAVA</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-MVC三层架构"><a href="#2-MVC三层架构" class="headerlink" title="2.MVC三层架构"></a>2.MVC三层架构</h2><p><a href="https://img-blog.csdnimg.cn/35c0d1127a7e400a810c3ff25ec19a6e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/35c0d1127a7e400a810c3ff25ec19a6e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6Zey6KiAXw==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>  业务处理：业务逻辑（Service）<br>  数据持久层：CRUD（Dao）</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>  展示数据<br>  提供链接发起Servlet请求（a，form，img…）</p><h3 id="Controller-Servlet"><a href="#Controller-Servlet" class="headerlink" title="Controller(Servlet)"></a>Controller(Servlet)</h3><p>  接收用户的请求：(request：请求参数，session信息…)<br>  交给业务层处理对应的代码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">登录<span class="hljs-params">---</span>》接收用户的登录请求<span class="hljs-params">----</span>》处理用户的请求（获取用户登录的参数，name，<span class="hljs-keyword">pwd</span>）<br><span class="hljs-params">---</span>》交给业务层处理登录业务（判断用户名密码是否错误）<br><span class="hljs-params">---</span>》Dao层查询用户名和密码是否正确<br><span class="hljs-params">---</span>》数据库<br><br>JAVA<br></code></pre></td></tr></table></figure><p>Spring IOC 和 AOP</p><p>SpringMVC：SpringMVC的执行流程！<br>SpringMVC：SSM框架整合！</p><p>1、什么是MVC<br>MVC：模型（Model）+View（视图）+控制器（Controller）的简写<br>是将 逻辑、数据、显示 分离的方法来组织代码。<br>MVC 主要的作用是降低视图与业务逻辑间的双向耦合<br>MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异<br>Model（模型）：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p>View（视图）：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p>Controller（控制器）：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p>最典型的MVC就是JSP + servlet + javabean的模式。</p><p>JSP ： 本质就是一个Servlet</p><p>1.1、Model1时代<br>在web早期的开发中，通常采用的都是Model1。<br>Model1中，主要分为两层，视图层和模型层。</p><p>Model1优点：架构简单，比较适合小型项目开发；<br>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p><p>1.2、Model2时代<br>Model2把一个项目分成三部分，包括视图、控制、模型。</p><p>用户发请求<br>Servlet接收请求数据，并调用对应的业务逻辑方法<br>业务处理完毕，返回更新后的数据给servlet<br>servlet转向到JSP，由JSP来渲染页面<br>响应给前端更新后的页面<br>职责分析：<br>Controller：控制器</p><p>取得表单数据<br>调用业务逻辑<br>转向指定的页面<br>Model：模型</p><p>业务逻辑<br>保存数据的状态<br>View：视图</p><p>显示页面</p><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。</p><p>Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><p>1.3、回顾Servlet<br>1.新建一个Maven工程当做父工程！pom依赖！</p><p>junit junit 4.12 org.springframework spring-webmvc 5.1.9.RELEASE javax.servlet servlet-api 2.5 javax.servlet.jsp jsp-api 2.2 javax.servlet jstl 1.2 </p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 2.建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！ 3.导入servlet 和 jsp 的 jar 依赖 </p><p>javax.servlet servlet-api 2.5 </p><p>javax.servlet.jsp jsp-api 2.2 </p><p>1 2 3 4 5 6 7 8 9 10 11 12 4.编写一个Servlet类，用来处理用户的请求</p><p>public class HelloServlet extends HttpServlet {<br>@Override<br>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {<br>&#x2F;&#x2F;获取前端参数<br>String method &#x3D; req.getParameter(“method”);<br>if (“add”.equals(method)){<br>req.getSession().setAttribute(“msg”,”调用了add方法”);<br>}else if (“delete”.equals(method)){<br>req.getSession().setAttribute(“msg”,”调用了delete方法”);<br>}<br>&#x2F;&#x2F;2.调用业务层<br>&#x2F;&#x2F;3.请求转发<br>req.getRequestDispatcher(“&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp”).forward(req,resp);<br>}</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-keyword">do</span><span class="hljs-constructor">Get(<span class="hljs-params">req</span>,<span class="hljs-params">resp</span>)</span>;<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>5.编写test.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建test.jsp</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><h1 id="msg"><a href="#msg" class="headerlink" title="${msg}"></a>${msg}</h1><p>1 2 3 4 5 6 7 8 9 6.在web.xml中注册Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>helloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.bloghut.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>helloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 7.配置Tomcat，并启动测试</p><p>localhost:8080&#x2F;user?method&#x3D;add<br>localhost:8080&#x2F;user?method&#x3D;delete<br>1<br>2<br>2、什么是SpringMVC<br>2.1、概述<br>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>官方文档</p><p><a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a><br>1<br>我们为什么要学习SpringMVC呢?<br>Spring MVC的特点：</p><p>轻量级，简单易学<br>高效 , 基于请求响应的MVC框架<br>与Spring兼容性好，无缝结合<br>约定优于配置<br>功能强大：RESTful、数据验证、格式化、本地化、主题等<br>简洁灵活<br>Spring的web框架围绕DispatcherServlet [ 调度Servlet ] 设计。</p><p>  DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>  正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等…所以我们要学习 .</p><p>最重要的一点还是用的人多 , 使用的公司多</p><p>2.2、中心控制器<br>  Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。<br>  Spring MVC框架像许多其他MVC框架一样, 以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功能，DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)。</p><p>SpringMVC的原理如下图所示：<br>  当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p>2.3、第一个MVC程序<br>1、新建一个Moudle ， springmvc-02-hello ， 添加web的支持！<br>2、确定导入了SpringMVC 的依赖！<br>3、配置web.xml ， 注册DispatcherServlet</p><p>dispatcherServlet<br>org.springframework.web.servlet.DispatcherServlet</p><p>contextConfigLocation<br>classpath:springmvc.xml</p><p>1</p><p>dispatcherServlet<br>&#x2F;</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml<br>说明，这里的名称要求是按照官方来的</p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 5、添加 处理映射器 </p><p>1 6、添加 处理器适配器 </p><p>1 7、添加 视图解析器 </p><p>1 2 3 4 5 6 7 8、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><p>public class HelloController implements Controller {<br>@Override<br>public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {<br>&#x2F;&#x2F;ModelAndView 模型和 视图<br>ModelAndView modelAndView &#x3D; new ModelAndView();<br>&#x2F;&#x2F;封装对象，放到ModelAndView中<br>modelAndView.addObject(“msg”,”hello” );<br>modelAndView.setViewName(“success”);&#x2F;&#x2F;WEB-INF&#x2F;jsp&#x2F;success.jsp<br>return modelAndView;<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>9、将自己的类交给SpringIOC容器，注册bean</p><p>10、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面； &lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><h1 id="msg-1"><a href="#msg-1" class="headerlink" title="${msg}"></a>${msg}</h1><p>1 2 3 4 5 6 7 8 9 10 11 12 11、配置Tomcat 启动测试！</p><p>可能遇到的问题：访问出现404，排查步骤：<br>查看控制台输出，看一下是不是缺少了什么jar包。</p><p>  如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！<br>重启Tomcat 即可解决！</p><p>2.4、SpringMVC执行原理</p><p>  图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p>简要分析执行流程<br>  1.DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p>如上url拆分成三部分：</p><p><a href="http://localhost:8080服务器域名/">http://localhost:8080服务器域名</a><br>SpringMVC部署在服务器上的web站点<br>hello表示控制器<br>  通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p><p>2.HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p><p>3.HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p><p>4.HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p><p>5.HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p><p>6.Handler让具体的Controller执行。</p><p>7.Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p><p>8.HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p><p>9.DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p><p>10.视图解析器将解析的逻辑视图名传给DispatcherServlet。</p><p>11.DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p><p>12.最终视图呈现给用户。</p><p>可以将SpringMVC处理请求的过程分为三部分</p><p>第一步，用户发起请求的时候它会经过一个前端控制器DispatcherServlet<br>DispatcherServlet 根据这个请求找到他的映射器HandlerMapping<br>然后把HandlerExecution 映射器返回回来 DispatcherServlet。<br>第二步，DispatcherServlet 前端控制器根据这个映射器HandlerExecution 再去适配这个映射器HandlerAdapter ，适配到的这个映射器说白了就是一个Controller。<br>由具体的Controller去执行，执行完后会返回一个具体的ModelAndView。<br>第三步，DispatcherServlet 前端控制器通过 ModelAndView 去配置具体的视图的解析器 ViewResolver，视图解析器返回给前端调用。<br>2.5、注解开发<br>1、新建一个Moudle添加web支持！<br>2、由于Maven可能存在资源过滤的问题，我们将配置完善</p><p>src&#x2F;main&#x2F;java **&#x2F;*.properties **&#x2F;*.xml false src&#x2F;main&#x2F;resources **&#x2F;*.properties **&#x2F;*.xml false </p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 3、在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC。 </p><p>junit junit 4.12 org.springframework spring-webmvc 5.1.9.RELEASE javax.servlet servlet-api 2.5 javax.servlet.jsp jsp-api 2.2 javax.servlet jstl 1.2 </p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 4、配置web.xml 注意点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &#x2F; 和 &#x2F;* 的区别：</p><p>&lt; url-pattern &gt; &#x2F; &lt;&#x2F; url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。</p><p>&lt; url-pattern &gt; &#x2F;* &lt;&#x2F; url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p><p>注意web.xml版本问题，要最新版！<br>注册DispatcherServlet<br>关联SpringMVC的配置文件<br>启动级别为1<br>映射路径为 &#x2F; 【不要用&#x2F;*，会404】<br>5、添加Spring MVC配置文件<br>  在resource目录下添加springmvc.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.bloghut.controller&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">支持mvc注解驱动</span><br><span class="hljs-comment">    在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class="hljs-comment">    要想使@RequestMapping注解生效</span><br><span class="hljs-comment">    必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class="hljs-comment">    和一个AnnotationMethodHandlerAdapter实例</span><br><span class="hljs-comment">    这两个实例分别在类级别和方法级别处理。</span><br><span class="hljs-comment">    而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38   在视图解析器中我们把所有的视图都存放在&#x2F;WEB-INF&#x2F;目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><p>让IOC的注解生效<br>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …<br>MVC的注解驱动<br>配置视图解析器<br>6、创建Controller</p><p>package cn.bloghut.controller;</p><p>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.servlet.ModelAndView;</p><p>@Controller<br>public class AnnotationController {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//封装数据</span><br>    model.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br><br>    model.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Hello Annotation&quot;</span>);<br>    <span class="hljs-keyword">return</span> model;<span class="hljs-comment">//会被视图解析器处理</span><br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>@Controller是为了让Spring IOC容器初始化时自动扫描到；<br>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是&#x2F;hello；<br>方法中声明Model类型的参数是为了把Action中的数据带到视图中；<br>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF&#x2F;jsp&#x2F;test.jsp。<br>7、创建视图层<br>  在WEB-INF&#x2F; jsp目录中创建test.jsp ， 视图可以直接取出并展示从Controller带回的信息</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><p>${msg} 1 2 3 4 5 6 7 8 9 8、配置Tomcat运行 配置Tomcat ， 开启服务器 ， 访问 对应的请求路径！</p><p>2.6小结<br>实现步骤其实非常的简单：</p><p>新建一个web项目<br>导入相关jar包<br>编写web.xml , 注册DispatcherServlet<br>编写springmvc配置文件<br>接下来就是去创建对应的控制类 , controller<br>最后完善前端视图和controller之间的对应<br>测试运行调试.<br>使用springMVC必须配置的三大件：<br>1.处理器映射器、2.处理器适配器、3.视图解析器</p><p>  通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可，而省去了大段的xml配置</p><p>3、控制器<br>3.1控制器Controller<br>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。<br>控制器负责解析用户的请求并将其转换为一个模型。<br>在Spring MVC中一个控制器类可以包含多个方法<br>在Spring MVC中，对于Controller的配置方式有很多种<br>3.2实现Controller接口方式<br>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><p>@FunctionalInterface<br>public interface Controller {<br>@Nullable<br>ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception;<br>}<br>1<br>2<br>3<br>4<br>5<br>新建一个model，设置为web项目<br>配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.配置DispatcherServlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spirngmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 配置springmvc配置文件，配置文件中注册请求的bean，name对应请求路径，class对应处理请求的类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bloghut.controller.HelloController&quot;</span>/&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 编写controller类，继承Controller接口</p><p>public class HelloController implements Controller {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    model.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>    model.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Hello Controller&quot;</span>);<br>    <span class="hljs-keyword">return</span> model;<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>编写跳转视图test.jsp</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><p>${msg} 1 2 3 4 5 6 7 8 9 测试</p><p>3.3使用注解@Controller方式<br>@Controller注解类型用于声明Spring类的实例是一个控制器；<br>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><p>&lt;context:component-scan base-package&#x3D;”cn.bloghut.controller”&#x2F;&gt;<br>1<br>2<br>增加一个ControllerTest2类，使用注解实现；</p><p>@Controller<br>public class HelloController2 {</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;hello2&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">hello2</span>(<span class="hljs-params">Model model</span>)&#123;<br><br>    model.<span class="hljs-title function_">addAttribute</span>(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloController2&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>运行tomcat测试</p><p>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</p><p>注解方式是平时使用的最多的方式！</p><p>3.4@RequestMapping<br>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<br>只注解在方法上面</p><p>@Controller<br>public class HelloController2 {</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;t1&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">hello2</span>(<span class="hljs-params">Model model</span>)&#123;<br><br>    model.<span class="hljs-title function_">addAttribute</span>(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloController2&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> &#x2F; t1</p><p>同时注解类与方法</p><p>@Controller<br>@RequestMapping(“c3”)<br>public class HelloController3 {</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;t1&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">t1</span>(<span class="hljs-params">Model model</span>)&#123;<br><br>    model.<span class="hljs-title function_">addAttribute</span>(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloController3&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br><br><span class="hljs-variable constant_">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> &#x2F;admin &#x2F;t1 , 需要先指定类的路径再指定方法的路径；</p><p>4、RestFul风格<br>概念<br>  Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>功能</p><p>资源：互联网所有的事物都可以被抽象为资源<br>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。<br>分别对应 添加、 删除、修改、查询。<br>传统方式操作资源 ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p><a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET<br><a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST<br><a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST<br><a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST<br>1<br>2<br>3<br>4<br>使用RESTful操作资源 ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET<br><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST<br><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT<br><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE<br>1<br>2<br>3<br>4<br>4.1测试<br>1.在新建一个类 RestFulController</p><p>@Controller<br>public class RestFulController {</p><p>}<br>1<br>2<br>3<br>4<br>2.在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><p>@Controller<br>public class RestFulController {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">t1</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> a,<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> b, Model model)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> a + b;<br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果为：&quot;</span> + res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>3.测试请求查看下</p><p>4.思考：使用路径变量的好处？</p><p>使路径变得更加简洁；<br>获得参数更加方便，框架会自动进行类型转换。<br>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是&#x2F;add&#x2F;1&#x2F;a，则路径与方法不匹配，而不会是参数转换失败。</p><p>5.修改下对应的参数类型，再次测试</p><p>@Controller<br>public class RestFulController {<br>@RequestMapping(“&#x2F;add&#x2F;{a}&#x2F;{b}”)<br>public String t1(@PathVariable int a,@PathVariable String b, Model model) {<br>String res &#x3D; a + b;<br>model.addAttribute(“msg”, “结果为：” + res);<br>return “test”;<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p><p>4.2使用method属性指定请求类型<br>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>1.增加一个方法</p><p>&#x2F;**</p><ul><li>删除方法</li><li>@param model</li><li>@return<br>*&#x2F;<br>@RequestMapping(value &#x3D; “hello”,method &#x3D; {RequestMethod.POST})<br>public String delete(Model model){<br>model.addAttribute(“msg”,”post”);<br>return “test”;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>2.我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</li></ul><p>3.如果将POST修改为GET则正常了；</p><p>@RequestMapping(value &#x3D; “hello”,method &#x3D; {RequestMethod.GET})<br>public String delete(Model model){<br>model.addAttribute(“msg”,”post”);<br>return “test”;<br>}<br>1<br>2<br>3<br>4<br>5<br>小结：<br>  Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p>所有的地址栏请求默认都会是 HTTP GET 类型的。<br>方法级别的注解变体有如下几个：组合注解</p><p>@GetMapping<br>@PostMapping<br>@PutMapping<br>@DeleteMapping<br>@PatchMapping<br>1<br>2<br>3<br>4<br>5<br>@GetMapping 是一个组合注解，平时使用的会比较多！<br>它所扮演的是 @RequestMapping(method &#x3D;RequestMethod.GET) 的一个快捷方式。</p><p>5、重定向和转发<br>5.1ModelAndView<br>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .<br>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>对应的controller类</p><p>@Override<br>public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {<br>ModelAndView model &#x3D; new ModelAndView();<br>model.setViewName(“test”);<br>model.addObject(“msg”,”Hello Controller”);<br>return model;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>5.2ServletAPI<br>通过设置ServletAPI , 不需要视图解析器 .</p><p>通过HttpServletResponse进行输出<br>通过HttpServletResponse实现重定向<br>通过HttpServletResponse实现转发<br>&#x2F;**</p><ul><li>往页面输出内容</li><li>@param req</li><li>@param rsp</li><li>@throws IOException<br>*&#x2F;<br>@RequestMapping(“&#x2F;result&#x2F;t1”)<br>public void test1(HttpServletRequest req, HttpServletResponse rsp) throws IOException {<br>rsp.getWriter().println(“Hello,Spring BY servlet API”);<br>}</li></ul><p>&#x2F;**</p><ul><li>演示重定向</li><li>@param req</li><li>@param rsp</li><li>@throws IOException<br>*&#x2F;<br>@RequestMapping(“&#x2F;result&#x2F;t2”)<br>public void test2(HttpServletRequest req, HttpServletResponse rsp) throws IOException {<br>rsp.sendRedirect(“&#x2F;index.jsp”);<br>}</li></ul><p>&#x2F;**</p><ul><li>演示请求转发</li><li>@param req</li><li>@param rsp</li><li>@throws Exception<br>*&#x2F;<br>@RequestMapping(“&#x2F;result&#x2F;t3”)<br>public void test3(HttpServletRequest req, HttpServletResponse rsp) throws Exception {<br>&#x2F;&#x2F;转发<br>req.setAttribute(“msg”,”&#x2F;result&#x2F;t3”);<br>req.getRequestDispatcher(“&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp”).forward(req,rsp);<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>5.3SpringMVC<br>通过SpringMVC来实现转发和重定向 - 无需视图解析器；<br>测试前，需要将视图解析器注释掉</li></ul><p>@RequestMapping(“&#x2F;rsm&#x2F;t1”)<br>public String test1(){<br>&#x2F;&#x2F;转发<br>return “&#x2F;index.jsp”;<br>}</p><p>@RequestMapping(“&#x2F;rsm&#x2F;t2”)<br>public String test2(){<br>&#x2F;&#x2F;转发二<br>return “forward:&#x2F;index.jsp”;<br>}</p><p>@RequestMapping(“&#x2F;rsm&#x2F;t3”)<br>public String test3(){<br>&#x2F;&#x2F;重定向<br>return “redirect:&#x2F;index.jsp”;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>通过SpringMVC来实现转发和重定向 - 有视图解析器；<br>  重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.<br>可以重定向到另外一个请求实现 .</p><p>6、SpringMVC数据处理<br>6.1处理提交数据<br>1、提交的域名称和处理方法的参数名一致<br>提交数据 : <a href="http://localhost:8080/hello?name=xianyan">http://localhost:8080/hello?name=xianyan</a></p><p>@RequestMapping(“t1”)<br>public String t1(String name, Model model, HttpSession session){<br>&#x2F;&#x2F;localhost:8080&#x2F;user&#x2F;t1?name&#x3D;xxx<br>&#x2F;&#x2F;1.接收前端参数<br>System.out.println(“接收到前端的参数为：”+name);<br>&#x2F;&#x2F;2.将返回的结果传递给前端<br>model.addAttribute(“msg”,name);<br>&#x2F;&#x2F;3.视图跳转<br>return “test”;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>2、提交的域名称和处理方法的参数名不一致<br>提交数据 : <a href="http://localhost:8080/hello?username=kuangshen">http://localhost:8080/hello?username=kuangshen</a><br>处理方法 :</p><p>@RequestMapping(“t1”)<br>public String t1(@RequestParam(“username”) String name, Model model, HttpSession session){<br>&#x2F;&#x2F;localhost:8080&#x2F;user&#x2F;t1?name&#x3D;xxx<br>&#x2F;&#x2F;1.接收前端参数<br>System.out.println(“接收到前端的参数为：”+name);<br>&#x2F;&#x2F;2.将返回的结果传递给前端<br>model.addAttribute(“msg”,name);<br>&#x2F;&#x2F;3.视图跳转<br>return “test”;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>3、提交的是一个对象<br>要求提交的表单域和对象的属性名一致 , 参数使用对象即可<br>1、实体类</p><p>@Data<br>public class User {<br>private int id;<br>private String name;<br>private int age;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>2、提交数据的表单 :</p><p>id：<br>姓名：<br>年龄：</p><p>1 2 3 4 5 6 3、处理方法 :</p><p>@PostMapping(“t2”)<br>public String t2(User user){<br>System.out.println(user);<br>return “test”;<br>}<br>1<br>2<br>3<br>4<br>5<br>后台输出 :</p><p>User(id&#x3D;1, name&#x3D;闲言, age&#x3D;18)<br>1<br>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p><p>6.2数据显示到前端<br>第一种 : 通过ModelAndView</p><p>public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {<br>&#x2F;&#x2F;返回一个模型视图对象<br>ModelAndView mv &#x3D; new ModelAndView();<br>mv.addObject(“msg”,”ControllerTest1”);<br>mv.setViewName(“test”);<br>return mv;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>第二种 : 通过ModelMap</p><p>@RequestMapping(“&#x2F;hello”)<br>public String hello(@RequestParam(“username”) String name, ModelMap model){<br>&#x2F;&#x2F;封装要显示到视图中的数据<br>&#x2F;&#x2F;相当于req.setAttribute(“name”,name);<br>model.addAttribute(“name”,name);<br>System.out.println(name);<br>return “hello”;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>第三种 : 通过Model</p><p>@RequestMapping(“&#x2F;ct2&#x2F;hello”)<br>public String hello(@RequestParam(“username”) String name, Model model){<br>&#x2F;&#x2F;封装要显示到视图中的数据<br>&#x2F;&#x2F;相当于req.setAttribute(“name”,name);<br>model.addAttribute(“msg”,name);<br>System.out.println(name);<br>return “test”;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>区别<br>就对于新手而言简单来说使用区别就是：</p><p>Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</p><p>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</p><p>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转</p><p>7、乱码问题<br>1、编写一个提交的表单</p><p>id：<br>姓名：<br>年龄：</p><p>1 2 3 4 5 6 2、后台编写对应的处理类</p><p>@Controller<br>public class Encoding {<br>@PostMapping(“&#x2F;e&#x2F;t1”)<br>public String test1(User user,Model model){<br>model.addAttribute(“msg”,user);<br>return “test”;<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>3、输入中文测试，发现乱码</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置</p><p>修改了xml文件需要重启服务器！</p><p>encoding org.springframework.web.filter.CharacterEncodingFilter encoding utf-8 </p><p>encoding &#x2F;* </p><p>1 2 3 4 5 6 7 8 9 10 11 12 8、JSON 前后端分离时代： 后端部署后端，提供接口，提供数据。         json 前端独立部署，负责渲染后端的数据。</p><p>什么是JSON？</p><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。<br>采用完全独立于编程语言的文本格式来存储和表示数据。<br>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。<br>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<br>  在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><p>对象表示为键值对，数据由逗号分隔<br>花括号保存对象<br>方括号保存数组<br>  JSON 键值对是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键&#x2F;值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><p>{“name”: “xy”}<br>{“age”: “18”}<br>{“sex”: “男”}<br>1<br>2<br>3<br>  JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><p>var obj &#x3D; {a: ‘Hello’, b: ‘World’}; &#x2F;&#x2F;这是一个对象，注意键名也是可以使用引号包裹的<br>var json &#x3D; ‘{“a”: “Hello”, “b”: “World”}’; &#x2F;&#x2F;这是一个 JSON 字符串，本质是一个字符串<br>1<br>2<br>JSON 和 JavaScript 对象互转<br>  要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><p>&#x2F;&#x2F;将json对象转换为javaScript对象<br>var obj &#x3D; JSON.parse(str);<br>console.log(obj);<br>1<br>2<br>3<br>  要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><p>&#x2F;&#x2F;将js对象转换为JSON对象;<br>var str &#x3D; JSON.stringify(user);<br>console.log(str);<br>1<br>2<br>3</p><p>8.1返回JSON数据 Jackson</p><ol><li>Jackson应该是目前比较好的json解析工具了</li><li>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</li><li>我们这里使用Jackson，使用它需要导入它的jar包；</li></ol><p>com.fasterxml.jackson.core jackson-databind 2.9.8 </p><p>1 2 3 4 5 配置SpringMVC需要的配置 web.xml</p><p>dispatcherServlet<br>org.springframework.web.servlet.DispatcherServlet</p><p>contextConfigLocation<br>classpath:spirngmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--编码过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 springmvc-servlet.xml</p><p>&lt;context:component-scan base-package&#x3D;”cn.bloghut.controller”&#x2F;&gt;</p><p><a href="mvc:annotation-driven/">mvc:annotation-driven&#x2F;</a></p><p><a href="mvc:default-servlet-handler/">mvc:default-servlet-handler&#x2F;</a></p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>  这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法<br>编写一个Controller；</p><p>@Controller<br>public class JSONController {<br>&#x2F;**<br>* 加了 @ResponseBody 注解之后，它就不会走视图解析器，会直接返回一个字符串<br>* @return<br>*&#x2F;<br>@ResponseBody<br>@RequestMapping(value &#x3D; “j1”,produces &#x3D; “application&#x2F;json;charset&#x3D;utf-8”)<br>public String json1() throws JsonProcessingException {<br>&#x2F;&#x2F;创建一个对象<br>User user &#x3D; new User(1,”闲言”,18);<br>&#x2F;&#x2F;jackson，ObjectMapper<br>ObjectMapper objectMapper &#x3D; new ObjectMapper();<br>String json &#x3D; objectMapper.writeValueAsString(user);<br>return json;<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>配置Tomcat ， 启动测试一下！</p><p><a href="http://localhost:8080/j1">http://localhost:8080/j1</a><br>1</p><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；<br>通过**@RequestMaping的produces属性**来实现，修改下代码</p><p>@RequestMapping(value &#x3D; “j1”,produces &#x3D; “application&#x2F;json;charset&#x3D;utf-8”)<br>1</p><p>【注意：使用json记得处理乱码问题】</p><p>代码优化</p><p>乱码统一解决</p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！<br>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！<br><a href="mvc:annotation-driven">mvc:annotation-driven</a><br>&lt;mvc:message-converters register-defaults&#x3D;”true”&gt;</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>测试集合输出<br>增加一个新的方法</p><p>@RequestMapping(value &#x3D; “j2”)<br>public String json2() throws JsonProcessingException {<br>&#x2F;&#x2F;创建一个对象<br>List list &#x3D; new ArrayList&lt;&gt;();<br>list.add(new User(1,”闲言1”,18));<br>list.add(new User(2,”闲言2”,18));<br>list.add(new User(3,”闲言3”,18));<br>list.add(new User(4,”闲言4”,18));<br>&#x2F;&#x2F;jackson，ObjectMapper<br>ObjectMapper objectMapper &#x3D; new ObjectMapper();</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//将我们的对象解析成为<span class="hljs-type">json</span>格式<br>String <span class="hljs-type">json</span> = objectMapper.writeValueAsString(list);<br><span class="hljs-keyword">return</span> <span class="hljs-type">json</span>;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>运行结果 :</p><p>输出时间对象<br>增加一个新的方法</p><p>@RequestMapping(value &#x3D; “j3”)<br>public String json3() throws JsonProcessingException {<br>&#x2F;&#x2F;jackson，ObjectMapper<br>ObjectMapper objectMapper &#x3D; new ObjectMapper();<br>Date date &#x3D; new Date();</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//ObjectMapper，时间解析后的格式为：<span class="hljs-type">Timestamp</span><br>String <span class="hljs-type">json</span> = objectMapper.writeValueAsString(<span class="hljs-type">date</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-type">json</span>;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>运行结果 :</p><p>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！<br>Jackson 默认是会把时间转成timestamps形式</p><p>解决方案：取消timestamps形式 ， 自定义时间格式</p><p>@RequestMapping(value &#x3D; “j4”)<br>public String json4() throws JsonProcessingException {<br>&#x2F;&#x2F;jackson，ObjectMapper<br>ObjectMapper objectMapper &#x3D; new ObjectMapper();<br>Date date &#x3D; new Date();<br>&#x2F;&#x2F;自定义日期格式对象<br>SimpleDateFormat sdf &#x3D; new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//ObjectMapper，时间解析后的格式为：<span class="hljs-type">Timestamp</span><br>String <span class="hljs-type">json</span> = objectMapper.writeValueAsString(sdf.format(<span class="hljs-type">date</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-type">json</span>;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>运行结果 :</p><p>8.2返回JSON数据FastJson<br>  fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><p>com.alibaba fastjson 1.2.67 </p><p>1 2 3 4 5 fastjson 三个主要的类：</p><p>JSONObject 代表 json 对象</p><p>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</p><p>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</p><p>JSONArray 代表 json 对象数组</p><p>内部是有List接口中的方法来完成操作的。</p><p>JSON代表 JSONObject和JSONArray的转化</p><p>JSON类源码分析与使用<br>  仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</p><p>@RequestMapping(value &#x3D; “j5”)<br>public String json5() throws JsonProcessingException {<br>&#x2F;&#x2F;创建一个对象<br>User user1 &#x3D; new User(1,”闲言1号”, 18);<br>User user2 &#x3D; new User(2,”闲言2号”, 19);<br>User user3 &#x3D; new User(3,”闲言3号”, 20);<br>User user4 &#x3D; new User(4,”闲言4号”, 21);<br>List list &#x3D; new ArrayList();<br>list.add(user1);<br>list.add(user2);<br>list.add(user3);<br>list.add(user4);<br>System.out.println(“***<em>*</em>*Java对象 转 JSON字符串*******“);<br>String str1 &#x3D; JSON.toJSONString(list);<br>System.out.println(“JSON.toJSONString(list)&#x3D;&#x3D;&gt;”+str1);<br>String str2 &#x3D; JSON.toJSONString(user1);<br>System.out.println(“JSON.toJSONString(user1)&#x3D;&#x3D;&gt;”+str2);</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;\n****** JSON字符串 转 Java对象*******&quot;);<br><span class="hljs-keyword">User</span> jp_user1=<span class="hljs-type">JSON</span>.parseObject(str2,<span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;JSON.parseObject(str2,User.class)==&gt;&quot;+jp_user1);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;\n****** Java对象 转 JSON对象 ******&quot;);<br>JSONObject jsonObject1 = (JSONObject) <span class="hljs-type">JSON</span>.toJSON(user2);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;+jsonObject1.getString(&quot;name&quot;));<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;\n****** JSON对象 转 Java对象 ******&quot;);<br><span class="hljs-keyword">User</span> to_java_user = <span class="hljs-type">JSON</span>.toJavaObject(jsonObject1, <span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;+to_java_user);<br><br><span class="hljs-keyword">return</span> <span class="hljs-type">JSON</span>.toJSONString(list);<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>运行结果 :</p><p>9、Ajax研究<br>9.1简介<br>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。<br>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。<br>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。<br>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。<br>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。<br>就和国内百度的搜索框一样!<br>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。<br>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。<br>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。<br>9.2伪造Ajax<br>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签<br>1、新建一个module， 导入web支持！<br>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><p>请输入要加载的地址：1669544001551</p><h3 id="加载页面位置："><a href="#加载页面位置：" class="headerlink" title="加载页面位置："></a>加载页面位置：</h3><iframe id="iframePosition" style="box-sizing: border-box; width: 631.469px; height: 500px;"></iframe><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 3、使用IDEA开浏览器测试一下！ 利用AJAX可以做：</p><p>注册时，输入用户名自动检测用户是否已经存在。<br>登陆时，提示用户名密码错误<br>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。<br>…等等<br>JQeury 是一个库，js 的大量函数</p><p>9.3jQuery.ajax<br>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。<br>jQuery 提供多个与 AJAX 有关的方法。<br>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。<br>jQuery 不是生产者，而是大自然搬运工。<br>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！<br>jQuery.ajax(…)<br>部分参数：<br>url：请求地址<br>type：请求方式，GET、POST（1.9.0之后用method）<br>headers：请求头<br>data：要发送的数据<br>contentType：即将发送信息至服务器的内容编码类型(默认: “application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8”)<br>async：是否异步<br>timeout：设置请求超时时间（毫秒）<br>beforeSend：发送请求前执行的函数(全局)<br>complete：完成之后执行的回调函数(全局)<br>success：成功之后执行的回调函数(全局)<br>error：失败之后执行的回调函数(全局)<br>accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型<br>dataType：将服务器端返回的数据转换成指定类型<br>“xml”: 将服务器端返回的内容转换成xml格式<br>“text”: 将服务器端返回的内容转换成普通文本格式<br>“html”: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>“script”: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>“json”: 将服务器端返回的内容转换成相应的JavaScript对象<br>“jsonp”: JSONP 格式使用 JSONP 形式调用函数时，如 “myurl?callback&#x3D;?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>9.4使用最原始的HttpServletResponse处理<br>1、配置web.xml 和 springmvc的配置文件【记得静态资源过滤和注解驱动配置上】</p><p>dispatcherServlet<br>org.springframework.web.servlet.DispatcherServlet</p><p>contextConfigLocation<br>classpath:applicationContext.xml</p><p>1</p><p>dispatcherServlet<br>&#x2F;</p><p>encodingFilter<br>org.springframework.web.filter.CharacterEncodingFilter</p><p>encodingUTF-8</p><p>encodingFilter<br>&#x2F;*</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启包扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.bloghut.controller&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--支持注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><span class="hljs-comment">&lt;!--过滤静态资源--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 2、编写一个Controller</p><p>@RequestMapping(“a1”)<br>public void a1(String name , HttpServletResponse response) throws Exception{<br>if (“admin”.equals(name)) {<br>response.getWriter().print(“true”);<br>} else {<br>response.getWriter().print(“false”);<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><p>1<br>2<br>4、编写index.jsp测试</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><p>&lt;%– –%&gt;</p><p>&lt;%–onblur：失去焦点触发事件–%&gt;<br>用户名:<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！</p><p>9.5Ajax异步加载数据<br>实体类user</p><p>@Data<br>@AllArgsConstructor<br>@NoArgsConstructor<br>public class User {<br>private int id;<br>private String name;<br>private int age;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>我们来获取一个集合对象，展示到前端页面</p><p>@RequestMapping(“a2”)<br>public List a2(){<br>List users &#x3D; new ArrayList&lt;&gt;();<br>users.add(new User(1,”闲言1号”,18));<br>users.add(new User(2,”闲言2号”,19));<br>users.add(new User(3,”闲言3号”,20));<br>users.add(new User(4,”闲言4号”,21));<br>return users; &#x2F;&#x2F;由于@RestController注解，将list转成json格式返回<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>前端页面</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><table><thead><tr><th>id</th><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 启动tomcat测试！</p><p>9.6注册提示效果<br>思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；<br>写一个Controller</p><p>@RequestMapping(“&#x2F;a3”)<br>public String ajax3(String name,String pwd){<br>String msg &#x3D; “”;<br>&#x2F;&#x2F;模拟数据库中存在数据<br>if (name!&#x3D;null){<br>if (“admin”.equals(name)){<br>msg &#x3D; “OK”;<br>}else {<br>msg &#x3D; “用户名输入错误”;<br>}<br>}<br>if (pwd!&#x3D;null){<br>if (“123456”.equals(pwd)){<br>msg &#x3D; “OK”;<br>}else {<br>msg &#x3D; “密码输入有误”;<br>}<br>}<br>return msg; &#x2F;&#x2F;由于@RestController注解，将msg转成json格式返回<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>前端页面 login.jsp<br>测试一下效果</p><p>10、拦截器<br>10.1概述<br>  SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p>过滤器与拦截器的区别：拦截器是AOP思想的具体应用。</p><p>过滤器</p><p>servlet规范中的一部分，任何java web工程都可以使用<br>在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源进行拦截<br>拦截器</p><p>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用<br>拦截器只会拦截访问的控制器方法（请求）， 如果访问的是jsp&#x2F;html&#x2F;css&#x2F;image&#x2F;js是不会进行拦截的<br>10.2自定义拦截器<br>那如何实现拦截器呢？<br>想要自定义拦截器，必须实现 HandlerInterceptor 接口。<br>1、新建一个Moudule ， springmvc-07-Interceptor ， 添加web支持<br>2、配置web.xml 和 springmvc-servlet.xml 文件<br>3、编写一个拦截器</p><p>public class MyInterceptor implements HandlerInterceptor {<br>&#x2F;**<br>* 预处理回调方法<br>* @param request<br>* @param response<br>* @param handler<br>* @return<br>* @throws Exception<br>*&#x2F;<br>@Override<br>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;处理前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 后处理回调方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> modelAndView</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;====================================处理后====================================&quot;</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 整个请求处理完毕回调方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ex</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;====================================清理====================================&quot;</span>);<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>4、在springmvc的配置文件中配置拦截器</p><p>&lt;context:component-scan base-package&#x3D;”cn.bloghut.controller”&#x2F;&gt;</p><p><a href="mvc:annotation-driven/">mvc:annotation-driven&#x2F;</a></p><p><a href="mvc:default-servlet-handler/">mvc:default-servlet-handler&#x2F;</a></p><p><a href="mvc:annotation-driven">mvc:annotation-driven</a><br>&lt;mvc:message-converters register-defaults&#x3D;”true”&gt;</p><p><a href="mvc:interceptors">mvc:interceptors</a><br><a href="mvc:interceptor">mvc:interceptor</a></p><p>&lt;mvc:mapping path&#x3D;”&#x2F;**”&#x2F;&gt;</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>5、编写一个Controller，接收请求</p><p>@RequestMapping(“t1”)<br>public String t1() {<br>System.out.println(“t1 请求执行了”);<br>return “t1”;<br>}<br>1<br>2<br>3<br>4<br>5<br>6、前端 index.jsp</p><p><a href="http://localhost:8080/t1">http://localhost:8080/t1</a><br>1<br>7、启动tomcat 测试一下！</p><p>10.3验证用户是否登录 (认证用户)<br>1、有一个登陆页面，需要写一个controller访问页面。<br>2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。返回登陆成功。<br>3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p><p>1、编写一个登陆页面 login.jsp</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><p>${msg}</p><p>用户名<br>密码</p><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2、编写一个Controller处理请求</p><p>@Controller<br>@RequestMapping(“user”)<br>public class LoginController {<br>&#x2F;**<br>* 执行登录逻辑<br>* @param user<br>* @param request<br>* @return<br><em>&#x2F;<br>@PostMapping(“login”)<br>public ModelAndView login(User user, HttpServletRequest request){<br>ModelAndView model &#x3D; new ModelAndView();<br>&#x2F;</em>*<br>* 如果用户名和密码正确，将当前用户存入到session中<br>* 跳转到success页面<br><em>&#x2F;<br>if (“admin”.equals(user.getUsername()) &amp;&amp; “123”.equals(user.getPwd())){<br>request.getSession().setAttribute(“user”,user);<br>model.setViewName(“main”);<br>}else {<br>model.addObject(“msg”,”用户名或密码错误”);<br>model.setViewName(“login”);<br>}<br>return model;<br>}<br>&#x2F;</em>*<br>* 返回登录界面<br>* @return<br><em>&#x2F;<br>@RequestMapping(“jumplogin”)<br>public String jumplogin(){<br>System.out.println(“获取登录界面方法执行了jumplogin&#x3D;&#x3D;”);<br>return “login”;<br>}<br>&#x2F;</em>*<br>* 注销<br>* @param request<br>* @return<br>*&#x2F;<br>@RequestMapping(“logout”)<br>public String logout(HttpServletRequest request){<br>request.getSession().removeAttribute(“user”);<br>return “login”;<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>3、编写一个登陆成功的页面 main.jsp</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><h1 id="SUCCESS"><a href="#SUCCESS" class="headerlink" title="SUCCESS"></a>SUCCESS</h1><h1 id="user"><a href="#user" class="headerlink" title="${user}"></a>${user}</h1><hr><p><a href="https://flork-github-io.vercel.app/2022/10/21/Java/SpringMVC/$%7BpageContext.servletContext.contextPath%7D/user/logout">注销</a> 1 2 3 4 5 6 7 8 9 10 11 12 4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><hr><p>&lt;%–登录–%&gt; <a href="https://flork-github-io.vercel.app/2022/10/21/Java/SpringMVC/$%7BpageContext.request.contextPath%7D/user/jumplogin">登录</a> <a href="https://flork-github-io.vercel.app/2022/10/21/Java/SpringMVC/$%7BpageContext.request.contextPath%7D/user/success">成功页面</a> 1 2 3 4 5 6 7 8 9 10 11 12 13 5、编写用户登录拦截器</p><p>public class LoginInterceptor implements HandlerInterceptor {<br>@Override<br>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {<br>String uri &#x3D; request.getRequestURI();<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;请求的路径为&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》”+uri);<br>&#x2F;&#x2F;如果是登录请求和退出登录请求就放行<br>if (uri.contains(“login”) || uri.contains(“logout”)){<br>return true;<br>}<br>&#x2F;&#x2F;判断什么情况下放行<br>Object user &#x3D; request.getSession().getAttribute(“user”);<br>if (user !&#x3D; null) {<br>return true;<br>}</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">    <span class="hljs-comment">//转发到登录页面</span><br>    request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request,response);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object <span class="hljs-keyword">handler</span>, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>6、在Springmvc的配置文件中注册拦截器</p><p>&lt;context:component-scan base-package&#x3D;”cn.bloghut.controller”&#x2F;&gt;</p><p>&lt;mvc:annotation-driven &#x2F;&gt;</p><p>&lt;mvc:default-servlet-handler &#x2F;&gt;</p><p><a href="mvc:interceptors">mvc:interceptors</a><br><a href="mvc:interceptor">mvc:interceptor</a></p><p>&lt;mvc:mapping path&#x3D;”&#x2F;user&#x2F;**”&#x2F;&gt;</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>11、文件上传与下载<br>11.1基于Springmvc方式文件上传<br>1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><p>commons-fileupload commons-fileupload 1.3.3 </p><p>javax.servlet javax.servlet-api 4.0.1 </p><p>1 2 3 4 5 6 7 8 9 10 11 12 2、配置bean：multipartResolver 【注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误】 </p><p>1 2 3 4 5 6 7 8 CommonsMultipartFile 的 常用方法：</p><p>String getOriginalFilename()：获取上传文件的原名<br>InputStream getInputStream()：获取文件流<br>void transferTo(File dest)：将上传文件保存到一个目录文件中<br>3、编写前端页面</p><p>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;</p><p> 1 2 3 4 5 6 7 8 9 10 11 12 4、编写Controller</p><p>package cn.bloghut.controller;</p><p>import org.springframework.web.bind.annotation.RequestMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.bind.annotation.RestController;<br>import org.springframework.web.multipart.commons.CommonsMultipartFile;</p><p>import javax.servlet.http.HttpServletRequest;<br>import java.io.*;</p><p>&#x2F;**</p><ul><li><p>@Classname UploadControler</p></li><li><p>@Description 文件上传</p></li><li><p>@Date 2021&#x2F;12&#x2F;7 15:53</p></li><li><p>@Created by 闲言<br>*&#x2F;<br>@RestController<br>public class UploadController {<br>&#x2F;&#x2F;@RequestParam(“file”) 将name&#x3D;file控件得到的文件封装成CommonsMultipartFile 对象<br>&#x2F;&#x2F;批量上传CommonsMultipartFile则为数组即可<br>@RequestMapping(“&#x2F;upload”)<br>public String fileUpload(@RequestParam(“file”) CommonsMultipartFile file , HttpServletRequest request) throws IOException {</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gradle"> <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span><br> String uploadFileName = <span class="hljs-keyword">file</span>.getOriginalFilename();<br> <br> <span class="hljs-comment">//如果文件名为空，直接回到首页！</span><br> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(uploadFileName))&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br> &#125;<br> System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;上传文件名 : &quot;</span>+uploadFileName);<br> <br> <span class="hljs-comment">//上传路径保存设置</span><br> String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br> <span class="hljs-comment">//如果路径不存在，创建一个</span><br> <span class="hljs-keyword">File</span> realPath = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(path);<br> <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>     realPath.mkdir();<br> &#125;<br> System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br> <br> InputStream is = <span class="hljs-keyword">file</span>.getInputStream(); <span class="hljs-comment">//文件输入流</span><br> OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span><br> <br> <span class="hljs-comment">//读取写出</span><br> <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br> <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br> <span class="hljs-keyword">while</span> ((len=is.<span class="hljs-keyword">read</span>(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>     os.<span class="hljs-keyword">write</span>(buffer,<span class="hljs-number">0</span>,len);<br>     os.flush();<br> &#125;<br> os.close();<br> is.close();<br> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}</p></li></ul><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>11.2采用file.Transto 来保存上传的文件<br>&#x2F;*</p><ul><li><p>采用file.Transto 来保存上传的文件<br>*&#x2F;<br>@RequestMapping(“&#x2F;upload2”)<br>public String fileUpload2(@RequestParam(“file”) CommonsMultipartFile file, HttpServletRequest request) throws IOException {</p><p>&#x2F;&#x2F;上传路径保存设置<br>String path &#x3D; request.getServletContext().getRealPath(“&#x2F;upload”);<br>File realPath &#x3D; new File(path);<br>if (!realPath.exists()){<br>realPath.mkdir();<br>}<br>&#x2F;&#x2F;上传文件地址<br>System.out.println(“上传文件保存地址：”+realPath);</p><p>&#x2F;&#x2F;通过CommonsMultipartFile的方法直接写文件（注意这个时候）<br>file.transferTo(new File(realPath +”&#x2F;“+ file.getOriginalFilename()));</p><p>return “redirect:&#x2F;index.jsp”;</p></li></ul><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>11.3文件下载<br>文件下载步骤：<br>1、设置 response 响应头<br>2、读取文件 – InputStream<br>3、写出文件 – OutputStream<br>4、执行操作<br>5、关闭流 （先开后关）</p><p>&#x2F;**</p><ul><li><p>文件下载</p></li><li><p>@param response</p></li><li><p>@param request</p></li><li><p>@return</p></li><li><p>@throws Exception<br>*&#x2F;<br>@RequestMapping(value&#x3D;”&#x2F;download”)<br>public String downloads(HttpServletResponse response , HttpServletRequest request) throws Exception{<br>&#x2F;&#x2F;要下载的图片地址<br>String path &#x3D; request.getServletContext().getRealPath(“&#x2F;upload”);<br>String fileName &#x3D; “1.jpg”;</p><p>&#x2F;&#x2F;1、设置response 响应头<br>response.reset(); &#x2F;&#x2F;设置页面不缓存,清空buffer<br>response.setCharacterEncoding(“UTF-8”); &#x2F;&#x2F;字符编码<br>response.setContentType(“multipart&#x2F;form-data”); &#x2F;&#x2F;二进制传输数据<br>&#x2F;&#x2F;设置响应头<br>response.setHeader(“Content-Disposition”,<br>“attachment;fileName&#x3D;”+ URLEncoder.encode(fileName, “UTF-8”));<br>File file &#x3D; new File(path,fileName);<br>&#x2F;&#x2F;2、 读取文件–输入流<br>InputStream input&#x3D;new FileInputStream(file);<br>&#x2F;&#x2F;3、 写出文件–输出流<br>OutputStream out &#x3D; response.getOutputStream();</p><p>byte[] buff &#x3D;new byte[1024];<br>int index&#x3D;0;<br>&#x2F;&#x2F;4、执行 写出操作<br>while((index&#x3D; input.read(buff))!&#x3D; -1){<br>out.write(buff, 0, index);<br>out.flush();<br>}<br>out.close();<br>input.close();<br>return “ok”;</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2022/11/27/Java/Redis/"/>
    <url>/2022/11/27/Java/Redis/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>1、NoSQL<br>1.1为什么要用Nosql<br>先来点鸡汤</p><p>我们现在处于2020年，处于大数据时代；<br>大数据一般的数据库无法进行分析出来了！<br>逼着自己学习！只有不断的学习！这是在这个社会来生存的唯一法则！<br>学习还是为了自己，为了家人！为了让自己过得更加的体面！<br>（1）单机MySQL的年代！</p><p>  90年代，一个基本的网站访问量一般不会太大，单个数据库完全足够！<br>  那个时候，更多的去使用静态网页 Html ~ 服务器根本没有太大的压力！<br>  思考一下，这种情况下：整个网站的瓶颈是什么？</p><p>数据量如果太大、一个机器放不下了！<br>数据的索引 （B+ Tree），一个机器内存也放不下<br>访问量（读写混合），一个服务器承受不了~<br>只要你开始出现以上的三种情况之一，那么你就必须要晋级！</p><p>（2）、Memcached（缓存） + MySQL + 垂直拆分 （读写分离）<br>  网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据的压 力，我们可以使用缓存来保证效率！</p><p>  发展过程： 优化数据结构和索引–&gt; 文件缓存（IO）—&gt; Memcached（当时最热门的技术！）</p><p>1.2分库分表+水平拆分<br>  技术和业务在发展的同时，对人的要求也越来越高！</p><p>  本质：数据库（读、写）</p><p>  早些年MyISAM： 表锁，十分影响效率！高并发下就会出现严重的锁问题<br>转战Innodb：行锁</p><p>  慢慢的就开始使用分库分表来解决写的压力！ MySQL 在哪个年代推出 了表分区！这个并没有多少公司使用！</p><p>  MySQL 的 集群，很好满足那个年代的所有需求！</p><p>如今最近的年代<br>  2010–2020 十年之间，世界已经发生了翻天覆地的变化；（定位，也是一种数据，音乐，热榜！）<br>MySQL 等关系型数据库就不够用了！数据量很多，变化很快~！</p><p>  MySQL 有的使用它来存储一些比较大的文件，博客，图片！数据库表很大，效率就低了！如果有一种数据库来专门处理这种数据,</p><p>  MySQL压力就变得十分小（研究如何处理这些问题！）大数据的IO压力下，表几乎没法更大！</p><p>目前一个基本的互联网项目！</p><p>为什么要用NoSQL！<br>  用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长。</p><p>  这时候我们就需要使用NoSQL数据库的，Nosql 可以很好的处理以上的情况。</p><p>1.3什么是NoSql<br>只要学不死，就往死里学！</p><p>  NoSQL &#x3D; Not Only SQL （不仅仅是SQL）<br>  关系型数据库：表格 ，行 ，列</p><p>  泛指非关系型数据库的，随着web2.0互联网的诞生！传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区！ 暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅 速，Redis是发展最快的，而且是我们当下必须要掌握的一个技术！</p><p>  很多的数据类型用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式！ 不需要多月的操作就可以横向扩展的 ！ Map 使用键值对来控制！</p><p>NoSQL 特点<br>  1、方便扩展（数据之间没有关系，很好扩展！）<br>   2、大数据量高性能（Redis 一秒写8万次，读取11万，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）<br>   3、数据类型是多样型的！（不需要事先设计数据库！随取随用！如果是数据量十分大的表，很多人就无 法设计了！）<br>  4、传统 RDBMS 和 NoSQL<br>传统的 RDBMS</p><ul><li>结构化组织</li><li>SQL</li><li>数据和关系都存在单独的表中</li><li>操作，数据定义语言</li><li>严格的一致性</li><li>基础的事务<br>…<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>NoSQL</li><li>不仅仅是数据</li><li>没有固定的抽象语言</li><li>键值对存储，列存储，文档存储，图形数据库</li><li>最终一致性</li><li>CAP 定理 和BASE （异地多活！）</li><li>高扩展，高可用，高可扩</li><li>…<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>  真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的，阿里巴巴的架构演进！ 技术没有高低之分，就看你如何去使用！（提升内功，思维的提高！）</li></ul><p>1.4阿里巴巴演进分析<br>思考问题：这么多东西难道都是在一个数据库中的吗?</p><p>技术急不得，越是慢慢学，才能越扎实！<br>1<br>大量公司做的都是相同的业务；（竞品协议）</p><p>随着这样的竞争，业务是越来越完善，然后对于开发者的要求也是越来越高！</p><p>敏捷开发，极限编程</p><p>如果你未来相当一个架构师： 没有什么是加一层解决不了的！</p><p>1、商品的基本信息<br>名称<br>价格<br>商家信息：<br>关系数据库可以解决了（MySql Oracle）阿里云的这群疯子</p><p>2.商品的描述、评论（文字比较多）<br>文档性数据库中， Redis 、MongoDB</p><p>3.图片<br>分布式文件系统 fastdfs</p><p>4.商品的关键字（搜索）<br>搜索引擎 solr elasticsearch<br>所有牛逼的人都有一段苦逼的岁月！但是你只要像SB一样的去坚持，终将牛逼！</p><p>5.商品热门的波段信息<br>内存数据库<br>redis<br>6.商品的交易，外部的支付接口<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>大型互联网应用问题：<br>  数据类型太多了<br>  数据源繁多，经常重构</p><p>2、NoSql的四大分类<br>KV键值对：<br>  新浪：Redis<br>  美团：Redis+Tair<br>  阿里、百度：Redis+Memecache</p><p>文档型数据库(bson格式和json 一样)：<br> MongoDB（一般必须要掌握）<br> MongoDB是基于分布式文件存储的数据库，C++编写的，主要用来处理大量的文档！<br> MongoDB是一个介于关系型数据库和非关系型数据库中中间的产品！MongoDB是非关系型数据</p><p>库中功能最丰富，最像关系型数据库的！<br> ConthDB</p><p>列存储数据库<br> HBase<br> 分布式文件系统</p><p>图像关系数据库<br>  不是存储图形的，放的是关系，比如：朋友圈社交网络，广告推荐！</p><p>四者对比</p><p>3、Redis入门<br>3.1Redis 是什么？<br>  1.（Remote Dictionary Server )，即远程字典服务 !<br>  2.是一个开源的使用ANSI C语言编写、<br>  3.支持网络、<br>  4.可基于内存亦可持久化的日志型、<br>  5.Key-Value数据库，<br>  6.并提供多种语言的API。<br>  7.redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave(主从)同步。</p><p>免费和开源！被人们称之为结构化数据库！</p><p>Redis能干嘛？</p><p>  1.内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof）<br>  2.效率高，可以用于高速缓存<br>  3.发布订阅系统<br>  4.地图信息分析<br>  5.计时器、计数器（浏览量！）</p><p>Redis 特性？<br>  1.多样的数据类型<br>  2.持久化<br>  3.集群<br>  4.事务</p><p>3.2windows 安装Redis<br>1、下载安装包</p><p>2、下载完毕得到压缩包：</p><p>3、解压到自己电脑上的环境目录下的就可以的！Redis 十分的小，只有5M</p><p>4、开启Redis，</p><p>5、使用redis客户单来来连接redis</p><p>3.3Linux 安装Redis<br>1、下载安装包！</p><p>2、解压Redis的安装包！</p><p>tar -zxvf redis-6.2.3.tar.gz<br>1</p><p>3、进入解压后的文件，可以看到我们redis的配置文件</p><p>cd redis-6.2.3&#x2F;<br>1</p><p>4、基本的环境安装</p><p>yum install gcc-c++<br>1<br>分开执行</p><p>make &amp;&amp; make install<br>1</p><p>5、redis的默认安装路径</p><p>whereis redis<br>1</p><p>6、将redis配置文件。复制到我们当前目录下</p><p>cp &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis.conf .redis.conf<br>1</p><p>7、redis默认不是后台启动的，修改配置文件！<br>设置为yes</p><p>8、启动Redis服务！</p><p>cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;<br>1<br>&#x2F;home&#x2F;wrz&#x2F;redis-6.2.3&#x2F;redis.conf 这个路径是前面把conf 文件复制的路径</p><p>.&#x2F;redis-server ..&#x2F;redis.conf<br>1</p><p>9、使用redis-cli 进行连接测试！</p><p>redis-cli -p 6379<br>1</p><p>10、查看redis的进程是否开启！</p><p>ps -ef | grep redis<br>1</p><p>11、如何关闭Redis服务呢？<br>关闭redis</p><p>shutdown<br>1<br>退出redis</p><p>exit<br>1</p><p>12、再次查看进程是否存在</p><p>ps -ef | grep redis<br>1</p><p>3.4性能测试<br>redis-benchmark 是一个压力测试工具！<br>官方自带的性能测试工具！<br>redis-benchmark 命令参数</p><p>简单测试</p><p>测试 100个并发连接 100000<br>redis-benchmark -h localhost -p 6379 -c 100 -n 100000<br>1<br>2</p><p>3.5Redis 是单线程的<br>  明白redis 是很快的，官方表示，Redis是基于内存操作的，CPU不是Redis的性能瓶颈，Redis的瓶颈是根据机器的的内存和网络带宽，既可以使用单线程来实现，就使用单线程了！</p><p>Redis 为什么单线程还这么快？<br>  Redis是C语言写的，官方提供数据为100000+的QPS，完全不比同样式使用key-alue的Memecache差！<br>  误区1：高性能的服务器一定是多线程的？<br>  误区2：多线程（CPU上下文会切换！）一定比单线程效率高！<br>  CPU、内存、硬盘的速度要有所了解<br>  CPU》内存》硬盘<br>  核心：Redis 是将所有的数据全部放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！！！），对内存系统来说，如果没有上下文切换效率就是最高的！多次读写都是在一个CPU上的，在内存情况下，这就是最佳的方案！</p><p>4、Redis基本知识<br>redis默认有16个数据库</p><p>默认使用第0个</p><p>可以使用 select 进行切换数据库！</p><p>查看db大小！</p><p>dbsize<br>1</p><p>查看所有的key</p><p>keys *<br>1</p><p>清空当前数据库</p><p>flushdb<br>1</p><p>清空所有数据库</p><p>flushdball<br>1</p><p>5、Redis操作<br>5.1Key操作<br>set<br>get<br>exists<br>move<br>ttl<br>type<br>keys *<br>#设置<br>set XXX</p><p>#获取<br>get XXX</p><p>#判断当前key 是否存在<br>exists XXX</p><p>#移除某个key<br>move xxx 1</p><p>#设置某个key 自动过期<br>expire xxx 过期时间（秒）</p><p>#查看还有多少秒过期<br>ttl xxx<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>127.0.0.1:6379&gt; keys * #查看所有key<br>(empty array)<br>127.0.0.1:6379&gt; set name xianyan #设置key 值 为xianyan<br>OK<br>127.0.0.1:6379&gt; keys *</p><ol><li>“name”<br>127.0.0.1:6379&gt; set age a #设置key 值为a<br>OK<br>127.0.0.1:6379&gt; keys *</li><li>“age”</li><li>“name”<br>127.0.0.1:6379&gt; exists name #判断当前key 是否存在 1 为存在<br>(integer) 1<br>127.0.0.1:6379&gt; move name 1 #移除当前key<br>(integer) 1<br>127.0.0.1:6379&gt; keys *</li><li>“age”<br>127.0.0.1:6379&gt; keys *</li><li>“age”<br>127.0.0.1:6379&gt; set name xy<br>OK<br>127.0.0.1:6379&gt; get name<br>“xy”<br>127.0.0.1:6379&gt; expire name 10 #设置当前key 过期时间，单位为秒<br>(integer) 1<br>127.0.0.1:6379&gt; ttl name #查看该key 还有多长时间过期<br>(integer) 4<br>127.0.0.1:6379&gt; ttl name<br>(integer) 1<br>127.0.0.1:6379&gt; ttl name<br>(integer) -2<br>127.0.0.1:6379&gt; get name<br>(nil)<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>expire 用途：单点登录</li></ol><p>127.0.0.1:6379&gt; keys *</p><ol><li>“age”<br>127.0.0.1:6379&gt; type name #查看当前key 的类型<br>none<br>127.0.0.1:6379&gt; set name xiany<br>OK<br>127.0.0.1:6379&gt; type name<br>string<br>127.0.0.1:6379&gt; type age<br>string<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>5.2String类型<br>90% 的java程序员使用redis 只会使用一个String 类型</li></ol><p>set<br>get<br>mset<br>mget<br>keys *<br>exists<br>append<br>strlen<br>incr<br>decr<br>incrby<br>decrby<br>getrange<br>setrange<br>setex<br>setnx<br>getset<br>127.0.0.1:6379&gt; set key1 v1 #设置值<br>OK<br>127.0.0.1:6379&gt; get key1 #获得值<br>“v1”<br>127.0.0.1:6379&gt; keys * #获得所有key</p><ol><li>“key1”<br>127.0.0.1:6379&gt; exists key1 #判断某个key是否存在<br>(integer) 1<br>127.0.0.1:6379&gt; append key1 “hello” #追加字符串，如果key 不存在，就相当于set key<br>(integer) 7<br>127.0.0.1:6379&gt; get key1<br>“v1hello”<br>127.0.0.1:6379&gt; strlen key1 #获取key 长度<br>(integer) 7<br>127.0.0.1:6379&gt; append key1 ‘xianyan’<br>(integer) 14<br>127.0.0.1:6379&gt; get key1<br>“v1helloxianyan”<br>127.0.0.1:6379&gt; strlen key1<br>(integer) 14<br>127.0.0.1:6379&gt;<br>y<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>自增</li></ol><p>i++<br>步长 i+&#x3D;<br>127.0.0.1:6379&gt; set views 0 #初始浏览量为0<br>OK<br>127.0.0.1:6379&gt; get views<br>“0”<br>127.0.0.1:6379&gt; incr views #自增1 浏览量+1<br>(integer) 1<br>127.0.0.1:6379&gt; incr views<br>(integer) 2<br>127.0.0.1:6379&gt; get views<br>“2”<br>127.0.0.1:6379&gt; decr views #自减1<br>(integer) 1<br>127.0.0.1:6379&gt; decr views<br>(integer) 0<br>127.0.0.1:6379&gt; get views<br>“0”<br>127.0.0.1:6379&gt; incrby views 10 # 设置步长，指定增量<br>(integer) 10<br>127.0.0.1:6379&gt; decrby views 5<br>(integer) 5<br>127.0.0.1:6379&gt; incrby views 10<br>(integer) 15<br>127.0.0.1:6379&gt; decrby views 1<br>(integer) 14<br>127.0.0.1:6379&gt; get views<br>“14”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>字符串范围</p><p>127.0.0.1:6379&gt; set key1 “hello,xy” #设置key1的值<br>OK<br>127.0.0.1:6379&gt; get key1<br>“hello,xy”<br>127.0.0.1:6379&gt; getrange key1 0 3 #截取字符串，区间的【0,1,2,3】<br>“hell”<br>127.0.0.1:6379&gt; getrange key1 0 -1 #获取全部字符串 和get key 是一样的<br>“hello,xy”<br>替换字符串<br>127.0.0.1:6379&gt; set key2 abcdef<br>OK<br>127.0.0.1:6379&gt; get key2<br>“abcdef”<br>127.0.0.1:6379&gt; setrange key2 1 xx #替换指定位置开始的字符串<br>(integer) 6<br>127.0.0.1:6379&gt; get key2<br>“axxdef”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>当前这个值不存在<br>  setex设置过期时间<br>  setnx不存在设置，（在分布式锁中会常常使用！）</p><p>127.0.0.1:6379&gt; setex key3 30 “hello” #设置key3的值为hello，30秒后过期<br>OK<br>127.0.0.1:6379&gt; get key3<br>“hello”<br>127.0.0.1:6379&gt; setnx mykey “redis” #如果mykey不存在，创建mykey<br>(integer) 1<br>127.0.0.1:6379&gt; keys *</p><ol><li>“key1”</li><li>“mykey”</li><li>“key3”</li><li>“key2”<br>127.0.0.1:6379&gt; ttl key3<br>(integer) -2 #过期了，返回-2<br>127.0.0.1:6379&gt; setnx mykey “mongodb” #不存在就设置为 mongodb<br>(integer) 0<br>127.0.0.1:6379&gt; get mykey #这个值存在 所以还是redis<br>“redis”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>批量设置<br>  mset<br>  mget</li></ol><p>127.0.0.1:6379&gt; keys *<br>(empty array)<br>127.0.0.1:6379&gt; mset key1 v1 key2 v2 key3 v3 #同时设置多个值<br>OK<br>127.0.0.1:6379&gt; keys *</p><ol><li>“key1”</li><li>“key3”</li><li>“key2”<br>127.0.0.1:6379&gt; mget key1 key2 key3 #同时获取多个值</li><li>“v1”</li><li>“v2”</li><li>“v3”</li></ol><p>#msetnx 是一个原子性的操作，要么一起成功，要么一起失败！<br>127.0.0.1:6379&gt; msetnx key1 v1 key4 v4<br>(integer) 0<br>127.0.0.1:6379&gt; keys *</p><ol><li>“key1”</li><li>“key3”</li><li>“key2”<br>127.0.0.1:6379&gt; get key4<br>(nil)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>对象</li></ol><p>#设置一个user:1 对象，值为json字符串来保存一个对象！<br>127.0.0.1:6379&gt; set user:1 {name:xy,age:3}<br>OK<br>127.0.0.1:6379&gt; keys *</p><ol><li>“key1”</li><li>“user:1”</li><li>“key3”</li><li>“key2”<br>127.0.0.1:6379&gt; get user:1<br>“{name:xy,age:3}”<br>127.0.0.1:6379&gt;</li></ol><p>127.0.0.1:6379&gt; mset user:2:name xianyan user:2:age 3<br>OK<br>127.0.0.1:6379&gt; get user:2:name<br>“xianyan”<br>127.0.0.1:6379&gt; mget user:2:name user:2:age</p><ol><li>“xianyan”</li><li>“3”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>get set 先获取再设置</li></ol><p>127.0.0.1:6379&gt; getset db redis #获取不存在值，则返回 nil<br>(nil)<br>127.0.0.1:6379&gt; get db<br>“redis”<br>127.0.0.1:6379&gt; getset db “mongodb” #获取原来的值，并设置新的值<br>“redis”<br>127.0.0.1:6379&gt; get db<br>“mongodb”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>数据结构是相同的！<br>String类型的使用场景：value除了是我们的字符串还可以是我们的数字<br>计数器<br>统计多单位的数量<br>分数数<br>对象缓存存储！<br>5.3List（列表）<br>基本数据类型，列表</p><p>  在redis里面，可以把list完成，栈，队列，阻塞队列！<br>  所有的list命令都是用l开头的，Redis不区分大小写</p><p>lpush #将一个值，或者多个值插入到列表的头部<br>lrange<br>lpop<br>rpop<br>llen<br>lrem<br>lrange<br>ltrim<br>rpush<br>rpoplpush<br>linsert<br>lset<br>lindex<br>左</p><p>127.0.0.1:6379&gt; lpush list one #将一个值，或者多个值插入到列表的头部<br>(integer) 1<br>127.0.0.1:6379&gt; lpush list two<br>(integer) 2<br>127.0.0.1:6379&gt; lpush list three<br>(integer) 3<br>127.0.0.1:6379&gt; lrange list 0 -1 #获取list中的值</p><ol><li>“three”</li><li>“two”</li><li>“one”<br>127.0.0.1:6379&gt; lrange list 0 1 #通过区间获取具体的值</li><li>“three”</li><li>“two”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>右</li></ol><p>127.0.0.1:6379&gt; rpush list right #将一个值，或多个值插入到列表的尾部<br>(integer) 4<br>127.0.0.1:6379&gt; lrange list 0 -1</p><ol><li>“three”</li><li>“two”</li><li>“one”</li><li>“right”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>移除</li></ol><p>127.0.0.1:6379&gt; lrange list 0 -1</p><ol><li>“three”</li><li>“two”</li><li>“one”</li><li>“right”<br>127.0.0.1:6379&gt; lpop list #移除列表的第一个元素<br>“three”<br>127.0.0.1:6379&gt; rpop list #移除list的最后一个元素<br>“right”<br>127.0.0.1:6379&gt; lrange list 0 -1</li><li>“two”</li><li>“one”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>通过下标获取list中的某一个值</li></ol><p>127.0.0.1:6379&gt; lrange list 0 -1</p><ol><li>“two”</li><li>“one”<br>127.0.0.1:6379&gt; lindex list 1<br>“one”<br>127.0.0.1:6379&gt; lindex list 0<br>“two”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>获取list长度</li></ol><p>127.0.0.1:6379&gt; llen list #获取list的长度<br>(integer) 2<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>移除指定的值<br>  取关 uid<br>  lrem</p><p>127.0.0.1:6379&gt; lrange list 0 -1</p><ol><li>“four”</li><li>“three”</li><li>“three”</li><li>“two”</li><li>“one”<br>127.0.0.1:6379&gt; lrem list 1 one #移除list集合中指定个数的value<br>(integer) 1<br>127.0.0.1:6379&gt; lrange list 0 -1</li><li>“four”</li><li>“three”</li><li>“three”</li><li>“two”<br>127.0.0.1:6379&gt; lrem list 2 three<br>(integer) 2<br>127.0.0.1:6379&gt; lrange list 0 -1</li><li>“four”</li><li>“two”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>trim 修剪操作：list 截断</li></ol><p>127.0.0.1:6379&gt; lrange mylist 0 -1</p><ol><li>“hello”</li><li>“hello1”</li><li>“hello2”</li><li>“hello3”<br>127.0.0.1:6379&gt; ltrim mylist 1 2 #通过下标，截取指定的长度<br>OK<br>127.0.0.1:6379&gt; lrange mylist 0 -1</li><li>“hello1”</li><li>“hello2”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>list 已经被改变了，截断了只剩下截取额元素！</li></ol><p>移除列表的最后一个元素，并将被移除的元素添加到新的列表中</p><p>127.0.0.1:6379&gt; rpush mylist hello hello1 hello2<br>(integer) 3<br>127.0.0.1:6379&gt; rpoplpush mylist myother #移除列表的最后一个元素，并将被移除的元素添加到新的列表中<br>“hello2”<br>127.0.0.1:6379&gt; lrange mylist 0 -1 #查看当前列表</p><ol><li>“hello”</li><li>“hello1”<br>127.0.0.1:6379&gt; lrange myother 0 -1 #查看目标列表中，确实存在该值</li><li>“hello2”<br>lset 将列表中指定下标的值，替换为另外一个值，更新操作，必须存在要更新的列表<br>127.0.0.1:6379&gt; lpush list value<br>(integer) 1<br>127.0.0.1:6379&gt; lrange list 0 0</li><li>“value”<br>127.0.0.1:6379&gt; lset list 0 item<br>OK<br>127.0.0.1:6379&gt; lrange list 0 0</li><li>“item”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>linsert 插入元素，将某个具体的value 插入到列表中某个元素的前面或者后面</li></ol><p>127.0.0.1:6379&gt; linsert list before “item” “other” #在 item 后面插入元素<br>(integer) 2<br>127.0.0.1:6379&gt; lrange list 0 -1</p><ol><li>“other”</li><li>“item”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>总结：</li></ol><p>它实际上是一个链表，before Node after，list right 都可以插入值<br>如果可以不存在，创建新的链表<br>如果key存在，新增内容<br>如果移除了所有值，空链表，也代表不存在<br>在两边插入或者改动值，效率最高！中间元素，相对来说效率会低一点<br>5.4.Set （集合）<br>set中的值是不能重复的</p><p>sadd<br>smembers<br>sismember<br>scard<br>sadd<br>srem<br>srem<br>srandmember<br>spop<br>smove<br>sdiff<br>sinter<br>sunion<br>127.0.0.1:6379&gt; sadd myset hello #set集合中添加元素<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset xianyan<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset xy<br>(integer) 1</p><p>127.0.0.1:6379&gt; smembers myset #查看指定set 中的所有值</p><ol><li>“xianyan”</li><li>“xy”</li><li>“hello”<br>127.0.0.1:6379&gt; sismember myset hello #判断一个值在不在set 集合中<br>(integer) 1<br>127.0.0.1:6379&gt; sismember myset word<br>(integer) 0<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>scard 获取set 集合中元素的个数</li></ol><p>127.0.0.1:6379&gt; scard myset<br>(integer) 3<br>127.0.0.1:6379&gt; sadd myset xy<br>(integer) 0<br>127.0.0.1:6379&gt; sadd myset xy2<br>(integer) 1<br>127.0.0.1:6379&gt; scard myset<br>(integer) 4<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>srem 移除set 集合中的指定元素</p><p>127.0.0.1:6379&gt; srem myset hello<br>(integer) 1<br>127.0.0.1:6379&gt; scard myset<br>(integer) 3<br>127.0.0.1:6379&gt; smembers myset</p><ol><li>“xy2”</li><li>“xianyan”</li><li>“xy”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>set 无序，不重复集合<br>抽随机</li></ol><p>127.0.0.1:6379&gt; srandmember myset #随机抽选出一个元素<br>“xianyan”<br>127.0.0.1:6379&gt; srandmember myset<br>“xianyan”<br>127.0.0.1:6379&gt; srandmember myset<br>“xy2”<br>127.0.0.1:6379&gt; srandmember myset<br>“xianyan”<br>127.0.0.1:6379&gt; srandmember myset<br>“xy2”</p><p>127.0.0.1:6379&gt; srandmember myset 2 #随机抽选出指定个数的元素</p><ol><li>“xy2”</li><li>“xy”<br>127.0.0.1:6379&gt; srandmember myset 2</li><li>“xy2”</li><li>“xianyan”<br>127.0.0.1:6379&gt; srandmember myset 2</li><li>“xy2”</li><li>“xianyan”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>删除指定的key<br>随机删除一个key</li></ol><p>127.0.0.1:6379&gt; smembers myset</p><ol><li>“xy2”</li><li>“xianyan”</li><li>“xy”<br>127.0.0.1:6379&gt; spop myset #随机删除一个set 集合中的元素<br>“xy2”<br>127.0.0.1:6379&gt; spop myset<br>“xy”<br>127.0.0.1:6379&gt; smembers myset</li><li>“xianyan”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>将一个指定的值，移动到另外一个set 集合</li></ol><p>127.0.0.1:6379&gt; smembers myset</p><ol><li>“world”</li><li>“xy”</li><li>“hello”<br>127.0.0.1:6379&gt; smembers myset2</li><li>“set2”<br>127.0.0.1:6379&gt; smove myset myset2 xy<br>(integer) 1<br>127.0.0.1:6379&gt; smembers myset</li><li>“world”</li><li>“hello”<br>127.0.0.1:6379&gt; smembers myset2</li><li>“xy”</li><li>“set2”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>微博，B站，共同关注！（并集）<br>数字集合类：<br>  1.差集<br>  2.交集<br>  3.并集</li></ol><p>127.0.0.1:6379&gt; sadd key1 a<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key1 b<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key1 c<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key2 c<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key2 d<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key2 e<br>(integer) 1<br>127.0.0.1:6379&gt; sdiff key1 key2 #差集</p><ol><li>“b”</li><li>“a”<br>127.0.0.1:6379&gt; sinter key1 key2 #交集 共同好友这样实现</li><li>“c”<br>127.0.0.1:6379&gt; sunion key1 key2 #并集</li><li>“c”</li><li>“e”</li><li>“b”</li><li>“a”</li><li>“d”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>微博，A用户将所有关注的人放在一个set 集合中，将它的粉丝也放在一个集合中，<br>共同关注<br>共同爱好<br>二度好友（六度分隔理论）<br>推荐好友<br>5.5Hash（map集合）<br>Map集合，key-map！时候这种值是个map 集合！</li></ol><p>hset<br>hmset<br>hmget<br>hgetall<br>hdel<br>hlen<br>hexists<br>hkeys<br>hincrby<br>hsetnx<br>127.0.0.1:6379&gt; hset myhash file1 xy #set 一个具体key -value<br>(integer) 1<br>127.0.0.1:6379&gt; hget myhash file1 #获取一个字段值<br>“xy”<br>127.0.0.1:6379&gt; hmset myhash file1 hello filed2 world #set 多个 key-value<br>OK<br>127.0.0.1:6379&gt; hmget myhash file1 filed2 #获取多个字段值</p><ol><li>“hello”</li><li>“world”<br>127.0.0.1:6379&gt; hgetall myhash #获取全部数据</li><li>“file1”</li><li>“hello”</li><li>“filed2”</li><li>“world”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>删除</li></ol><p>127.0.0.1:6379&gt; hgetall myhash</p><ol><li>“file1”</li><li>“hello”</li><li>“filed2”</li><li>“world”<br>127.0.0.1:6379&gt; hdel myhash filed2 #删除hash指定key字段！对应的value消失了<br>(integer) 1<br>127.0.0.1:6379&gt; hgetall myhash</li><li>“file1”</li><li>“hello”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>获取hash表的字段长度</li></ol><p>127.0.0.1:6379&gt; hlen myhash<br>(integer) 1<br>127.0.0.1:6379&gt; hmset myhash file1 hello file2 world<br>OK<br>127.0.0.1:6379&gt; hgetall myhash</p><ol><li>“file1”</li><li>“hello”</li><li>“file2”</li><li>“world”<br>127.0.0.1:6379&gt;<br>127.0.0.1:6379&gt; hlen myhash<br>(integer) 2<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>判断hash 中指定字段是否存在！</li></ol><p>127.0.0.1:6379&gt; hexists myhash file1<br>(integer) 1<br>127.0.0.1:6379&gt; hexists myhash file3<br>(integer) 0<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>只获得所有的 key<br>只获得所有的value</p><p>127.0.0.1:6379&gt; hkeys myhash</p><ol><li>“file1”</li><li>“file2”<br>127.0.0.1:6379&gt; hvals myhash</li><li>“hello”</li><li>“world”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>incr<br>decr</li></ol><p>127.0.0.1:6379&gt; hset myhash file3 5 #指定数量<br>(integer) 1<br>127.0.0.1:6379&gt; hincrby myhash file3 1<br>(integer) 6<br>127.0.0.1:6379&gt; hincrby myhash file3 -1<br>(integer) 5<br>127.0.0.1:6379&gt; hsetnx myhash file4 hello #如果不存在则可以设置<br>(integer) 1<br>127.0.0.1:6379&gt; hsetnx myhash file4 word #如果存在则不能设置<br>(integer) 0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>  hash变更的数据user name age ，尤其是用户信息之类，经常变动的信息！hash 更适合对象的存储，String 更适合字符串</p><p>127.0.0.1:6379&gt; hset user:1 name xy<br>(integer) 1<br>127.0.0.1:6379&gt; keys *</p><ol><li>“user:1”</li><li>“myhash”<br>127.0.0.1:6379&gt; hget user:1 name<br>“xy”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>5.6Zset（有序集合）<br>在set的基础上，增加一个值，set k1 v1<br>zset k1 score1 v1</li></ol><p>zadd<br>zrange<br>zrangebyscore<br>zrem<br>zcount<br>zrevrange<br>127.0.0.1:6379&gt; zadd myset 1 one #添加一个值<br>(integer) 1<br>127.0.0.1:6379&gt;<br>127.0.0.1:6379&gt; zadd myset 2 two 3 three #添加多个值<br>(integer) 2<br>127.0.0.1:6379&gt; zrange myset 0 -1</p><ol><li>“one”</li><li>“two”</li><li>“three”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>排序实现</li></ol><p>127.0.0.1:6379&gt; zrange myset 0 -1</p><ol><li>“one”</li><li>“two”</li><li>“three”<br>127.0.0.1:6379&gt; zadd salary 2500 xiaohuang #添加三个用户<br>(integer) 1<br>127.0.0.1:6379&gt; zadd salary 5000 zhangsan<br>(integer) 1<br>127.0.0.1:6379&gt; zadd salary 500 xy<br>(integer) 1<br>127.0.0.1:6379&gt; zrangebyscore salary -inf +inf #显示所有用户，从小到大</li><li>“xy”</li><li>“xiaohuang”</li><li>“zhangsan”<br>127.0.0.1:6379&gt; zrangebyscore salary 0 -1<br>(empty array)<br>127.0.0.1:6379&gt; zrangebyscore salary 0 -1 with scores<br>(error) ERR syntax error<br>127.0.0.1:6379&gt; zrangebyscore salary 0 -1 withscores<br>(empty array)<br>127.0.0.1:6379&gt; zrangebyscore salary +inf -inf<br>(empty array)<br>127.0.0.1:6379&gt; zrangebyscore salary -inf +inf</li><li>“xy”</li><li>“xiaohuang”</li><li>“zhangsan”<br>127.0.0.1:6379&gt; zrangebyscore salary 0 -1<br>(empty array)</li></ol><p>#显示全部的用户并附带成绩<br>127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores</p><ol><li>“xy”</li><li>“500”</li><li>“xiaohuang”</li><li>“2500”</li><li>“zhangsan”</li><li>“5000”</li></ol><p>#显示工资小于2500员工的升序排序<br>127.0.0.1:6379&gt; zrangebyscore salary -inf 2500 withscores</p><ol><li>“xy”</li><li>“500”</li><li>“xiaohuang”</li><li>“2500”<br>127.0.0.1:6379&gt; zrangebyscore salary +inf -inf<br>(empty array)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>移除rem中的元素</li></ol><p>127.0.0.1:6379&gt; zrange salary 0 -1</p><ol><li>“xy”</li><li>“xiaohuang”</li><li>“zhangsan”<br>127.0.0.1:6379&gt; zrem salary xiaohuang #移除有序集合中的指定元素<br>(integer) 1<br>127.0.0.1:6379&gt; zrange salary 0 -1</li><li>“xy”</li><li>“zhangsan”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>获取有序集合中的个数</li></ol><p>127.0.0.1:6379&gt; zcard salary<br>(integer) 2<br>1<br>2<br>从大到小进行排序</p><p>127.0.0.1:6379&gt; zrevrange salary 0 -1 #从大到小进行排序</p><ol><li>“zhangsan”</li><li>“xy”<br>1<br>2<br>3<br>zcount 获取指定区间的成员数量</li></ol><p>127.0.0.1:6379&gt; zadd myset 1 hello<br>(integer) 1<br>127.0.0.1:6379&gt; zadd myset 2 world 3 xy #获取指定区间的成员数量<br>(integer) 2<br>127.0.0.1:6379&gt; zcount myset 1 3<br>(integer) 3<br>127.0.0.1:6379&gt; zcount myset 1 2<br>(integer) 2<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>案例思路：<br>  set 排序 存储班级成绩表，工资表排序！<br>  普通消息，1，重要消息2，带权重判断</p><p>6、geospatial 地理位置<br>  朋友的定位，附近的人，打车距离计算？<br>  Redis 的Geo 在Redis 3.2版本 就推出了！这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！</p><p>只有六个命令</p><p>添加地理位置<br>规则：两级无法直接添加，一般下载城市数据，直接通过java程序 一次性导入！<br>参数 key 值（）<br>geoadd</p><p>127.0.0.1:6379&gt; geoadd china:city: 116.40 39.90 beijing<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city: 121.47 31.23 shanghai<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city: 106.50 29.53 chongqing<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city: 114.08 22.53 shenzhen<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian<br>(integer) 2<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>geopos<br>获取当前定位，一定是一个坐标值！</p><p>127.0.0.1:6379&gt; geopos china:city: beijing #获取指定的城市的经度和纬度！</p><ol><li><ol><li>“116.39999896287918091”</li><li>“39.90000009167092543”<br>127.0.0.1:6379&gt; geopos china:city: shanghai</li></ol></li><li><ol><li>“121.47000163793563843”</li><li>“31.22999903975783553”<br>127.0.0.1:6379&gt; geopos china:city: chongqing shenzhen hangzhou</li></ol></li><li><ol><li>“106.49999767541885376”</li><li>“29.52999957900659211”</li></ol></li><li><ol><li>“114.08000081777572632”</li><li>“22.52999956292396888”</li></ol></li><li>(nil)<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>两人之间的距离</li></ol><p>返回两个给定位置之间的距离。<br>如果两个位置之间的其中一个不存在， 那么命令返回空值。<br>指定单位的参数 unit 必须是以下单位的其中一个：<br>m 表示单位为米。<br>km 表示单位为千米。<br>mi 表示单位为英里。<br>ft 表示单位为英尺。<br>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位。</p><h1 id="查看重庆到北京的直线距离"><a href="#查看重庆到北京的直线距离" class="headerlink" title="查看重庆到北京的直线距离"></a>查看重庆到北京的直线距离</h1><p>127.0.0.1:6379&gt; geodist china:city: chongqing beijing km<br>“1464.0708”</p><h1 id="查看北京到上海的直线距离"><a href="#查看北京到上海的直线距离" class="headerlink" title="查看北京到上海的直线距离"></a>查看北京到上海的直线距离</h1><p>127.0.0.1:6379&gt; geodist china:city: beijing shanghai km<br>“1067.3788”<br>1<br>2<br>3<br>4<br>5<br>6<br>  georadius 以给定的经纬度为中心，找出某一半内的元素<br>  我附近的人？（获取所有附近的人的地址，定位！） 通过半径来查询！<br>  所有的数据应该都录入：China:city: 才会让结构更加请求！</p><p>#以110 30 这个经纬度为中心，寻找方圆1000km内的城市<br>127.0.0.1:6379&gt; georadius china:city: 110 30 1000 km</p><ol><li>“chongqing”</li><li>“shenzhen”<br>127.0.0.1:6379&gt; georadius china:city: 110 30 600 km</li><li>“chongqing”<br>127.0.0.1:6379&gt; georadius china:city: 110 30 500 km</li><li>“chongqing”</li></ol><h1 id="显示到中间距离的位置"><a href="#显示到中间距离的位置" class="headerlink" title="显示到中间距离的位置"></a>显示到中间距离的位置</h1><p>127.0.0.1:6379&gt; georadius china:city: 110 30 500 km withdist</p><ol><li><ol><li>“chongqing”</li><li>“341.9374”</li></ol></li></ol><h1 id="显示他人的定位信息"><a href="#显示他人的定位信息" class="headerlink" title="显示他人的定位信息"></a>显示他人的定位信息</h1><p>127.0.0.1:6379&gt; georadius china:city: 110 30 1000 km withdist withcoord</p><ol><li><ol><li>“chongqing”</li><li>“341.9374”</li><li><ol><li>“106.49999767541885376”</li><li>“29.52999957900659211”</li></ol></li></ol></li><li><ol><li>“shenzhen”</li><li>“924.9425”</li><li><ol><li>“114.08000081777572632”</li><li>“22.52999956292396888”<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>获取指定数量的人，200</li></ol></li></ol></li></ol><h1 id="筛选出指定的结果"><a href="#筛选出指定的结果" class="headerlink" title="筛选出指定的结果"></a>筛选出指定的结果</h1><p>127.0.0.1:6379&gt; georadius china:city: 110 30 1000 km withdist withcoord count 1</p><ol><li><ol><li>“chongqing”</li><li>“341.9374”</li><li><ol><li>“106.49999767541885376”</li><li>“29.52999957900659211”<br>127.0.0.1:6379&gt; georadius china:city: 110 30 1000 km withdist withcoord count 2</li></ol></li></ol></li><li><ol><li>“chongqing”</li><li>“341.9374”</li><li><ol><li>“106.49999767541885376”</li><li>“29.52999957900659211”</li></ol></li></ol></li><li><ol><li>“shenzhen”</li><li>“924.9425”</li><li><ol><li>“114.08000081777572632”</li><li>“22.52999956292396888”<br>127.0.0.1:6379&gt; georadius china:city: 110 30 1000 km withdist withcoord count 3</li></ol></li></ol></li><li><ol><li>“chongqing”</li><li>“341.9374”</li><li><ol><li>“106.49999767541885376”</li><li>“29.52999957900659211”</li></ol></li></ol></li><li><ol><li>“shenzhen”</li><li>“924.9425”</li><li><ol><li>“114.08000081777572632”</li><li>“22.52999956292396888”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>georadiusbymember<br>  这个命令和 GEORADIUS 命令一样， 都可以找出位于指定范围内的元素， 但是 GEORADIUSBYMEMBER 的中心点是由给定的位置元素决定的， 而不是像 GEORADIUS 那样， 使用输入的经度和纬度来决定中心点，指定成员的位置被用作查询的中心</li></ol></li></ol></li></ol><p>#找出位于指定元素周围的<br>127.0.0.1:6379&gt; georadiusbymember china:city: beijing 1000 km</p><ol><li>“beijing”<br>127.0.0.1:6379&gt; georadiusbymember china:city: shanghai 400 km</li><li>“shanghai”<br>1<br>2<br>3<br>4<br>5<br>7、Hyperloglog<br>什么是基数?<br>  A{1,3,5,6,8,7}<br>  B{1,3,5,7,8}<br>  基数（不重复的数）&#x3D;5，可以接受误差！</li></ol><p>简介<br>  Redis2.8.9版本更新了Hyperloglog 数据结构！<br>  Redis Hyperloglog 基数统计的算法！<br>  优点：占用的内存是固定的，2^64 不同的元素技术，只需要12kb内存！如果要从内存角度来比较的话 Hyperloglog 首选！</p><p>网页的UV（一个人访问网站多次，但是还算是一个人）</p><p>  传统方式，set 保存用户的id，然后就可以统计set 中的元素 数量作为判断！<br>  这个方式如果保存大量的用户id，就会比较麻烦（占内存）我们的目的是为了计数，而不是保存用户id；<br>  0.81%,可以忽略不计！</p><p>127.0.0.1:6379&gt; pfadd mykey a b c d e f g #创建第一组元素 mykey<br>(integer) 1<br>127.0.0.1:6379&gt; pfcount mykey #统计mykey 元素基数 数量<br>(integer) 7<br>127.0.0.1:6379&gt; pfadd mykey2 i j k l m n o #创建第一组元素 mykey2<br>(integer) 1<br>127.0.0.1:6379&gt; pfcount mykey2<br>(integer) 7<br>127.0.0.1:6379&gt; pfmerge mykey3 mykey mykey2 #合并 两组 mykey mykey2 &#x3D; mykey3<br>OK<br>127.0.0.1:6379&gt; pfcount mykey3 #查看并集数量<br>(integer) 14<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>如果允许容错，那么一定使用Hyperloglog！<br>如果不允许容错，就是用set 或者自己的数据类型就可以了</p><p>8、Bitmap<br>  在开发中都有十分多的应用场景，学习了，就是多一个思路！<br>  技多不压身！<br>  只要学不死，就往死里学！</p><p>位存储<br>  统计用户信息，活跃，不活跃，登录，未登录，打卡，未打卡，两个状态的都可以用Bitmap！<br>  Bitmaps 位图，数据结构！都是操作二进制韦来进行记录，就只有0和1两个状态！</p><p>  使用Bitmaps 来记录周一到周日的打卡！<br>  周一：0<br>  周二：0</p><p>查看某一天是否有打卡</p><p>统计操作，查看打卡的天数<br>只有两天打卡</p><p>9、事务及监控<br>9.1事务<br>要么同时成功，要么同时失败，原子性！</p><p>Redis 单条命令是保证原子性的，但是Redis 事务是不保证原子性的！<br>Redis 事务没有隔离级别的概念！</p><p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！</p><p>  Redis 事务本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行的过程中，会顺序执行</p><p>一次性<br>顺序性<br>排他性<br>执行一些列的命令！<br>——-队列 set set set 执行————<br>1<br>Redis 的事务</p><p>开启事务（multi）<br>命令入列<br>执行事务（exec）<br>锁：redis 可以实现乐观锁</p><p>正常执行事务</p><p>127.0.0.1:6379&gt; multi #开启事务<br>OK</p><h1 id="命令入队"><a href="#命令入队" class="headerlink" title="命令入队"></a>命令入队</h1><p>127.0.0.1:6379&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; get k2<br>QUEUED<br>127.0.0.1:6379&gt; set k3 v3<br>QUEUED<br>127.0.0.1:6379&gt; exec #执行事务，执行完事务结束了，如果还想执行，需要重新开启事务<br>#执行事务结果</p><ol><li>OK</li><li>OK</li><li>“v2”</li><li>OK<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>放弃事务</li></ol><p>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; set k4 v4<br>QUEUED<br>127.0.0.1:6379&gt; discard #放弃事务，一旦放弃，事务队列中命令都不会执行了<br>OK<br>127.0.0.1:6379&gt; get k4<br>(nil)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>  编译型异常（代码问题！命令有错）事务中所有的命令都不会被执行！</p><p>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; set k3 v3<br>QUEUED<br>127.0.0.1:6379&gt; getset k3 #错误命令<br>(error) ERR wrong number of arguments for ‘getset’ command<br>127.0.0.1:6379&gt; set k4 v4<br>QUEUED<br>127.0.0.1:6379&gt; set k5 v5<br>QUEUED<br>127.0.0.1:6379&gt; exec #执行事务报错的<br>(error) EXECABORT Transaction discarded because of previous errors.<br>127.0.0.1:6379&gt; get k5 #所有的命令都不会被执行<br>(nil)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>  运行时异常（1&#x2F;0）,如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行，错误命令抛出异常！</p><p>127.0.0.1:6379&gt; set k1 “v1” #存入String 值<br>OK<br>127.0.0.1:6379&gt; multi #开启事务<br>OK<br>127.0.0.1:6379&gt; incr k1 #自增1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; set k3 v3<br>QUEUED<br>127.0.0.1:6379&gt; get k3<br>QUEUED<br>127.0.0.1:6379&gt; exec</p><ol><li>(error) ERR value is not an integer or out of range</li><li>OK #虽然第一条命令报错了，其他命令正常执行</li><li>OK</li><li>“v3”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>9.2监控<br>悲观锁：<br>  很悲观，认为什么时候都会出现问题！</li></ol><p>乐观锁<br>  很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间期间是否有人修改过这个数据，version ！（判断version）</p><p>Redis 乐观锁</p><p>获取version（不加锁）<br>更新的时候比较 version，<br>程序里边并发的时候一般都使用乐观锁，而不会使用悲观锁，因为无论做什么都会加锁，悲观锁这个效率极其低下， 乐观锁相对来说性能相对会好很多。<br>Redis 监视测试</p><p>127.0.0.1:6379&gt; set money 100<br>OK<br>127.0.0.1:6379&gt; set out 0<br>OK<br>127.0.0.1:6379&gt; watch money #监视money 对象<br>OK<br>#事务正常结束，数据期间没有发生变动，这个时候正常执行成功<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; decrby money 20<br>QUEUED<br>127.0.0.1:6379&gt; incrby out 20<br>QUEUED<br>127.0.0.1:6379&gt; exec</p><ol><li>(integer) 80</li><li>(integer) 20<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>测试多线程修修改值，监视，使用watch可以当做redis的乐观锁操作</li></ol><p>线程1</p><p>127.0.0.1:6379&gt; watch money #监视<br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; decrby money 10<br>QUEUED<br>127.0.0.1:6379&gt; incrby out 10<br>QUEUED<br>#执行之前另外一个线程修改了值，这个时候会导致事务执行失败<br>127.0.0.1:6379&gt; exec<br>(nil)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>线程2</p><p>127.0.0.1:6379&gt; get money<br>(nil)<br>127.0.0.1:6379&gt; get money<br>(nil)<br>127.0.0.1:6379&gt; set money 1000<br>OK<br>1<br>2<br>3<br>4<br>5<br>6<br>如果修改失败，获取最新的值就好！</p><p>10、Jedis<br>什么是jedis？<br>  是Redis 官方推荐的java 连接开发工具！使用java操作Redis 中间件！如果要使用java 操作redis ，那么一定要对jedis 十分的熟悉！</p><p>1.导入依赖</p><p>redis.clients jedis 3.6.0</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--fastjson--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>TEXT<br></code></pre></td></tr></table></figure><p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2.编码测试 连接数据库</p><p>public class TestPing {<br>public static void main(String[] args) {<br>&#x2F;&#x2F;1、new Jedis 对象即可<br>Jedis jedis &#x3D; new Jedis(“127.0.0.1”,6379);<br>System.out.println(jedis.ping());<br>}<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>输出</p><p>PONG<br>1<br>10.1通过Jedis操作Redis<br>ping() 测试连接<br>exists(“name”) 判断key 是否存在<br>set(“password”,”xy”) 根据key 设置值<br>keys(“*”) 查看所有key<br>jedis.del(“password”) 删除key<br>type(“username”) 查看key的存储数据类型<br>rename(“username”,”name”) 修改key 名称<br>select(0) 按索引查看<br>flushDB() 清空当前数据库<br>dbSize() 返回数据库中的key数量<br>flushAll() 清空所有数据库key<br>Jedis jedis &#x3D; new Jedis(“127.0.0.1”, 6379);<br>System.out.println(jedis.ping());</p><p>System.out.println(“清空数据库”+jedis.flushDB());<br>System.out.println(“判断某个key是否存在：”+ jedis.exists(“name”));<br>System.out.println(“新增username，xy键值对：”+jedis.set(“password”,”xy”));<br>System.out.println(“新增password，123键值对：”+jedis.set(“password”,”xy”));<br>System.out.println(“系统中所有的key 如下：”);<br>Set keys &#x3D; jedis.keys(“*”);<br>System.out.println(keys);<br>System.out.println(“删除key password：”+jedis.del(“password”));<br>System.out.println(“判断key password是否存在：”+jedis.exists(“password”));<br>System.out.println(“查看key username所存储的类型：”+jedis.type(“username”));<br>System.out.println(“重命名key “+jedis.rename(“username”,”name”));<br>System.out.println(“取出修改后的name：”+jedis.get(“name”));<br>System.out.println(“按索引查询：”+jedis.select(0));<br>System.out.println(“删除当前数据库中的所有key ：”+jedis.flushDB());<br>System.out.println(“返回数据库中所有的key 数目：”+jedis.dbSize());<br>System.out.println(“删除所有数据库中的key：”+jedis.flushAll());<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>输出结果</p><p>PONG<br>清空数据库OK<br>判断某个key是否存在：false<br>新增username，xy键值对：OK<br>新增password，123键值对：OK<br>系统中所有的key 如下：<br>[password, username]<br>删除key password：1<br>判断key password是否存在：false<br>查看key username所存储的类型：string<br>重命名key OK<br>取出修改后的name：xy<br>按索引查询：OK<br>删除当前数据库中的所有key ：OK<br>返回数据库中所有的key 数目：0<br>删除所有数据库中的key：OK<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>10.2Jedis 操作String类型<br>Jedis jedis &#x3D; new Jedis(“127.0.0.1”, 6379);<br>&#x2F;&#x2F;清空当前数据库<br>jedis.flushDB();<br>jedis.set(“key1”,”val1”);<br>jedis.set(“key2”,”val2”);<br>jedis.set(“key3”,”val3”);<br>System.out.println(“删除key2：”+jedis.del(“key2”));<br>System.out.println(“获取key2：”+jedis.get(“key2”));<br>System.out.println(“修改key1：”+jedis.set(“key1”,”value1Changed”));<br>System.out.println(“在key3后面加入数据：”+jedis.append(“key3”,”Emd”));<br>System.out.println(“key3的值：”+jedis.get(“key3”));<br>System.out.println(“增加多个键值对：”+jedis.mset(“key01”,”value01”,”key02”,”value02”,”key03”,”value03”,”key04”,”value04”));<br>System.out.println(“获取多个键值对：”+jedis.mget(“key01”,”key02”,”key03”));<br>System.out.println(“获取多个键值对：”+jedis.mget(“key01”,”key02”,”key03”,”key04”));<br>System.out.println(“删除多个键值对：”+jedis.del(“key01”,”key02”));<br>System.out.println(“获取多个键值对：”+jedis.mget(“key01”,”key02”));</p><p>jedis.flushDB();<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;新增键值对并设置有效时间&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>System.out.println(jedis.setnx(“key1”,”value1”));<br>System.out.println(jedis.setnx(“key2”,”value2”));<br>System.out.println(jedis.setnx(“key2”,”value2-new”));<br>System.out.println(jedis.get(“key1”));<br>System.out.println(jedis.get(“key2”));</p><p>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;设置有效时间&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>System.out.println(jedis.setex(“key3”,2,”value3”));<br>System.out.println(jedis.get(“key3”));</p><p>try{<br>TimeUnit.SECONDS.sleep(3);<br>}catch (Exception e){<br>e.printStackTrace();<br>}<br>System.out.println(jedis.get(“key3”));<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;获取原值，更新为新值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>System.out.println(jedis.getSet(“key2”,”keyGetSet”));<br>System.out.println(jedis.get(“key2”));</p><p>System.out.println(“获得key2的值的字符串：”+jedis.getrange(“key2”,2,4));<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>结果：</p><p>删除key2：1<br>获取key2：null<br>修改key1：OK<br>在key3后面加入数据：7<br>key3的值：val3Emd<br>增加多个键值对：OK<br>获取多个键值对：[value01, value02, value03]<br>获取多个键值对：[value01, value02, value03, value04]<br>删除多个键值对：2<br>获取多个键值对：[null, null]<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;新增键值对并设置有效时间&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>1<br>1<br>0<br>value1<br>value2<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;设置有效时间&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>OK<br>value3<br>null<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;获取原值，更新为新值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>value2<br>keyGetSet<br>获得key2的值的字符串：yGe<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>10.3.Jedis操作List类型<br>Jedis jedis &#x3D; new Jedis(“127.0.0.1”, 6379);</p><p>jedis.flushDB();<br>System.out.println(“添加一个List”);<br>jedis.lpush(“collections”,”ArrayList”,”LinkedList”,”Vector”,”Stack”,”Map”,”HashMap”);<br>jedis.lpush(“collections”,”Set”);<br>jedis.lpush(“collections”,”HashSet”);<br>jedis.lpush(“collections”,”TreeMap”);<br>System.out.println(“Collection集合内容：”+jedis.lrange(“collections”,0,-1));&#x2F;&#x2F;-1表示最后一个元素<br>System.out.println(“Collection区间0-3的元素”+jedis.lrange(“collections”,0,3));<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>&#x2F;&#x2F;删除列表指定的值，第二个参数为删除的个数（有重复时），后面add进行的值先被删除，类似出栈<br>System.out.println(“删除指定元素个数：”+jedis.lrem(“collections”,2,”HashMap”));<br>System.out.println(“collections内容：”+jedis.lrange(“collections”,0,-1));<br>System.out.println(“删除下标0-3区间之外的元素：”+jedis.ltrim(“collections”,0,3));<br>System.out.println(“collections内容：”+jedis.lrange(“collections”,0,-1));<br>System.out.println(“collections列表出栈（左端）：”+jedis.lpop(“collections”));<br>System.out.println(“collections内容：”+jedis.lrange(“collections”,0,-1));<br>System.out.println(“collections添加元素，从列表右端，与lpush对应”+jedis.rpush(“collections”,”Java”));<br>System.out.println(“collections内容：”+jedis.lrange(“collections”,0,-1));<br>System.out.println(“修改collections指定下标1的内容：”+jedis.lset(“collections”,1,”newValue”));<br>System.out.println(“collections内容：”+jedis.lrange(“collections”,0,-1));<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>System.out.println(“collections长度”+jedis.llen(“collections”));<br>System.out.println(“获取collections下标为2的长度”+jedis.lindex(“collections”,2));<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>System.out.println(jedis.lpush(“sortedList”,”3”,”6”,”2”,”0”,”7”,”4”));<br>System.out.println(“sortedList排序前：”+jedis.lrange(“sortedList”,0,-1));<br>&#x2F;&#x2F;排序<br>List sortedList &#x3D; jedis.sort(“sortedList”);<br>System.out.println(“sortedList排序后：”+sortedList);<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>结果</p><p>添加一个List<br>Collection集合内容：[TreeMap, HashSet, Set, HashMap, Map, Stack, Vector, LinkedList, ArrayList]<br>Collection区间0-3的元素[TreeMap, HashSet, Set, HashMap]<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>删除指定元素个数：1<br>collections内容：[TreeMap, HashSet, Set, Map, Stack, Vector, LinkedList, ArrayList]<br>删除下标0-3区间之外的元素：OK<br>collections内容：[TreeMap, HashSet, Set, Map]<br>collections列表出栈（左端）：TreeMap<br>collections内容：[HashSet, Set, Map]<br>collections添加元素，从列表右端，与lpush对应4<br>collections内容：[HashSet, Set, Map, Java]<br>修改collections指定下标1的内容：OK<br>collections内容：[HashSet, newValue, Map, Java]<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>collections长度4<br>获取collections下标为2的长度Map<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>6<br>sortedList排序前：[4, 7, 0, 2, 6, 3]<br>sortedList排序后：[0, 2, 3, 4, 6, 7]<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>10.4.Jedis操作Set类型<br>Jedis jedis &#x3D; new Jedis(“127.0.0.1”, 6379);<br>jedis.flushDB();<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;往集合里添加元素（不重复）&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>System.out.println(jedis.sadd(“eleSet”,”e1”,”e2”,”e3”,”e4”,”e6”,”e5”,”e0”,”e8”,”e7”));<br>System.out.println(jedis.sadd(“eleSet”,”e6”));<br>System.out.println(jedis.sadd(“eleSet”,”e6”));<br>System.out.println(“eleSet的所有元素为：”+jedis.smembers(“eleSet”));<br>System.out.println(“删除一个元素e0:”+jedis.srem(“eleSet”,”e0”));<br>System.out.println(“eleSet的所有元素为：”+jedis.smembers(“eleSet”));<br>System.out.println(“删除两个元素e7，e6：”+jedis.srem(“eleSet”,”e7”,”e6”));<br>System.out.println(“eleSet的所有元素为：”+jedis.smembers(“eleSet”));<br>System.out.println(“随机移除集合中的一个元素：”+jedis.spop(“eleSet”));<br>System.out.println(“随机移除集合中的一个元素：”+jedis.spop(“eleSet”));<br>System.out.println(“eleSet的所有元素为：”+jedis.smembers(“eleSet”));<br>System.out.println(“eleSet的所有元素的个数为：”+jedis.scard(“eleSet”));<br>System.out.println(“e3是否在eleSet中：”+jedis.sismember(“eleSet”,”e3”));<br>System.out.println(“e1是否在eleSet中：”+jedis.sismember(“eleSet”,”e1”));<br>System.out.println(“e5是否在eleSet中：”+jedis.sismember(“eleSet”,”e5”));<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>System.out.println(jedis.sadd(“eleSet1”,”e1”,”e2”,”e3”,”e4”,”e5”,”e8”,”e7”));<br>System.out.println(jedis.sadd(“eleSet2”,”e1”,”e2”,”e3”,”e4”,”e8”));<br>System.out.println(“将eleSet1中删除e1并存入eleSet3中：”+jedis.smove(“eleSet1”,”eleSet3”,”e1”));<br>System.out.println(“将eleSet2中删除e1并存入eleSet3中：”+jedis.smove(“eleSet1”,”eleSet3”,”e2”));<br>System.out.println(“eleSet1中的元素：”+jedis.smembers(“eleSet1”));<br>System.out.println(“eleSet3中的元素：”+jedis.smembers(“eleSet3”));<br>System.out.println(“&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;集合运算&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”);<br>System.out.println(“eleSet1中的元素：”+jedis.smembers(“eleSet1”));<br>System.out.println(“eleSet2中的元素：”+jedis.smembers(“eleSet2”));<br>System.out.println(“eleSet1和eleSet2的并集：”+jedis.sinter(“eleSet1”,”eleSet2”));<br>System.out.println(“eleSet1和eleSet2的并集：”+jedis.sunion(“eleSet1”,”eleSet2”));<br>System.out.println(“eleSet1和eleSet2的差集：”+jedis.sdiff(“eleSet1”,”eleSet2”));<br>&#x2F;&#x2F;求并集并将交集保存到dstkey集合<br>jedis.sinterstore(“eleSet4”,”eleSet1”,”eleSet2”);<br>System.out.println(“eleSet4的元素：”+jedis.smembers(“eleSet4”));<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>结果</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;往集合里添加元素（不重复）&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>9<br>0<br>0<br>eleSet的所有元素为：[e1, e2, e4, e6, e0, e5, e7, e3, e8]<br>删除一个元素e0:1<br>eleSet的所有元素为：[e6, e5, e4, e1, e7, e3, e8, e2]<br>删除两个元素e7，e6：2<br>eleSet的所有元素为：[e4, e1, e5, e3, e8, e2]<br>随机移除集合中的一个元素：e3<br>随机移除集合中的一个元素：e4<br>eleSet的所有元素为：[e1, e5, e8, e2]<br>eleSet的所有元素的个数为：4<br>e3是否在eleSet中：false<br>e1是否在eleSet中：true<br>e5是否在eleSet中：true<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>7<br>5<br>将eleSet1中删除e1并存入eleSet3中：1<br>将eleSet2中删除e1并存入eleSet3中：1<br>eleSet1中的元素：[e3, e8, e4, e7, e5]<br>eleSet3中的元素：[e2, e1]<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;集合运算&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>eleSet1中的元素：[e3, e8, e4, e7, e5]<br>eleSet2中的元素：[e4, e3, e2, e1, e8]<br>eleSet1和eleSet2的并集：[e4, e3, e8]<br>eleSet1和eleSet2的并集：[e3, e8, e1, e2, e4, e7, e5]<br>eleSet1和eleSet2的差集：[e5, e7]<br>eleSet4的元素：[e4, e3, e8]<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>10.5.Jedis操作Hash<br>Jedis jedis &#x3D; new Jedis(“127.0.0.1”, 6379);</p><p>jedis.flushDB();<br>Map&lt;String,String&gt; hash &#x3D; new HashMap&lt;String, String&gt;();<br>hash.put(“k1”,”v1”);<br>hash.put(“k2”,”v2”);<br>hash.put(“k3”,”v3”);<br>hash.put(“k4”,”v4”);<br>&#x2F;&#x2F;添加名称为hash（key）的元素<br>jedis.hmset(“hash”,hash);<br>&#x2F;&#x2F;向名称为hash的hash中添加key k5 value 为v5<br>jedis.hset(“hash”,”k5”,”v5”);<br>System.out.println(“散列hash的所有键值对为：”+jedis.hgetAll(“hash”));<br>System.out.println(“散列hash的所有键：”+jedis.hkeys(“hash”));<br>System.out.println(“散列hash的所有值：”+jedis.hvals(“hash”));<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>结果</p><p>散列hash的所有键值对为：{k3&#x3D;v3, k4&#x3D;v4, k5&#x3D;v5, k1&#x3D;v1, k2&#x3D;v2}<br>散列hash的所有键：[k3, k4, k5, k1, k2]<br>散列hash的所有值：[v3, v2, v1, v4, v5]<br>1<br>2<br>3<br>10.6Jedis操作事务<br>public static void main(String[] args) {<br>Jedis jedis &#x3D; new Jedis(“127.0.0.1”, 6379);<br>jedis.flushDB();<br>&#x2F;&#x2F;开启事务<br>Transaction transaction &#x3D; jedis.multi();<br>JSONObject jsonObject &#x3D; new JSONObject();<br>jsonObject.put(“hello”, “world”);<br>jsonObject.put(“name”, “xy”);<br>String result &#x3D; jsonObject.toJSONString();</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">try &#123;<br>    <span class="hljs-keyword">transaction</span>.<span class="hljs-keyword">set</span>(&quot;user1&quot;, result);<br>    <span class="hljs-keyword">transaction</span>.<span class="hljs-keyword">set</span>(&quot;user2&quot;, result);<br><br>    //模拟异常<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span> /<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">transaction</span>.exec();<br>&#125; catch (<span class="hljs-keyword">Exception</span> e) &#123;<br>    //放弃事务<br>    <span class="hljs-keyword">transaction</span>.<span class="hljs-keyword">discard</span>();<br>    e.printStackTrace();<br>&#125;finally&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(jedis.<span class="hljs-keyword">get</span>(&quot;user1&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(jedis.<span class="hljs-keyword">get</span>(&quot;user2&quot;));<br>    jedis.<span class="hljs-keyword">close</span>();//关闭连接<br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>结果：</p><p>java.lang.ArithmeticException: &#x2F; by zero<br>at cn.bloghut.TestTx.main(TestTx.java:30)<br>null<br>null<br>1<br>2<br>3<br>4<br>11、SpringBoot集成Redis<br>11.1SpringBoot集成Redis源码<br>SpringBoot 操作数据库：spring-data jpa jdbc mongodb redis</p><p>Spring Data也是和SpringBoot 齐名的项目</p><p>在SpringBoot 2.x之后，原来使用的jedis 被替换成了 lettuce</p><p>jedis：<br>  底层采用的是直连，多个线程操作的话是不安全的，如果想要避免不安全，使用jedis pool连接池！ NIO模式</p><p>lettuce：<br>  底层采用netty，实例可以在多个线程中进行共享，不存在不安全的情况！可以减少线程数量，更新 NIO 模式</p><p>spring.factories</p><p>RedisTemplate 模板</p><p>@ConditionalOnMissingBean，它是修饰bean的一个注解，主要实现的是，当你的bean被注册之后，如果而注册相同类型的bean，就不会成功，它会保证你的bean只有一个，即你的实例只有一个，当你注册多个相同的bean时，会出现异常，以此来告诉开发人员。<br>简单点：就是不存在这个bean 这个方法才生效！<br>我们如果自己定义了一个redisTemplate 它这个默认的就会失效</p><p>@Bean<br>@ConditionalOnMissingBean<br>@ConditionalOnSingleCandidate(RedisConnectionFactory.class)<br>public StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) {<br>1<br>2<br>3<br>4<br>由于 String 是redis中最常用的类型，所以单独提出来一个bean</p><p>11.2SpringBoot整合Redis<br>1.导入依赖</p><p>org.springframework.boot spring-boot-starter-data-redis </p><p>1 2 3 4 2.配置连接</p><p>#SpringBoot 所有的配置类都有一个自动配置类<br>#自动配置类 都会绑定一个properties 配置文件</p><p>spring:<br>redis:<br>host: 127.0.0.1<br>port: 6379<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>3.测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">@Autowired<br>private RedisTemplate redisTemplate;<br><br>@Test<br>void contextLoads() &#123;<br>    <span class="hljs-regexp">//</span>操作不同的数据类型<br>    <span class="hljs-regexp">//</span>操作五大数据类型<br>    <span class="hljs-regexp">//</span>opsForValue()    操作String<br>    <span class="hljs-regexp">//</span>opsForList()     操作List<br>    <span class="hljs-regexp">//</span>opsForSet()      操作Set<br>    <span class="hljs-regexp">//</span>opsForHash()     操作Hash<br>    <span class="hljs-regexp">//</span>opsForZSet()     操作Zset<br><br>    <span class="hljs-regexp">//</span>除了基本操作，常用方法都可以直接使用<br>    <span class="hljs-regexp">//</span>事务 和基本的CRUD<br><br>    <span class="hljs-regexp">//</span>获取redis 连接对象<br><br>TEXT<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; RedisConnection connection &#x3D; redisTemplate.getConnectionFactory().getConnection();<br>&#x2F;&#x2F; connection.flushDb();<br>&#x2F;&#x2F; connection.flushAll();</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    redisTemplate.opsForValue().<span class="hljs-keyword">set</span>(&quot;mykey&quot;,&quot;csdn_xy&quot;);<br>    <span class="hljs-keyword">Object</span> mykey = redisTemplate.opsForValue().<span class="hljs-keyword">get</span>(&quot;mykey&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(mykey);<br><br><br>&#125;<br><br><span class="hljs-type">TEXT</span><br></code></pre></td></tr></table></figure><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>  所有的redis操作，其实对于java开发人员来说，十分的简单，更重要是要去理解redis的思想和每一种 据结构的用处和作用场景！</p><p>11.3自定义RedisTemplate<br>1.RedisTemplate使用的是 JdkSerializationRedisSerializer<br>2.RedisTemplate 封装了对Redis的一些常用的操作<br>3.Jedis是Redis官方推荐的面向Java的操作Redis的客户端，而RedisTemplate是SpringDataRedis中对JedisApi的高度封装。</p><p>@Configuration<br>public class RedisConfig {</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自己定义了一个 RedisTemplate</span><br><span class="hljs-comment"> * @param factory</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br>@Bean<br>@<span class="hljs-built_in">SuppressWarnings</span>(<span class="hljs-string">&quot;all&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;<span class="hljs-type">String</span>, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory</span></span><br><span class="hljs-params"><span class="hljs-function">                                                           factory)</span> </span>&#123;<br>    <span class="hljs-comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span><br>    RedisTemplate&lt;<span class="hljs-type">String</span>, Object&gt; <span class="hljs-keyword">template</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RedisTemplate</span>&lt;<span class="hljs-type">String</span>,<br>            Object&gt;();<br>    <span class="hljs-keyword">template</span>.<span class="hljs-built_in">setConnectionFactory</span>(factory);<br>    <span class="hljs-comment">// Json序列化配置</span><br>    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span><br>            <span class="hljs-built_in">Jackson2JsonRedisSerializer</span>(Object.<span class="hljs-keyword">class</span>);<br>    ObjectMapper om = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ObjectMapper</span>();<br>    om.<span class="hljs-built_in">setVisibility</span>(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>    om.<span class="hljs-built_in">enableDefaultTyping</span>(ObjectMapper.DefaultTyping.NON_FINAL);<br>    jackson2JsonRedisSerializer.<span class="hljs-built_in">setObjectMapper</span>(om);<br>    <span class="hljs-comment">// String 的序列化</span><br>    StringRedisSerializer stringRedisSerializer = <span class="hljs-keyword">new</span><br>            <span class="hljs-built_in">StringRedisSerializer</span>();<br>    <span class="hljs-comment">// key采用String的序列化方式</span><br>    <span class="hljs-keyword">template</span>.<span class="hljs-built_in">setKeySerializer</span>(stringRedisSerializer);<br>    <span class="hljs-comment">// hash的key也采用String的序列化方式</span><br>    <span class="hljs-keyword">template</span>.<span class="hljs-built_in">setHashKeySerializer</span>(stringRedisSerializer);<br>    <span class="hljs-comment">// value序列化方式采用jackson</span><br>    <span class="hljs-keyword">template</span>.<span class="hljs-built_in">setValueSerializer</span>(jackson2JsonRedisSerializer);<br>    <span class="hljs-comment">// hash的value序列化方式采用jackson</span><br>    <span class="hljs-keyword">template</span>.<span class="hljs-built_in">setHashValueSerializer</span>(jackson2JsonRedisSerializer);<br>    <span class="hljs-keyword">template</span>.<span class="hljs-built_in">afterPropertiesSet</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">template</span>;<br>&#125;<br><br>TEXT<br></code></pre></td></tr></table></figure><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>12、Redis.conf配置文件详解<br>  1.启动的时候通过配置文件来启动！<br>  2.行家有没有，出手就知道<br>  3.行家一出手，就知有没有<br>  4.内行看门道，外行看热闹<br>  5.工作中一些小小的配置，可以让你脱颖而出</p><p>unit单位 对大小写不敏感</p><p>包含<br>比如Spring 里面 的import</p><p>网络</p><p>绑定的ip bind 127.0.0.1 -::1<br>保护模式 protected-mode yes<br>端口号 port 6379<br>1<br>2<br>3<br>通用配置<br>是否以守护线程开启，默认是no yes 以守护进程的方式运行</p><p>如何以后台的方式运行，我们需要指定一个pid 文件（进程文件）</p><p>日志</p><p>数据库的数量，默认是16个</p><p>是否显示logo</p><p>快照<br>持久化，在规定的时间内，执行了多少次操作，则会持久化到 .rdb 。aof</p><p>redis 是个内存数据库，如果不持久化的话，数据就会丢</p><p>内存是 断电即失去</p><p>save 900 1</p><p>如果900 秒内，如果至少有1个key 进行了修改，我们其进行持久化操作</p><p>save 30 10</p><p>如果300 秒内，如果至少有10个key 进行了修改，我们其进行持久化操作</p><p>save 60 10000</p><p>如果60 秒内，如果至少有10000个key 进行了修改，我们其进行持久化操作</p><p>持久化失败了，是否继续执行工作</p><p>是否压缩rdb 文件（rdb 持久化的文件）,需要耗费一些CPU的资源！</p><p>保存rdb文件的时候，进行rdb检查校验</p><p>rdb文件保存的目录</p><p>主从复制相关的</p><p>是不是保存一些数据</p><p>是不是只读的</p><p>安全相关</p><p>可以设置密码，默认是没有密码的</p><p>没有权限，需要登录</p><p>设置密码</p><p>客户端限制<br>maxclients 1000 设置能连接上redis 的最大客户端数量</p><p>内存到达上限的处理策略<br>移除一些过期的key<br>报错<br>  1、volatile-lru：只对设置了过期时间的key进行LRU（默认值）<br>  2、allkeys-lru ： 删除lru算法的key<br>  3、volatile-random：随机删除即将过期key<br>  4、allkeys-random：随机删除<br>  5、volatile-ttl ： 删除即将过期的<br>  6、noeviction ： 永不过期，返回错误</p><p>AOF配置</p><p>  默认是不开启aof模式的，模式是使用rdb 方式持久化的，在大部分所有的情况下，rdb完全够用了！<br>appendonly.aof 持久化文件的名称</p><p>  1.appendfsync everysec 每秒执行一次 sync ，可能会丢失这一秒的数据<br>  2.appendfsync always 每次修改都会 sync，速度比较慢<br>  3.appendfsync no 不执行 sync，这个时候操作系统自己同步数据，速度最快！</p><p>性能建议还是 首选rdb</p><p>13、Redis持久化<br>Redis持久化–ADB<br>面试和工作，持久化都是重点。</p><p>  Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出（断电），服务器中的数据库状态也会消失。所以Redis 提供了持久化功能。</p><p>在主从复制中，rdb 是用于备用的</p><p>  在指定的时间间隔内将内存中的数据集快照写入磁盘，行话将的：Snapshot 快照，它恢复是将快照文件直接读到内存里。</p><p>  Redus会单独创建（Fork） 一个子进程来进程持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO 操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF 方式更加的高效，RDB 缺点是最后一次持久化后的数据库可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置。</p><p>  RDB保存的文件是dump.rbb</p><p>  都是在我们的配置文件中快照中进行配置的</p><p>一分钟类 添加5个key</p><p>生成了dump.rdb</p><p>关机</p><p>查看进程<br>已经关闭了</p><p>启动redis</p><p>查看进程</p><p>连接<br>获取k1<br>可以获取到其值 v1 一直存在</p><p>使用flushall 命令，清空所有数据库，会自动生成一个rdb文件</p><p>触发机制</p><p>save 的规则满足的情况下，会自动触发rdb规则<br>执行flushall 命令，也会触发rdb规则<br>退出redis ，也会产生rdb文件！<br>备份就会自动生成一个dump.rdb 文件</p><p>如何恢复rdb文件</p><p>只需要将rdb文件放在我们redis启动就可以了，Redis 启动的时候会自动检查dump.rdb文件 恢复其中的数据。<br>查看需要存放的文字<br>如果在 这个 &#x2F;home&#x2F;wrz&#x2F;redis-6.2.3&#x2F;src 目录下存放 dump.rdb文件，启动就会自动恢复其中的数据。</p><p>几乎他自己默认的配置就够用了！</p><p>优点</p><p>适合大规模的数据恢复！<br>对数据的完整性要求不高！<br>缺点</p><p>需要一定的时间间隔进程操作！如果意外宕机了，这个最后一次修改数据就没有的了！<br>fork进程的时候，会占用一定的内存空间！<br>Redis持久化–AOF<br>  将我们的所有命令都记录下来，history，恢复的时候把这个文件全部再执行一遍</p><p>  以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，Redis 启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p>  AOF保存的是appendonly.aof 文件</p><p>默认是不开启的，需要手动设置，将appendonly 设置为yes</p><p>重写的规则</p><p>修改配置文件</p><p>重启redis</p><p>查看aof文件</p><p>添加数据</p><p>查看appendonly 文件</p><p>  如果这个aof 文件有错位，这个时候redis是启动不起来的，需要修复这个aof 文件<br>redis 提供了一个工具</p><p>redis-check-aof –fix<br>1<br>一种是全丢，只丢错误的数据。</p><p>appendfsync everysec 每秒执行一次 sync ，可能会丢失这一秒的数据<br>appendfsync always 每次修改都会 sync，速度比较慢<br>appendfsync no 不执行 sync，这个时候操作系统自己同步数据，速度最快！<br>优点</p><p>每一次修改都同步，文件完整性更加好！<br>每秒同步一次，可能会丢失一秒的数据<br>从不同步，效率最高！<br>缺点</p><p>数据文件来说，aof 远远大于rdb，修改的速度也比rdb慢！<br>aof 运行效率也要比rdb慢，所有redis 默认配置是rdb 持久化。<br>重写规则说明</p><p>默认就是文件的无限追加，文件越来越大<br>如果aof 文件大于64m ，太大了！fork 一个新的进来帮我们的文件进行重写！</p><p>Redis持久化总结<br>RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储<br>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始 的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重 写，使得AOF文件的体积不至于过大。<br>只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化<br>同时开启两种持久化方式<br>  在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF 文件保存的数据集要比RDB文件保存的数据集要完整。<br>  RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者 建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有 AOF可能潜在的Bug，留着作为一个万一的手段。<br>性能建议<br>  因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够 了，只保留 save 900 1 这条规则。<br>   如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自 己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产 生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite 的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重 写可以改到适当的数值。<br>  如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也 减少了rewrite时带来的系统波动。代价是如果Master&#x2F;Slave 同时倒掉，会丢失十几分钟的数据， 启动脚本也要比较两个 Master&#x2F;Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。<br>14、Redis发布订阅<br>线程通信<br>  对列 存在两个东西，发送者 订阅者</p><p>Redis 发布订阅（pub&#x2F;sub） 是一种消息通信模式<br>  1.发送者（pub） 发送信息<br>  2.订阅者（sub）接收信息。<br>  3.微信、微博、关注系统<br>  4.消息队列MQ</p><p>Redis 客户端可以订阅任意数量的频道<br>  第一个：消息发送者<br>  第二个：频道<br>  第三个：消息订阅者！</p><p>频道channel1，以及订阅这个频道的三个客户端–client2，client5，client1之间的关系</p><p>当有新消息通过publish 命令发送给频道channel1 时，这个消息就会被发送给订阅它的三个客户端：</p><p>命令</p><p>菜鸟教程：<a href="https://www.runoob.com/redis/redis-pub-sub.html">https://www.runoob.com/redis/redis-pub-sub.html</a><br>1<br>测试</p><p>订阅端</p><p>127.0.0.1:6379&gt; subscribe xy #订阅一个频道 xy<br>Reading messages… (press Ctrl-C to quit)</p><ol><li>“subscribe”</li><li>“xy”</li><li>(integer) 1</li><li>“message” # 消息</li><li>“xy” # 哪个频道的消息</li><li>“123” # 消息的内容</li><li>“message”</li><li>“xy”</li><li>“xy”</li><li>“message”</li><li>“xy”</li><li>“helloredis”<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>发送端</li></ol><p>127.0.0.1:6379&gt; publish xy 123 # 发布者发布消息到频道<br>(integer) 1<br>127.0.0.1:6379&gt; publish xy xy # 发布者发布消息到频道<br>(integer) 1<br>127.0.0.1:6379&gt; publish xy helloredis # 发布者发布消息到频道<br>(integer) 1<br>127.0.0.1:6379&gt;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>  Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍 此加深对 Redis 的理解。<br>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。<br>微信：<br>  通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道！， 而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键， 就是将客户端添加到给定 channel 的订阅链表中。</p><p>使用场景<br>  实时消息系统！<br>  事实聊天！（频道当做聊天室，将信息回显给所有人）<br>  订阅、关注系统</p><p>稍微复杂的场景<br>  消息中间间 MQ</p><p>15、Redis集群<br>15.1Redis集群–主从复制<br>比如：1主人–2仆从<br>概念<br>  主从复制，是指将一台Redis 服务器的数据，复制到其他的Redis 服务器。前者称为主节点（Master&#x2F;leader），后者称为从节点（slave&#x2F;follwer）；数据的复制是单向的，只能由主节点到从节点。Master 以写为主，Slave 以读为主。</p><p>  默认情况下，每台Redis 服务器都是主节点；且一个主节点可以有多个从节点（或者没有从节点），但一个从节点只能由一个主节点。</p><p>主从复制的作用主要包括：</p><p>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。<br>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。<br>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 （即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写 少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。<br>高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复 制是Redis高可用的基础。<br>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机，1主2从），原因如下：</p><p>  从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较 大；</p><p>  从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有 内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。 电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p><p>主从复制，读写分离！80% 的情况下都是在进程读操作！减缓服务器的压力！<br>架构中经常使用！ 一主 二从！（最低配）</p><p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用Redis！</p><p>环境配置</p><p>只配从库，不配置主库！</p><p>[root@localhost bin]# .&#x2F;redis-cli<br>127.0.0.1:6379&gt; info replication #查看当前库的信息</p><h1 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h1><p>role:master #角色：master<br>connected_slaves:0 #没有从机<br>master_replid:76cfb7376506413b4d6dd71f6da24afc8a61dedc<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:0<br>second_repl_offset:-1<br>repl_backlog_active:0<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:0<br>repl_backlog_histlen:0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>主机：6379</p><p>1、端口<br>2、pid 名字<br>3、log文件名字<br>4、dump.rdb 名字<br>1<br>2<br>3<br>4</p><p>从机：6380</p><p>从机：6381</p><p>启动</p><p>默认情况下三台都是主机<br>默认情况下，每台Redis 服务器都是主节点；一般情况下只用配置从机就好了认老大！</p><p>配置一主二从</p><p>将6379这台机子设置为从机<br>就是找谁当自己的老大<br>slaveof</p><p>将6381这台机子设置为从机</p><p>查看主机的配置</p><p>真实的主从配置应该在配置文件中配置，这样的话是永久的，这里使用的是命令，暂时的！</p><p>细节<br>  1.主机可以写，从机不能写只能读！<br>  2.主机中的所有信息和数据，都自动被从机保存！</p><p>从机只能写</p><p>测试：主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依 旧可以直接获取到主机写的信息！</p><p>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从 主机中获取值！</p><p>复制原理<br>Slave 启动成功连接到 master 后会发送一个sync同步命令</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行 完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p><p>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步</p><p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中 看到！</p><p>第二种模型：层层链路</p><p>  这是时候也能完成主从复制，6380 即6379的 从节点，也是6381的主节点，但是该节点无法完成写入的。</p><p>如果没有老大了（主节点挂了），这个时候能不能选择一个老大出来呢？哨兵模式没出来之前，都是需要手动配置的</p><p>  谋朝篡位</p><p>  如果主机断开了连接，可以使用 slaveof no one 让自己变成主机！其他的节点就可以手动连接到最新的这个主节点（手动）</p><p>如果这个时候老大修复了，只能重新配置</p><p>  好比谋朝篡位，皇帝下台了，你再回来你也做不了老大了</p><p>以下6380 重新认6379为老大</p><p>哨兵模式<br>（自动选举老大）</p><p>15.2Redis集群–哨兵模式<br>概念：<br>  主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工 干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑 哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。</p><p>  谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p>  哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><p>这里的哨兵有两个作用</p><p>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。<br>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服 务器，修改配置文件，让它们切换主机。<br>  然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。 各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p>  假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认 为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一 定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。 切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为 客观下线。</p><p>测试：<br>  配置一主二从！</p><p>1.配置哨兵配置文件<br>加粗样式名称不能错，sentinel.conf<br>monitor #被监控的名称</p><p>127.0.0.1 #host<br>6379 #端口号port<br>1 #代表主机挂了，slave 投票看让谁接替成为主机，票数最多的就会成为主机<br>sentinel monitor myredis 127.0.0.1 6379 1<br>1<br>2<br>3<br>4</p><p>2.启动哨兵</p><p>3.测试主机蹦了<br>关闭主机 6379</p><p>查看6380<br>1<br>自动转为主机</p><p>查看6381<br>自动认6380为新的老大</p><p>结论：<br>  如果master 节点断开了，这个时候就会从 从机中随机选择一个服务器（这里面有一个投票算法）</p><p>  这个时候6379再回来也没有用了，它是个光杆司令了，如果还想做老大需要手动配置！<br>如果6379 回来了，它也只能做从机。（你回来了，只能当我的手下）</p><p>  如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则！</p><p>哨兵模式优点：</p><p>哨兵模式集群，基于主从复制模式，所有的主从配置优点，它全有<br>主从可以切换，故障可以转移，系统的可用性就会更好<br>哨兵模式就是主从复制的升级，手动到自动，更加健壮<br>哨兵模式缺点：</p><p>Redis 不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦！<br>实现哨兵模式的配置是非常麻烦的，里面有很多配置<br>哨兵模式的全部配置</p><h1 id="Example-sentinel-conf"><a href="#Example-sentinel-conf" class="headerlink" title="Example sentinel.conf"></a>Example sentinel.conf</h1><h1 id="哨兵sentinel实例运行的端口-默认26379"><a href="#哨兵sentinel实例运行的端口-默认26379" class="headerlink" title="哨兵sentinel实例运行的端口 默认26379"></a>哨兵sentinel实例运行的端口 默认26379</h1><p>port 26379</p><h1 id="哨兵sentinel的工作目录"><a href="#哨兵sentinel的工作目录" class="headerlink" title="哨兵sentinel的工作目录"></a>哨兵sentinel的工作目录</h1><p>dir &#x2F;tmp</p><p>#哨兵sentinel监控的redis主节点的 ip port</p><h1 id="master-name-可以自己命名的主节点名字-只能由字母A-z、数字0-9-、"><a href="#master-name-可以自己命名的主节点名字-只能由字母A-z、数字0-9-、" class="headerlink" title="master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、"></a>master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、</h1><p>这三个字符”.-_”组成。</p><h1 id="quorum-配置多少个sentinel哨兵统一认为master主节点失联-那么"><a href="#quorum-配置多少个sentinel哨兵统一认为master主节点失联-那么" class="headerlink" title="quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么"></a>quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么</h1><p>这时客观上认为主节点失联了<br>sentinel monitor mymaster 127.0.0.1 6379 2</p><h1 id="当在Redis实例中开启了requirepass-foobared-授权密码-这样所有连接Redis实例的"><a href="#当在Redis实例中开启了requirepass-foobared-授权密码-这样所有连接Redis实例的" class="headerlink" title="当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的"></a>当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的</h1><p>客户端都要提供 密码</p><h1 id="设置哨兵sentinel-连接主从的密码-注意必须为主从设置一样的验证密码"><a href="#设置哨兵sentinel-连接主从的密码-注意必须为主从设置一样的验证密码" class="headerlink" title="设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码"></a>设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</h1><p>sentinel auth-pass mymaster MySUPER–secret-0123passw0rd</p><h1 id="指定多少毫秒之后-主节点没有应答哨兵sentinel"><a href="#指定多少毫秒之后-主节点没有应答哨兵sentinel" class="headerlink" title="指定多少毫秒之后 主节点没有应答哨兵sentinel"></a>指定多少毫秒之后 主节点没有应答哨兵sentinel</h1><p>此时 哨兵主观上认为主节点下线 默认30秒<br>sentinel down-after-milliseconds mymaster 30000</p><h1 id="这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master"><a href="#这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master" class="headerlink" title="这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master"></a>这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master</h1><p>进行 同步， 这个数字越小，完成failover所需的时间就越长， 但是如果这个数字越大，<br>就意味着越 多的slave因为replication而不可用。<br>可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。<br>sentinel parallel-syncs mymaster 1</p><h1 id="故障转移的超时时间-failover-timeout-可以用在以下这些方面："><a href="#故障转移的超时时间-failover-timeout-可以用在以下这些方面：" class="headerlink" title="故障转移的超时时间 failover-timeout 可以用在以下这些方面："></a>故障转移的超时时间 failover-timeout 可以用在以下这些方面：</h1><p>#1. 同一个sentinel对同一个master两次failover之间的间隔时间。<br>#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向<br>正确的master那 里同步数据时。<br>#3.当想要取消一个正在进行的failover所需要的时间。<br>#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了<br>这个超时， slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的<br>规则来了</p><h1 id="默认三分钟"><a href="#默认三分钟" class="headerlink" title="默认三分钟"></a>默认三分钟</h1><p>sentinel failover-timeout mymaster 180000</p><h1 id="SCRIPTS-EXECUTION"><a href="#SCRIPTS-EXECUTION" class="headerlink" title="SCRIPTS EXECUTION"></a>SCRIPTS EXECUTION</h1><p>#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，<br>例如当系统运行不正常时发邮件通知 相关人员。<br>#对于脚本的运行结果有以下规则：<br>#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10<br>#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。<br>#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。<br>#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之<br>后重新执行。</p><p>#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观<br>失效等等）， 将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理<br>员关于系统不正常运行的信 息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，<br>一个是事件的描述。如果sentinel.conf配 置文件中配置了这个脚本路径，那么必须保证这<br>个脚本存在于这个路径，并且是可执行的，否则sentinel无 法正常启动成功。<br>#通知脚本</p><h1 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h1><p>sentinel notification-script mymaster &#x2F;var&#x2F;redis&#x2F;notify.sh</p><h1 id="客户端重新配置主节点参数脚本"><a href="#客户端重新配置主节点参数脚本" class="headerlink" title="客户端重新配置主节点参数脚本"></a>客户端重新配置主节点参数脚本</h1><h1 id="当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端"><a href="#当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端" class="headerlink" title="当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端"></a>当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端</h1><p>关于master地址已 经发生改变的信息。</p><h1 id="以下参数将会在调用脚本时传给脚本"><a href="#以下参数将会在调用脚本时传给脚本" class="headerlink" title="以下参数将会在调用脚本时传给脚本:"></a>以下参数将会在调用脚本时传给脚本:</h1><h1 id="目前总是“failover”"><a href="#目前总是“failover”" class="headerlink" title="# 目前总是“failover”,"></a># 目前总是“failover”,</h1><h1 id="是“leader”或者“observer”中的一个。"><a href="#是“leader”或者“observer”中的一个。" class="headerlink" title="是“leader”或者“observer”中的一个。"></a>是“leader”或者“observer”中的一个。</h1><h1 id="参数-from-ip-from-port-to-ip-to-port是用来和旧的master和新的master-即旧"><a href="#参数-from-ip-from-port-to-ip-to-port是用来和旧的master和新的master-即旧" class="headerlink" title="参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧"></a>参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧</h1><p>的slave)通 信的</p><h1 id="这个脚本应该是通用的，能被多次调用，不是针对性的。"><a href="#这个脚本应该是通用的，能被多次调用，不是针对性的。" class="headerlink" title="这个脚本应该是通用的，能被多次调用，不是针对性的。"></a>这个脚本应该是通用的，能被多次调用，不是针对性的。</h1><p>sentinel client-reconfig-script mymaster &#x2F;var&#x2F;redis&#x2F;reconfig.sh</p><h1 id="一般都是由运维来配置！"><a href="#一般都是由运维来配置！" class="headerlink" title="一般都是由运维来配置！"></a>一般都是由运维来配置！</h1><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>社会目前程序员饱和（初级和中级）、高级程序员是重金难求的！提升自己</p><p>16、Redis缓存穿透和雪崩<br>  Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一 些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据 的一致性要求很高，那么就不能使用缓存。<br>  另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p><p>缓存穿透</p><p>概念<br>  缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于 是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒 杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了 缓存穿透。</p><p>解决方案</p><p>布隆过滤器<br>  布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则 丢弃，从而避免了对底层存储系统的查询压力；</p><p>缓存空对象<br>  当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数 据将会从缓存中获取，保护了后端数据源；</p><p>但是这种方法会存在两个问题：<br>  1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多 的空值的键；</p><p>  2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于 需要保持一致性的业务会有影响。</p><p>缓存击穿（量太大，缓存过期！）<br>  这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中 对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一 个屏障上凿开了一个洞。<br>  当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访 问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><p>1.设置热点数据永不过期<br>  从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p><p>2.加互斥锁<br>  分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布 式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考 验很大。</p><p>缓存雪崩<br>  缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机！</p><p>  产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商 品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p>  其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然 形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就 是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知 的，很有可能瞬间就把数据库压垮。</p><p>解决方案</p><p>1.redis高可用<br>  这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续 工作，其实就是搭建的集群。（异地多活！）</p><p>2.限流降级（在SpringCloud讲解过！）<br>  这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对 某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p>3.数据预热<br>  数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数 据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让 缓存失效的时间点尽量均匀。</p><p>双十一：停掉一些服务，（保证主要的服务可用）</p><p>总结<br>五大数据类型<br>java操作jedis<br>持久化<br>主从复制<br>缓存雪崩和缓存穿透</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrayList</title>
    <link href="/2022/11/27/Java/%E9%9B%86%E5%90%88/"/>
    <url>/2022/11/27/Java/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="LIst"><a href="#LIst" class="headerlink" title="LIst"></a>LIst</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>基于数组实现，增删慢，查询快，线程不安全</p><ul><li>ArrayList是使用最广泛的List实现类，其内部数据结构基于数组实现，提供了对List的增加（add）、删除（remove）和访问（get）功能。ArrayList的缺点是对元素必须连续存储，当需要在ArrayList的中间位置插入或者删除元素时，需要将待插入或者删除的节点后的所有元素进行移动，其修改代价较高，因此，ArrayList不适合随机插入和删除的操作，更适合随机查找和遍历的操作。ArrayList不需要在定义时指定数组的长度，在数组长度不能满足存储要求时，ArrayList会创建一个新的更大的数组并将数组中已有的数据复制到新的数组中。</li></ul><p><strong>ArrayList的扩容机制</strong></p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>基于数组实现，增删慢，查询快，线程安全</p><ul><li>Vector的数据结构和ArrayList一样，都是基于数组实现的，不同的是Vector支持线程同步，即同一时刻只允许一个线程对Vector进行写操作（新增、删除、修改），以保证多线程环境下数据的一致性，但需要频繁地对Vector实例进行加锁和释放锁操作，因此，Vector的读写效率在整体上比ArrayList低。</li></ul><h4 id="LinkList"><a href="#LinkList" class="headerlink" title="LinkList"></a>LinkList</h4><p>基于双向链表实现，增删快，查询慢，线程不安全</p><ul><li>LinkedList采用双向链表结构存储元素，在对LinkedList进行插入和删除操作时，只需在对应的节点上插入或删除元素，并将上一个节点元素的下一个节点的指针指向该节点即可，数据改动较小，因此随机插入和删除效率很高。但在对LinkedList进行随机访问时，需要从链表头部一直遍历到该节点为止，因此随机访问速度很慢。除此之外，LinkedList还提供了在List接口中未定义的方法，用于操作链表头部和尾部的元素，因此有时可以被当作堆栈、队列双向队列使用。</li></ul><p>Q1：ArrList与LinkList的区别</p><p>底层数据结构的实现不一样，A的底层是基于数组实现的，L的底层是基于双向链表实现的</p><p>由于A的底层，所以规定他对于查询的操作会很快，但是对于删除或者新增的操作会很慢，原因是一旦发生改变，所有的数组下表都会发生改变，但是查询却可以利用下标。</p><p>A的线程不安全，分析源码可以知道，A的数组添加操作没有加锁</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//Appends the specified element to the end of this list.</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-built_in">ensureCapacityInternal</span>(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><p>解决思路：</p><ul><li>1.Vector</li><li>2.Collections.synchronizedList()</li><li>3.CopyOnWrite(写时复制)</li></ul><h4 id="Vector-1"><a href="#Vector-1" class="headerlink" title="Vector"></a>Vector</h4><p>运行后发现并没有出现线程不安全的问题(没有出现并发修改异常),我们查看Vector类的源码发现它的方法都用synchronized修饰，所以Vector是线程安全的，但是性能比较低</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VectorDemo</span>&#123;<br>    <span class="hljs-keyword">static</span> Vector&lt;<span class="hljs-built_in">String</span>&gt; vector=<span class="hljs-keyword">new</span> Vector&lt;&gt;();<br>    public <span class="hljs-keyword">static</span> <span class="hljs-literal">void</span> main(<span class="hljs-built_in">String</span>[] args) &#123;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10</span> ; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread<span class="hljs-function"><span class="hljs-params">(()-&gt;&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">                vector.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>));</span></span><br><span class="hljs-params"><span class="hljs-function">                System.out.println(vector);</span></span><br><span class="hljs-params"><span class="hljs-function">            &#125;)</span>.<span class="hljs-title">start</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">JAVA</span></span><br></code></pre></td></tr></table></figure><h4 id="Collections-synchronizedList"><a href="#Collections-synchronizedList" class="headerlink" title="Collections.synchronizedList()"></a>Collections.synchronizedList()</h4><p>Collections.synchronizedList(list)，相当于Collections工具类提供了一个方法给原来没有加锁的集合加锁，当然类似的还有Collections.synchronizedMap(), Collections.synchronizedSet()等等</p><h4 id="写时复制-重点"><a href="#写时复制-重点" class="headerlink" title="写时复制(重点)"></a>写时复制(重点)</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyOnWriteDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> List&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-keyword">list</span> = <span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;&gt;();<br><br>    public <span class="hljs-keyword">static</span> <span class="hljs-literal">void</span> main(<span class="hljs-built_in">String</span>[] args) &#123;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread<span class="hljs-function"><span class="hljs-params">(() -&gt; &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">list</span>.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>));</span></span><br><span class="hljs-params"><span class="hljs-function">                System.out.println(<span class="hljs-keyword">list</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">            &#125;)</span>.<span class="hljs-title">start</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function">//<span class="hljs-title">add</span>源码</span><br><span class="hljs-function"><span class="hljs-title">public</span> <span class="hljs-title">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> &#123;</span><br><span class="hljs-function">    <span class="hljs-title">final</span> <span class="hljs-title">ReentrantLock</span> <span class="hljs-title">lock</span> = <span class="hljs-title">this</span>.<span class="hljs-title">lock</span>;</span><br><span class="hljs-function">    <span class="hljs-title">lock</span>.<span class="hljs-title">lock</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">    <span class="hljs-title">try</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">Object</span>[] <span class="hljs-title">elements</span> = <span class="hljs-title">getArray</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">int</span> <span class="hljs-title">len</span> = <span class="hljs-title">elements</span>.<span class="hljs-title">length</span>;</span><br><span class="hljs-function">        <span class="hljs-title">Object</span>[] <span class="hljs-title">newElements</span> = <span class="hljs-title">Arrays</span>.<span class="hljs-title">copyOf</span><span class="hljs-params">(elements, len + <span class="hljs-number">1</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">newElements</span>[<span class="hljs-title">len</span>] = <span class="hljs-title">e</span>;</span><br><span class="hljs-function">        <span class="hljs-title">setArray</span><span class="hljs-params">(newElements)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">true</span>;</span><br><span class="hljs-function">    &#125; <span class="hljs-title">finally</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">lock</span>.<span class="hljs-title">unlock</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">JAVA</span></span><br></code></pre></td></tr></table></figure><ul><li>CopyOnWriteArrayList就是写时复制的容器,每次添加Objcet对象时不是直接向原Object[]数组中添加,而是复制一个长度为原数组长度+1的新数组，把要添加的数据写到新数组上。</li><li>写完之后在把原来的引用指向新数组setArray(newElements),最后再释放锁，让其他线程进行写操作。</li></ul><p><a href="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/679efeac93b645abb72860481263ce16~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/679efeac93b645abb72860481263ce16~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="image.png"></a></p><p>image.png</p><ul><li>这样做的好处是在进行读操作的时候不用加锁，保证了并发性，同时这也是读写分离思想的体现。</li></ul><p>L的底层数据结构是双向链表，所以L对于删除和新增很快，只需要前后指针的指向就可以添加，但是对于查询就会很慢，因为需要遍历整个数组才能够找到，LinkedList还提供了在List接口中未定义的方法，用于操作链表头部和尾部的元素，同是也是线程不安全的。</p><p>L的线程不安全是因为他的底层方法是直接调用的A的add方法。</p><p>Q2：ArrList与Vector的区别</p><p>线程安全的区别</p><p>Q3：Vector与LInkLIst的区别</p><p>数据结构和线程安全，L多一个操作头尾的方法</p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>Queue是队列结构，Java中的常用队列如下。</p><ul><li>◎ ArrayBlockingQueue：基于数组数据结构实现的有界阻塞队列。</li><li>◎ LinkedBlockingQueue：基于链表数据结构实现的有界阻塞队列。</li><li>◎ PriorityBlockingQueue：支持优先级排序的无界阻塞队列。</li><li>◎ DelayQueue：支持延迟操作的无界阻塞队列。</li><li>◎ SynchronousQueue：用于线程同步的阻塞队列。</li><li>◎ LinkedTransferQueue：基于链表数据结构实现的无界阻塞队列。</li><li>◎ LinkedBlockingDeque：基于链表数据结构实现的双向阻塞队列。</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="不可重复"><a href="#不可重复" class="headerlink" title="不可重复"></a>不可重复</h4><p>JDK 7 中的 HashMap 是采用头插法的，即 [why技术] 在 [eat] 之前，JDK 8 中的 HashMap 采用的是尾插法。</p><p>Set核心是独一无二的性质，适用于存储无序且值不相等的元素。对象的相等性在本质上是对象的HashCode值相同，Java依据对象的内存地址计算出对象的HashCode值。如果想要比较两个对象是否相等，则必须同时覆盖对象的hashCode方法和equals方法，并且hashCode方法和equals方法的返回值必须相同。</p><h4 id="1-HashSet：HashTable实现，无序"><a href="#1-HashSet：HashTable实现，无序" class="headerlink" title="1.HashSet：HashTable实现，无序"></a>1.HashSet：HashTable实现，无序</h4><p>HashSet存放的是散列值，它是按照元素的散列值来存取元素的。元素的散列值是通过元素的hashCode方法计算得到的，HashSet首先判断两个元素的散列值是否相等，如果散列值相等，则接着通过equals方法比较，如果equls方法返回的结果也为true，HashSet就将其视为同一个元素；如果equals方法返回的结果为false，HashSet就不将其视为同一个元素。</p><h4 id="2-TreeSet：二叉树实现"><a href="#2-TreeSet：二叉树实现" class="headerlink" title="2.TreeSet：二叉树实现"></a>2.TreeSet：二叉树实现</h4><p>TreeSet基于二叉树的原理对新添加的对象按照指定的顺序排序（升序、降序），每添加一个对象都会进行排序，并将对象插入二叉树指定的位置。Integer和String等基础对象类型可以直接根据TreeSet的默认排序进行存储，而自定义的数据类型必须实现Comparable接口，并且覆写 其 中 的 compareTo 函 数 才 可 以 按 照 预 定 义 的 顺 序 存 储 。 若 覆 写<br>compare 函 数 ， 则 在 升 序 时 在 this. 对 象 小 于 指 定 对 象 的 条 件 下 返回-1，在降序时在this.对象大于指定对象的条件下返回1。</p><h4 id="3-LinkHashSet：HashTable实现数据存储，双向链表记录顺序"><a href="#3-LinkHashSet：HashTable实现数据存储，双向链表记录顺序" class="headerlink" title="3.LinkHashSet：HashTable实现数据存储，双向链表记录顺序"></a>3.LinkHashSet：HashTable实现数据存储，双向链表记录顺序</h4><p>LinkedHashSet 在 底 层 使 用 LinkedHashMap 存 储 元 素 ， 它 继 承 了HashSet，所有的方法和操作都与HashSet相同，因此LinkedHashSet的实现比较简单，只提供了 4个构造方法，并通过传递一个标识参数调用父类的构造器，在底层构造一个LinkedHashMap来记录数据访问，其他相关操作与父类HashSet相同，直接调用父类HashSet的方法即可。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="1-HashMap：数组-链表存储数据，线程不安全"><a href="#1-HashMap：数组-链表存储数据，线程不安全" class="headerlink" title="1.HashMap：数组+链表存储数据，线程不安全"></a>1.HashMap：数组+链表存储数据，线程不安全</h4><p>HashMap基于键的HashCode值唯一标识一条数据，同时基于键的<br>HashCode值进行数据的存取，因此可以快速地更新和查询数据，但其<br>每次遍历的顺序无法保证相同。HashMap的key和value允许为null。<br>HashMap 是 非 线 程 安 全 的 ， 即 在 同 一 时 刻 有 多 个 线 程 同 时 写<br>HashMap时将可能导致数据的不一致。如果需要满足线程安全的条件，<br>则可以用Collections的synchronizedMap方法使HashMap具有线程安全<br>的能力，或者使用ConcurrentHashMap。<br>HashMap的数据结构如图 2-2所示，其内部是一个数组，数组中的<br>每个元素都是一个单向链表，链表中的每个元素都是嵌套类Entry的实<br>例，Entry实例包含4个属性：key、value、hash值和用于指向单向链<br>表下一个元素的next。<br>图2-2<br>HashMap常用的参数如下。◎ capacity：当前数组的容量，默认为 16，可以扩容，扩容后<br>数组的大小为当前的两倍，因此该值始终为2 。<br>n<br>◎ loadFactor：负载因子，默认为0.75。<br>◎ threshold：扩容的阈值，其值等于capacity×loadFactor。<br>HashMap在查找数据时，根据HashMap的Hash值可以快速定位到数<br>组的具体下标，但是在找到数组下标后需要对链表进行顺序遍历直到<br>找到需要的数据，时间复杂度为O( )。<br>n<br>为了减少链表遍历的开销，Java 8对HashMap进行了优化，将数据<br>结构修改为数组+链表或红黑树。在链表中的元素超过 8个以后，<br>HashMap会将链表结构转换为红黑树结构以提高查询效率，因此其时间<br>复杂度为O(log )。Java 8 HashMap的数据结构如图2-3所示。<br>N<br>图2-3</p><h4 id="2-ConcurrentHashMap：分段锁实现，线程安全"><a href="#2-ConcurrentHashMap：分段锁实现，线程安全" class="headerlink" title="2.ConcurrentHashMap：分段锁实现，线程安全"></a>2.ConcurrentHashMap：分段锁实现，线程安全</h4><p>与HashMap不同，ConcurrentHashMap采用分段锁的思想实现并发操 作 ， 因 此 是 线 程 安 全 的 ConcurrentHashMap 由 多 个 Segment 组 成（ Segment 的 数 量 也 是 锁 的 并 发 度 ） ， 每 个 Segment 均 继 承 自ReentrantLock并单独加锁，所以每次进行加锁操作时锁住的都是一个Segment，这样只要保证每个Segment都是线程安全的，也就实现了全<br>局的线程安全。ConcurrentHashMap的数据结构如图2-4所示。在 ConcurrentHashMap 中 有 个 concurrencyLevel 参 数 表 示 并 行 级别，默认是 16，也就是说ConcurrentHashMap默认由 16个Segments组成，在这种情况下最多同时支持 16个线程并发执行写操作，只要它们的操作分布在不同的Segment上即可。并行级别concurrencyLevel可以在初始化时设置，一旦初始化就不可更改。ConcurrentHashMap的每个Segment内部的数据结构都和HashMap相同。</p><p><em><strong>Java 8在ConcurrentHashMap中引入了红黑树，具体的数据结构</strong></em></p><h4 id="3-HashTable：线程安全"><a href="#3-HashTable：线程安全" class="headerlink" title="3.HashTable：线程安全"></a>3.HashTable：线程安全</h4><p>HashTable是遗留类，很多映射的常用功能都与HashMap类似，不同的是它继承自Dictionary类，并且是线程安全的，同一时刻只有一个线程能写HashTable，并发性不如ConcurrentHashMap。</p><h4 id="4-TreeMap：基于二叉树数据结构"><a href="#4-TreeMap：基于二叉树数据结构" class="headerlink" title="4.TreeMap：基于二叉树数据结构"></a>4.TreeMap：基于二叉树数据结构</h4><p>TreeMap基于二叉树数据结构存储数据，同时实现了SortedMap接口以保障元素的顺序存取，默认按键值的升序排序，也可以自定义排序比较器。<br>TreeMap常用于实现排序的映射列表。在使用TreeMap时其key必须实 现 Comparable 接 口 或 采 用 自 定 义 的 比 较 器 ， 否 则 会 抛 出java.lang.ClassCastException异常。</p><h4 id="5-LinkedHashMap：基于HashTable数据结构，使用链表保存插入顺序"><a href="#5-LinkedHashMap：基于HashTable数据结构，使用链表保存插入顺序" class="headerlink" title="5.LinkedHashMap：基于HashTable数据结构，使用链表保存插入顺序"></a>5.LinkedHashMap：基于HashTable数据结构，使用链表保存插入顺序</h4><p>LinkedHashMap为HashMap的子类，其内部使用链表保存元素的插入顺序，在通过Iterator遍历LinkedHashMap时，会按照元素的插入顺序访问元素。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题四</title>
    <link href="/2022/11/27/Java/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9B%9B/"/>
    <url>/2022/11/27/Java/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="1、限流什么是令牌桶算法？什么是时间窗口滑动算法"><a href="#1、限流什么是令牌桶算法？什么是时间窗口滑动算法" class="headerlink" title="1、限流什么是令牌桶算法？什么是时间窗口滑动算法?"></a>1、限流什么是令牌桶算法？什么是时间窗口滑动算法?</h4><p>计数器算法是限流算法里最简单也是最容易实现的一种算法。比如我们规定，对于A接口来说，我们1分钟的访问次数不能超过100个。那么我们可以这么做：在一开 始的时候，我们可以设置一个计数器counter，每当一个请求过来的时候，counter就加1，如果counter的值大于100并且该请求与第一个 请求的间隔时间还在1分钟之内，那么说明请求数过多；如果该请求与第一个请求的间隔时间大于1分钟，且counter的值还在限流范围内，那么就重置 counter</p><p>法虽然简单，但是有一个十分致命的问题，那就是临界问题，我们看下图：<br><a href="https://img-blog.csdnimg.cn/20210323235138234.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NyYW5rWg==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20210323235138234.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NyYW5rWg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>从上图中我们可以看到，假设有一个恶意用户，他在0:59时，瞬间发送了100个请求，并且1:00又瞬间发送了100个请求，这种情况，其实是符合我们上述规则的。因为在0:00-0:59这个区间用户确实没有超过我们设置的100这个最大范围，1:00-1:59这个区间也是一样。</p><p>但是，其实这个用户在 0:59-1:00这1秒里，瞬间发送了200个请求，这种情况使用固定窗口的计数器就很明显不符合我们的初衷。</p><p><a href="https://img-blog.csdnimg.cn/20210323235230654.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NyYW5rWg==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20210323235230654.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NyYW5rWg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></a></p><p>在这里插入图片描述</p><p>在上图中，整个红色的矩形框表示一个时间窗口，在我们的例子中，一个时间窗口就是一分钟。然后我们将时间窗口进行划分，比如图中，我们就将滑动窗口 划成了6格，所以每格代表的是10秒钟。每过10秒钟，我们的时间窗口就会往右滑动一格。每一个格子都有自己独立的计数器counter，比如当一个请求 在0:35秒的时候到达，那么0:30~0:39对应的counter就会加1</p><p>漏桶算法(Leaky Bucket)</p><p>漏桶算法由流量容器、流量入口和出口组成。其中流量出口流速即为我们期望的限速值，比如 100 QPS。漏桶算法除了具备限流能力，还具备流量整型功能。下面我们通过一张图来了解漏桶算法。</p><p>在这里插入图片描述</p><p>如上图，流入漏桶流量的流速是不恒定的，经过漏桶限速后，流出流量的速度是恒定的。需要说明的是，漏桶的容量是有限的，一旦流入流量超出漏桶容量，这部分流量只能被丢弃了</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>如图所示，不管流量多大，超出的部分都会直接丢弃，即使服务器还有大量空闲资源也是直接丢弃，无法处理突发流量。那么如何解决这个问题呢？下面介绍令牌桶算法。</p><p>令牌桶算法(Token Bucket)</p><p>它的运行过程是这样的，一个令牌工厂按照设定值定期向令牌桶发放令牌。当令牌桶满了后，多出的令牌会被丢弃掉。每当一个请求到来时，该请求对应的线程会从令牌桶中取令牌。如果遇到突发情况，初期由于令牌桶中存放了很多个令牌，因此允许多个请求同时取令牌。当桶中没有令牌后，无法获取到令牌的请求可以丢弃，或者重试。</p><h4 id="2、dubbo和openfeign的区别？"><a href="#2、dubbo和openfeign的区别？" class="headerlink" title="2、dubbo和openfeign的区别？"></a>2、dubbo和openfeign的区别？</h4><p>一、相同点</p><p>Dubbo 与 Feign 都依赖注册中心、负载均衡。<br>二、区别</p><p>1、协议</p><p>Dubbo：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">支持多传输协议(Dubbo、Rmi、http、redis等等)，可以根据业务场景选择最佳的方式。非常灵活。<br>默认的Dubbo协议：利用Netty，TCP传输，单一、异步、长连接，适合数据量小、高并发和服务提供者远远少于消费者的场景。<br><br>TEXT<br></code></pre></td></tr></table></figure><p>Feign：</p><p>基于Http传输协议，短连接，不适合高并发的访问。</p><p>2、负载均衡</p><p>Dubbo：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">支持<span class="hljs-number">4</span>种算法（随机、轮询、活跃度、<span class="hljs-built_in">Hash</span>一致性），而且算法里面引入权重的概念。<br>配置的形式不仅支持代码配置，还支持Dubbo控制台灵活动态配置。<br>负载均衡的算法可以精准到某个服务接口的某个方法。<br><br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p>Feign：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">只支持<span class="hljs-built_in">N</span>种策略：轮询、随机、ResponseTime加权。<br>负载均衡算法是Client级别的。<br><br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p>3、容错策略</p><p>Dubbo：</p><p>支持多种容错策略：failover、failfast、brodecast、forking等，也引入了retry次数、timeout等配置参数。</p><p>Feign：</p><p>利用熔断机制来实现容错的，处理的方式不一样</p><h4 id="3、sentinel和hystrix的区别"><a href="#3、sentinel和hystrix的区别" class="headerlink" title="3、sentinel和hystrix的区别?"></a>3、sentinel和hystrix的区别?</h4><h2 id="2-功能对比"><a href="#2-功能对比" class="headerlink" title="2. 功能对比:"></a><strong>2. 功能对比:</strong></h2><table><thead><tr><th>功能</th><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发线程数限流）</td><td>线程池隔离&#x2F;信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数</td><td>基于异常比率</td><td>基于异常比率、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式、匀速器模式、预热排队模式(流量规则处可配置)</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h4 id="4、RabbitMQ的交换机有哪些"><a href="#4、RabbitMQ的交换机有哪些" class="headerlink" title="4、RabbitMQ的交换机有哪些?"></a>4、RabbitMQ的交换机有哪些?</h4><p>分别是Direct Exchange（直连交换机）， Fanout Exchange（扇型交换机）， Topic Exchange（主题交换机）与 Headers Exchange（头交换机）</p><p>Direct Exchange（直连交换机）：将一个名为Q的消息队列与某个名为D的直连交换机通过值为R的路由键绑定在一起，当一个Msg和路由键R发送到直连交换机D上时，直连交换机D会把Msg根据路由键R分发到Q队列。这种模式类似于一对一</p><p>Fanout Exchange（扇型交换机）：当一个Msg发送到扇形交换机F上时，则扇形交换机F会将消息分别发送给所有绑定到F上的消息队列。扇形交换机将消息路由给绑定到自身的所有消息队列，也就是说路由键在扇形交换机里没有作用，故消息队列绑定扇形交换机时，路由键可为空。这个模式类似于广播。</p><p>Topic Exchange（主题交换机）：主题交换机是一种发布&#x2F;订阅的模式，结合了直连交换机与扇形交换机的特点，消息队列与主题交换机的绑定也是通过路由键的。当一个Msg和路由键规则发送到一个主题交换机T时，T会根据路由键规则来筛选出符合规则的绑定到自身消息队列的路由键（可能是1个，也可能是N个，也可能是0个），根据符合的路由键，将消息发送到其对应的消息队列里。这个模式类似于多播，当消息的路由规则只匹配到一个路由键时，此时主题交换机可以看作是直连交换机，当路由规则匹配了主题交换机上所有绑定的队列的路由键时，此时主题交换机可以看作是扇形交换机</p><p>Headers Exchange（头交换机）：头交换机类似与主题交换机，但是却和主题交换机有着很大的不同。主题交换机使用路由键来进行消息的路由，而头交换机使用消息属性来进行消息的分发，通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。在头交换机里有一个特别的参数”x-match”，当”x-match”的值为“any”时，只需要消息头的任意一个值匹配成功即可，<br>当”x-match”值为“all”时，要求消息头的所有值都需相等才可匹配成功。</p><h4 id="5、RabbitMQ消息的可靠性如何保证的"><a href="#5、RabbitMQ消息的可靠性如何保证的" class="headerlink" title="5、RabbitMQ消息的可靠性如何保证的?"></a>5、RabbitMQ消息的可靠性如何保证的?</h4><p>1、保证消息不丢失(三步)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">开启事务(不推荐)<br>开启<span class="hljs-built_in">confirm</span>(推荐)<br>开启RabbitMQ持久化(交换机、队列、消息)<br>关闭RabbitMQ自动<span class="hljs-built_in">ack</span>(改成手动) <br><br>TEXT<br></code></pre></td></tr></table></figure><p>2、保证消息不重复消费<br>幂等性 ( 每个消息用一个唯一标识来区分，消费前先判断标识有没有被消费过，若已消费过，则直接 ACK)<br>3、RabbitMQ如何保证消息的顺序性<br>将消息放入同一个交换机，交给同一个队列，这个队列只有一个消费者，消费者只允许同时开启一个线程<br>4、RabbitMQ消息重试机制<br>消费者在消费消息的时候，如果消费者业务逻辑出现程序异常，这时候应该如何处理？<br>使用消息重试机制 (SpringBoot 默认 3 次消息重试机制 )<br>如何合适选择重试机制？<br>消费者取到消息后，调用第三方接口，接口无法访问，需要使用重试机制<br>消费者取到消息后，抛出数据转换异常，不需要重试机制，需要发布者进行解决。<br>5、SpringBoot消息重试机制<br>@EnableRetry 注解：表示启用重试机制(value 表示哪些异常需要触发重试， maxAttempts 设置最大重试次数，delay 表示重试的延迟时间， multiplier 表示上一次延时时间是这一次的倍数 )<br>eg 、 @Retryable(value &#x3D; Exception.class, maxAttempts &#x3D; 3, backoff &#x3D; @Backoff(delay &#x3D; 2000,<br>multiplier &#x3D; 1.5))<br>@Recover 注解：当重试次数达到设置的最大次数的时候，程序还是执行异常，调用的回调函数。<br>6、RabbitMQ死信队列<br>死信队列是当消息在一个队列因为下列原因 :<br>a 、消息被拒绝 (basic.reject 或 basic.nack) 并且 requeue&#x3D;false.<br>b 、消息 TTL 过期<br>c 、队列达到最大长度 ( 队列满了，数据无法添加到 mq 中 )<br>变成了 “ 死信队列 ” 后被重新投递 (publish) 到另一个 Exchange ，然后重新消费。说白了就是没有被消费 的消息换个地方重新被消费<br>7、RabbitMQ解决分布式事务<br>经典案例，以目前流行的外卖为例，用户下单后，调用订单服务，订单服务调用派单系统通知送外卖人 员送单，这时候订单系统与派单系统采用MQ 异步通讯。<br>RabbitMQ 解决分布式事务原理<br>答案：采用最终一致性原理 需要保证以下三要素 :<br>a 、确保生产者一定要将数据投递到 MQ 服务器中 ( 采用 MQ 消息确认机制 )<br>b 、确保消费者能够正确消费消息，采用手动 ACK 模式 ( 注意重试、幂等性问题 )<br>c 、如何保证第一个事务先执行，采用补偿机制，在创建一个补单消费者进行监听，如果订单没有创建成 功，进行补单。( 如果第一个事务中出错，补单消费者会在重新执行一次第一个事务，例如第一个事务是 添加订单表，如果失败在补单的时候重新生成订单记录，由于订单号唯一，所以不会重复)<br>8、RabbitMQ保证消息不丢失的具体方案<br>前提 ：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">(<span class="hljs-number">1</span>)开启confirm<br>(<span class="hljs-number">2</span>)开启RabbitMQ的持久化(交换机、队列、消息)<br>(<span class="hljs-number">3</span>)关闭RabbitMQ的自动<span class="hljs-built_in">ack</span>(改成手动)<br>(<span class="hljs-number">4</span>)配置消费重试次数，消费重试间隔时间等 <br><br>TEXT<br></code></pre></td></tr></table></figure><p>涉及到的技术点：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">MQ、Redis、定时任务 <br><br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p>8.1、保证投放消息不丢失<br>(1)先将消息放入生产者Redis(此时消息的状态为未投放)，再放入队列<br>(2)根据confirm(ReturnCallback和ConfirmCallback)的结果来确定消息是否投递成功，<br>投递成功的，修改生产者redis中消息的投递状态为已投递<br>投递失败的消息将会放入失败的Redis，并从生产者Redis中删除，由定时任务定期扫描并重新投递<br>(3)生产者Redis定时任务<br>生产者Redis定时任务专门扫描生产者Redis中存放了一定时间，但是状态还是未投放的消息<br>此消息会被认为已经投递，但是没有任何反馈结果(由于不可知因素，导致没有ReturnCallback，也没有 ConfirmCallback)，<br>此类消息被扫描到后，会放入失败的Redis，并从生产者Redis中删除，由定时任务定期扫描并重新投递<br>(4)还需要一个专门的定时任务扫描生产者Redis中存放了很久，仍然未消费的数据(状态为已投递)，此类 消息被扫描到后，会放入失败的Redis，并从生产者Redis中删除，由定时任务定期扫描并重新投递<br>(5)扫描失败的Redis的定时任务都遵循一条原则，一条消息最多被重新投递三次，若投递了三次仍然失 败，则记录日志，记录到数据库，不会再投递，需要人工干预处理<br>8.2、保证消费消息不丢失<br>(1)消费者取到消息后，从消息中取出唯一标识，先判断此消息有没有被消费过，若已消费过，则直接 ACK(避免重复消费)<br>(2)正常处理成功后，将生产者Redis中的此消息删除，并ACK(告诉server端此消息已成功消费)<br>(3)遇到异常时，捕获异常，验证自己在消息中设定的重试次数是否超过阀值，若超过，则放入死信队 列，若未超过，则向将消息中的重试次数加1，抛出自定义异常，进入重试机制<br>(4)有专门的消费者用于处理死信队列中消费多次仍未消费成功的数据，可以记录日志，入库，人工干预 处理</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题三</title>
    <link href="/2022/11/27/Java/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%89/"/>
    <url>/2022/11/27/Java/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><h4 id="泛型方法如何使用定义使用"><a href="#泛型方法如何使用定义使用" class="headerlink" title="泛型方法如何使用定义使用"></a>泛型方法如何使用定义使用</h4></li></ul><p><strong><code>泛型方法</code> 是在<code>调用方法</code>的时候指明泛型的具体类型.</strong></p><p><strong>语句：</strong></p><p>修饰符 &lt;T,E,…&gt; 返回值类型 方法名（形参列表）{<br>。。。。。。<br>}</p><ul><li>修饰符与返回值类型中间的 泛型标识符 &lt;T,E,…&gt;,是 泛型方法的标志，只有这种格式声明的方法才是泛型方法。</li><li>泛型方法声明时的 泛型标识符 &lt;T,E,…&gt; 表示在方法可以使用声明的泛型类型。</li><li>与泛型类相同，泛型标识符可以是任意类型,常见的如T,E,K,V 等。</li><li>泛型方法可以声明为 static 的，并且与普通的静态方法是一样的。</li></ul><h4 id="普通泛型方法"><a href="#普通泛型方法" class="headerlink" title="普通泛型方法"></a>普通泛型方法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericMethod</span> &#123;<br><br>    <span class="hljs-comment">//1.普通的泛型方法</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-title class_">String</span> <span class="hljs-title function_">commonMethod</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name,T t</span>)&#123;<br>        <span class="hljs-title class_">String</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>        res += name +<span class="hljs-string">&quot;-&quot;</span>+ t;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;普通泛型方法 ： &quot;</span>+res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable constant_">JAVA</span><br></code></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericMethodApplication</span> &#123;<br>    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;<br>        <span class="hljs-comment">//1.调用普通泛型方法</span><br>        <span class="hljs-title class_">GenericMethod</span> <span class="hljs-variable">genericMethod</span> <span class="hljs-operator">=</span> <span class="hljs-variable">new</span> <span class="hljs-title class_">GenericMethod</span>();<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">commonRes01</span> <span class="hljs-operator">=</span> <span class="hljs-variable">genericMethod</span>.<span class="hljs-property">commonMethod</span>(<span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">commonRes01</span>);<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">commonRes02</span> <span class="hljs-operator">=</span> <span class="hljs-variable">genericMethod</span>.<span class="hljs-property">commonMethod</span>(<span class="hljs-string">&quot;002&quot;</span>, <span class="hljs-number">100</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">commonRes02</span>);<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">commonRes03</span> <span class="hljs-operator">=</span> <span class="hljs-variable">genericMethod</span>.<span class="hljs-property">commonMethod</span>(<span class="hljs-string">&quot;003&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">commonRes03</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;==================&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable">JAVA</span><br></code></pre></td></tr></table></figure><h4 id="静态泛型方法"><a href="#静态泛型方法" class="headerlink" title="静态泛型方法"></a>静态泛型方法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericMethod</span> &#123;<br><br>    <span class="hljs-comment">//2.静态的泛型方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T,E&gt; <span class="hljs-title class_">String</span> <span class="hljs-title function_">staticMethod</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name,T t,E e</span>)&#123;<br>        <span class="hljs-title class_">String</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>        res += name +<span class="hljs-string">&quot;-&quot;</span>+ t +<span class="hljs-string">&quot;-&quot;</span>+ e;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;静态泛型方法 ： &quot;</span>+res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable constant_">JAVA</span><br></code></pre></td></tr></table></figure><h4 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h4><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericMethodApplication</span> &#123;<br>    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;<br>     <br>        <span class="hljs-comment">//2.调用静态泛型方法</span><br>        <span class="hljs-title class_">String</span> staticRes01 <span class="hljs-operator">=</span> <span class="hljs-title class_">GenericMethod</span>.<span class="hljs-property">staticMethod</span>(<span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(staticRes01);<br>        <span class="hljs-title class_">String</span> staticRes02 <span class="hljs-operator">=</span> <span class="hljs-title class_">GenericMethod</span>.<span class="hljs-property">staticMethod</span>(<span class="hljs-string">&quot;002&quot;</span>, <span class="hljs-number">100</span>, &#x27;<span class="hljs-variable">c</span>&#x27;);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(staticRes02);<br>        <span class="hljs-title class_">String</span> staticRes03 <span class="hljs-operator">=</span> <span class="hljs-title class_">GenericMethod</span>.<span class="hljs-property">staticMethod</span>(<span class="hljs-string">&quot;003&quot;</span>, <span class="hljs-number">12.05</span>d, <span class="hljs-literal">false</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(staticRes03);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;==================&quot;</span>);<br>   <br>    &#125;<br>&#125;<br><br><span class="hljs-variable">JAVA</span><br></code></pre></td></tr></table></figure><h4 id="泛型方法中的可变参数"><a href="#泛型方法中的可变参数" class="headerlink" title="泛型方法中的可变参数"></a>泛型方法中的可变参数</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GenericMethod</span> &#123;<br><br>    <span class="hljs-comment">//3.带可变参数的泛型方法</span><br>    <span class="hljs-keyword">public</span> &lt;A&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">argsMethod</span>(<span class="hljs-params">A ... args</span>)</span>&#123;<br>        <span class="hljs-keyword">for</span> (A arg : args) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(arg);<br>        &#125;<br>    &#125;<br>&#125;<br><br>调用<br>package com.northcastle.genericmethod;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * author : northcastle</span><br><span class="hljs-comment"> * createTime:2021/10/23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GenericMethodApplication</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>     <br>        <span class="hljs-comment">//3.调用可变参数的方法</span><br>        genericMethod.argsMethod(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">300</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>,<span class="hljs-number">600</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>    &#125;<br>&#125;<br><br><br>JAVA<br></code></pre></td></tr></table></figure><ul><li><h4 id="你怎么使用注解？"><a href="#你怎么使用注解？" class="headerlink" title="你怎么使用注解？"></a>你怎么使用注解？</h4></li></ul><p>注解是一种能被添加到java代码中的元数据，类、方法、变量、参数和包都可以用注解来修饰。注解对于它所修饰的代码并没有直接的影响</p><ol><li>框架中的注解</li></ol><p><strong>@RestController</strong></p><p>@RestController 是@controller和@ResponseBody 的结合</p><p>@Controller 将当前修饰的类注入SpringBoot IOC容器，使得从该类所在的项目跑起来的过程中，这个类就被实例化。<br>@ResponseBody 它的作用简短截说就是指该类中所有的API接口返回的数据，甭管你对应的方法返回Map或是其他Object，它会以Json字符串的形式返回给客户端</p><p><strong>@Requestmapper</strong></p><ol><li>自定义注解、解析</li></ol><ul><li>@interface</li></ul><p>定义注解类型元素时需要注意如下几点：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">访问修饰符必须为<span class="hljs-keyword">public</span>，不写默认为<span class="hljs-keyword">public</span>；<br>该元素的类型只能是基本数据类型、<span class="hljs-type">String</span>、<span class="hljs-keyword">Class</span>、枚举类型、注解类型（体现了注解的嵌套效果）以及上述类型的一位数组；<br>该元素的名称一般定义为名词，如果注解中只有一个元素，请把名字起为value（后面使用会带来便利操作）；<br>()不是定义方法参数的地方，也不能在括号中定义任何参数，仅仅只是一个特殊的语法；<br><span class="hljs-keyword">default</span>代表默认值，值必须和第<span class="hljs-number">2</span>点定义的类型一致；<br>如果没有默认值，代表后续使用注解时必须给该类型元素赋值。<br><br><span class="hljs-keyword">TEXT</span><br></code></pre></td></tr></table></figure><ul><li>元注解</li></ul><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>@Target注解，是专门用来限定某个自定义注解能够被应用在哪些Java元素上面的</p><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>@Retention注解，翻译为持久力、保持力。即用来修饰自定义注解的生命力。<br>注解的生命周期有三个阶段：1、Java源文件阶段；2、编译到class文件阶段；3、运行期阶段。</p><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h4><p>用来指定自定义注解是否能随着被定义的java文件生成到JavaDoc文档当中</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p>指定某个自定义注解如果写在了父类的声明部分，那么子类的声明部分也能自动拥有该注解。@Inherited注解只对那些@Target被定义为ElementType.TYPE的自定义注解起作用。</p><ol><li>项目中的自定义注解的使用</li></ol><ul><li><h4 id="项目中的异常处理"><a href="#项目中的异常处理" class="headerlink" title="项目中的异常处理"></a>项目中的异常处理</h4></li></ul><p>前端</p><p>后端</p><p>数据库</p><ul><li><p><em><strong>可预知的异常</strong></em><br>指的是在程序中根据业务需求或者是程序运行之前保证运行无误，提前对异常进行判断处理。一般返回的异常信息包括：执行结果标志（成功&#x2F;失败）、错误码、错误提示信息。处理方案，看代码</p><p><strong>不可预知的异常</strong><br>指的是由<a href="https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">框架</a>抛出来的异常</p></li><li><h4 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h4></li></ul><p><strong>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</strong></p><ol><li>任何数据类型（包括基本数据类型）都有一个“静态”的class属性</li><li>Object(对象) ——&gt; getClass();</li><li>通过Class类的静态方法：forName（String className）(常用)</li></ol><ul><li><h4 id="ArrayList的底层"><a href="#ArrayList的底层" class="headerlink" title="ArrayList的底层"></a>ArrayList的底层</h4></li><li><p>ArrayList是使用最广泛的List实现类，其内部数据结构基于数组实现，提供了对List的增加（add）、删除（remove）和访问（get）功能。ArrayList的缺点是对元素必须连续存储，当需要在ArrayList的中间位置插入或者删除元素时，需要将待插入或者删除的节点后的所有元素进行移动，其修改代价较高，因此，ArrayList不适合随机插入和删除的操作，更适合随机查找和遍历的操作。ArrayList不需要在定义时指定数组的长度，在数组长度不能满足存储要求时，ArrayList会创建一个新的更大的数组并将数组中已有的数据复制到新的数组中。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题二</title>
    <link href="/2022/11/27/Java/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C/"/>
    <url>/2022/11/27/Java/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>面试题二</p><h4 id="nacos与serviceconfig的区别"><a href="#nacos与serviceconfig的区别" class="headerlink" title="nacos与serviceconfig的区别"></a>nacos与serviceconfig的区别</h4><ul><li>nacos提供了UI界面，操作方便，config没有UI界面，通常需要配合git使用，动态变更还需要其他的消息件来配合使用</li><li>两者的者使用等量级不一样，nacos服务在一般的微服务项目中，config适用于大型的微服务项目中。</li><li>nacos使用长连接配置，一旦配置变动，通知生产者过程十分的迅速，比config快很多</li><li>config依赖git可以实现权限管理，nacos不具备</li></ul><h4 id="nacos注册中心和eurefig的区别"><a href="#nacos注册中心和eurefig的区别" class="headerlink" title="nacos注册中心和eurefig的区别"></a>nacos注册中心和eurefig的区别</h4><p>CAP理论：</p><ul><li>rureka只支持AP</li><li>nacos支持AP和CP两种模式（实现依据是可以设置实例是否是短暂的还是长久的）</li></ul><p>服务的剔除方式：</p><ul><li>E每隔30s发送一次心跳，默认情况下90s没有收到心跳，E会把服务从注册表中剔除。60s的清除下线时间间隔</li><li>极端情况下需要3分钟的时间，从异常到剔除完全不接受请求</li><li>N的心跳默认5s，超过15s后设置为不健康的状态，但可以正常的接受请求</li><li>超30s服务会被删除</li></ul><p>连接方式：</p><ul><li>N是长连接，E是短连接</li></ul><p>操作实例的方式</p><ul><li>N对于实例的操作比E多，可以配置权重，监听等，与N比起来E的界面功能比较简单。</li></ul><p>自我保护机制：</p><ul><li>相同点： 保护的阈值都是0-1的范围</li><li>不同点：</li></ul><ol><li>保护的方式不同</li></ol><p>E的保护方式：短时间内，统计失败的比例，达到一定到阈值，触发自我保护机制，在该机制下，E不会剔除任何服务，正常后，退出保护机制</p><p>N的保护机制：当健康的服务占总数的比例小于阈值的时候，无论是否健康，都会将这个实例返回给客户端，虽然损失了流量，但保护了集群的可用性。</p><ol><li>范围不同</li></ol><p>N的阈值是针对某个具体的Sevice的，不是所有的服务的，E的自我保护是针对所有的服务的</p><h4 id="dubbo和openfeign的区别，优缺点？"><a href="#dubbo和openfeign的区别，优缺点？" class="headerlink" title="dubbo和openfeign的区别，优缺点？"></a>dubbo和openfeign的区别，优缺点？</h4><p>相同点</p><ul><li><a href="https://so.csdn.net/so/search?q=Dubbo&spm=1001.2101.3001.7020">Dubbo</a> 与 Feign 都依赖注册中心、负载均衡，作用是提供远程接口调用</li></ul><p>不同点</p><ul><li>协议不同</li></ul><p>Dubbo：</p><p>支持多传输协议(Dubbo、Rmi、http、redis等等)，可以根据业务场景选择最佳的方式。非常灵活。</p><p>Openfeign</p><p>基于Http传输协议，短连接，<code>不适合高并发</code>的访问</p><ul><li>负载均衡</li></ul><p>Dubbo：</p><p>支持4种算法（随机、轮询、活跃度、Hash一致性），而且算法里面引入权重的概念。<br>配置的形式不仅支持代码配置，还支持Dubbo控制台灵活动态配置。<br>负载均衡的算法可以精准到某个服务接口的某个方法。</p><p>Feign：</p><p>只支持N种策略：轮询、随机、ResponseTime加权。<br>负载均衡算法是Client级别的。</p><p>Nacos注册中心很好的兼容了Feign，Feign默认集成了Ribbon，所以在Nacos下使用Fegin默认就实现了负载均衡的效果。</p><ul><li>容错机制</li></ul><p>Dubbo：</p><p>支持多种容错策略：failover、failfast、brodecast、forking等，也引入了retry次数、timeout等配置参数。</p><p>Feign：</p><p>利用熔断机制来实现容错的，处理的方式不一样。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题</title>
    <link href="/2022/11/27/Java/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/11/27/Java/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="01-线程又几种创建方式和区别"><a href="#01-线程又几种创建方式和区别" class="headerlink" title="01- 线程又几种创建方式和区别"></a><strong>01- 线程又几种创建方式和区别</strong></h4><ul><li>继承 Thread 类</li><li>实现 Runnable 接口</li><li>实现 Callable 接口，并结合 Future 实现</li><li>通过线程池创建线程</li></ul><h4 id="02-你能说下synchronized和lock的区别吗"><a href="#02-你能说下synchronized和lock的区别吗" class="headerlink" title="02-你能说下synchronized和lock的区别吗"></a><strong>02-你能说下synchronized和lock的区别吗</strong></h4><h4 id="03-set和list的区别"><a href="#03-set和list的区别" class="headerlink" title="03-set和list的区别"></a><strong>03-set和list的区别</strong></h4><p>List特点：元素有放入顺序，元素可重复</p><p>Set特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法 ，另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值。）<br>3.Set和List对比：<br>Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。<br>List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。</p><h4 id="04-哪些情况索引失效"><a href="#04-哪些情况索引失效" class="headerlink" title="04-哪些情况索引失效"></a><strong>04-哪些情况索引失效</strong></h4><ul><li>某个表中，有两列（id和c_id）都建了单独索引，下面这种查询条件不会走索引</li><li>存在NULL值条件</li><li>反过来当查询条件为非时，索引定位就困难了，执行计划此时可能更倾向于全表扫描，这类的查询条件有：&lt;&gt;、NOT、in、not exists</li><li>当使用模糊搜索时，like 前置通配符 %</li><li>条件上包括函数</li><li>数据类型的转换</li></ul><h4 id="05-post请求和get请求的区别"><a href="#05-post请求和get请求的区别" class="headerlink" title="05-post请求和get请求的区别"></a><strong>05-post请求和get请求的区别</strong></h4><p>本质没有区别</p><p>1.get请求一般是去取获取数据（其实也可以提交，但常见的是获取数据）；<br>post请求一般是去提交数据。</p><p>2.get因为参数会放在url中，所以隐私性，安全性较差，请求的数据长度是有限制的，<br>不同的浏览器和服务器不同，一般限制在 2~8K 之间，更加常见的是 1k 以内；<br>post请求是没有的长度限制，请求数据是放在body中；</p><p>3.get请求刷新服务器或者回退没有影响，post请求回退时会重新提交数据请求。</p><p>4.get请求可以被缓存，post请求不会被缓存。</p><p>5.get请求会被保存在浏览器历史记录当中，post不会。get请求可以被收藏为书签，因为参数就是url中，但post不能。它的参数不在url中。</p><p>6.get请求只能进行url编码（appliacation-x-www-form-urlencoded）,post请求支持多种（multipart&#x2F;form-data等）。</p><p>深入理解<br>1…GET 和 POST都是http请求方式， 底层都是 TCP&#x2F;IP协议；通常GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包（但firefox是发送一个数据包），</p><p>2.对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200<br>（返回数据）表示成功；</p><p>而对于 POST，浏览器先发送 header，服务器响应 100， 浏览器再继续发送 data，服<br>务器响应 200 （返回数据）。</p><h4 id="06-缓存穿透怎么解决"><a href="#06-缓存穿透怎么解决" class="headerlink" title="06-缓存穿透怎么解决"></a><strong>06-缓存穿透怎么解决</strong></h4><p>穿透原理：</p><ul><li>访问一个不存在的Key</li><li>缓存中没有数据</li><li>数据请求太多</li></ul><p>解决：</p><ul><li>规范key的命名，并且统一缓存查询和写入的入口。这样，在入口处，对key的规范进行检测。–这样保存恶意的key被拦截</li><li>web服务器启动时，提前将有可能被频繁并发访问的数据写入缓存。—这样就规避大量的请求在第3步出现排队阻塞</li><li>Synchronized双重检测机制，这时我们就需要使用同步（Synchronized）机制，在同步代码块前查询一下缓存是否存在对应的key，然后同步代码块里面再次查询缓存里是否有要查询的key。 这样“双重检测”的目的，还是避免并发场景下导致的没有意义的数据库的访问</li><li>限流加锁</li></ul><h4 id="07-redis持久化有几种方式区别"><a href="#07-redis持久化有几种方式区别" class="headerlink" title="07-redis持久化有几种方式区别"></a><strong>07-redis持久化有几种方式区别</strong></h4><p>AOF：记录服务器每次写的操作，当服务器重启时会执行命令来恢复原来的数据(文件存储方式)</p><p>优点：</p><ul><li><strong>使用AOF 会让Redis数据更加耐久</strong></li><li><strong>数据同步快，不容易丢失</strong></li><li><strong>AOF文件是一个只进行追加的日志文件</strong></li><li><strong>redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写</strong></li><li><strong>AOF 文件有序地保存了对数据库执行的所有写入操作</strong></li></ul><p>缺点：</p><ul><li><strong>AOF体积大</strong></li><li><strong>AOF速度低</strong></li></ul><p>RDB：在指定的时间间隔对数据进行快照存储(快照存储方式)</p><p>优点：</p><ul><li><strong>适用数据集备份</strong></li><li><strong>方便传输</strong></li><li><strong>最大化redis性能</strong></li><li><strong>恢复大数据集更快</strong></li></ul><p>缺点：</p><ul><li><strong>容易丢失数据</strong></li><li><strong>耗时效率低</strong></li></ul><h4 id="08-sql执行计划怎么看"><a href="#08-sql执行计划怎么看" class="headerlink" title="08-sql执行计划怎么看"></a>08-sql执行计划怎么看</h4><p><strong>执行计划（execution plan，也叫查询计划或者解释计划）是数据库执行 SQL 语句的具体步骤</strong></p><p><code>EXPLAIN</code>关键字</p><p>接下来，我们要做的就是理解执行计划中这些字段的含义。下表列出了 MySQL 执行计划中的各个字段的作用：<br>列名 作用<br>id 语句中 SELECT 的序号。如果是 UNION 操作的结果，显示为 NULL；此时 table 列显示为 &lt;unionM,N&gt;。<br>select_type SELECT 的类型，包括：</p><ul><li>SIMPLE，不涉及 UNION 或者子查询的简单查询；</li><li>PRIMARY，最外层 SELECT；</li><li>UNION，UNION 中第二个或之后的 SELECT；</li><li>DEPENDENT UNION，UNION 中第二个或之后的 SELECT，该 SELECT 依赖于外部查询；</li><li>UNION RESULT，UNION 操作的结果；</li><li>SUBQUERY，子查询中的第一个 SELECT；</li><li>DEPENDENT SUBQUERY，子查询中的第一个 SELECT，该 SELECT 依赖于外部查询；</li><li>DERIVED，派生表，即 FROM 中的子查询；</li><li>DEPENDENT DERIVED，依赖于其他表的派生表；</li><li>MATERIALIZED，物化子查询；</li><li>UNCACHEABLE SUBQUERY，无法缓存结果的子查询，对于外部表中的每一行都需要重新查询；</li><li>UNION 中第二个或之后的 SELECT，该 UNION属于 UNCACHEABLE SUBQUERY。<br>table 数据行的来源表，也有可能是以下值之一：</li><li>&lt;unionM,N&gt;，id 为 M 和 N 的 SELECT 并集运算的结果；</li><li>，id 为 N 的派生表的结果；</li><li>，id 为 N 的物化子查询的结果。<br>partitions 对于分区表而言，表示数据行所在的分区；普通表显示为 NULL。<br>type 连接类型或者访问类型，性能从好到差依次为：</li><li>system，表中只有一行数据，这是 const 类型的特殊情况；</li><li>const，最多返回一条匹配的数据，在查询的最开始读取；</li><li>eq_ref，对于前面的每一行，从该表中读取一行数据；</li><li>ref，对于前面的每一行，从该表中读取匹配索引值的所有数据行；</li><li>fulltext，通过 FULLTEXT 索引查找数据；</li><li>ref_or_null，与 ref 类似，额外加上 NULL 值查找；</li><li>index_merge，使用索引合并优化技术，此时 key 列显示使用的所有索引；</li><li>unique_subquery，替代以下情况时的 eq_ref：value IN (SELECT primary_key FROM single_table WHERE some_expr)；</li><li>index_subquery，与 unique_subquery 类似，用于子查询中的非唯一索引：value IN (SELECT key_column FROM single_table WHERE some_expr)；</li><li>range，使用索引查找范围值；</li><li>index，与 ALL 类型相同，只不过扫描的是索引；</li><li>ALL，全表扫描，通常表示存在性能问题。<br>possible_keys 可能用到的索引，实际上不一定使用。<br>key 实际使用的索引。<br>key_len 实际使用的索引的长度。<br>ref 用于和 key 中的索引进行比较的字段或者常量，从而判断是否返回数据行。<br>rows 执行查询需要检查的行数，对于 InnoDB 是一个估计值。<br>filtered 根据查询条件过滤之后行数百分比，rows × filtered 表示进入下一步处理的行数。<br>Extra 包含了额外的信息。例如 Using temporary 表示使用了临时表，Using filesort 表示需要额外的排序操作等。</li></ul><h4 id="09-openfeign解决什么问题？远程方法调用有什么要求？"><a href="#09-openfeign解决什么问题？远程方法调用有什么要求？" class="headerlink" title="09-openfeign解决什么问题？远程方法调用有什么要求？"></a>09-openfeign解决什么问题？远程方法调用有什么要求？</h4><h4 id="10-gateway网关过滤器-配置"><a href="#10-gateway网关过滤器-配置" class="headerlink" title="10-gateway网关过滤器 配置"></a>10-gateway网关过滤器 配置</h4><h4 id="01-多线程有哪几种状态？"><a href="#01-多线程有哪几种状态？" class="headerlink" title="01- 多线程有哪几种状态？"></a>01- 多线程有哪几种状态？</h4><ol><li>New:初始状态，线程被创建，没有调用start（）</li><li>Runnable:运行状态，Java线程把操作系统中的就绪和运行两种状态统一称为“运行中”</li><li>Blocked:阻塞，线程进入等待状态，线程因为某种原因，放弃了CPU的使用权<br>阻塞的几种情况：<br>A. 等待阻塞：运行的线程执行了wait()，JVM会把当前线程放入等待队列<br>B. 同步阻塞：运行的线程在获取对象的同步锁时，如果该同步锁被其他线程占用了，JVM会把当前线程放入锁池中<br>C. 其他阻塞：运行的线程执行sleep(),join()或者发出IO请求时，JVM会把当前线程设置为阻塞状态，当sleep()执行完，join()线程终止，IO处理完毕线程再次恢复</li><li>Waiting:等待状态</li><li>timed_waiting:超时等待状态，超时以后自动返回</li><li>terminated:终止状态，当前线程执行完毕</li></ol><h4 id="02-线程池有哪些参数？"><a href="#02-线程池有哪些参数？" class="headerlink" title="02-线程池有哪些参数？"></a>02-线程池有哪些参数？</h4><p>线程池的构造函数有7个参数，分别是corePoolSize、maximumPoolSize、keepAliveTime、unit、workQueue、threadFactory、handler</p><ul><li>corePoolSize <a href="https://so.csdn.net/so/search?q=%E7%BA%BF%E7%A8%8B%E6%B1%A0&spm=1001.2101.3001.7020">线程池</a>核心线程大小</li><li>maximumPoolSize 线程池最大线程数量</li><li>keepAliveTime 空闲线程存活时间</li><li>unit 空闲线程存活时间单位</li><li>workQueue 工作队列</li></ul><ol><li>ArrayBlockingQueue</li><li>LinkedBlockingQuene</li><li>SynchronousQuene</li><li>PriorityBlockingQueue</li></ol><ul><li>threadFactory 线程工厂</li><li>handler 拒绝策略</li></ul><h4 id="03-hashMap的put方法实现原理"><a href="#03-hashMap的put方法实现原理" class="headerlink" title="03-hashMap的put方法实现原理"></a>03-hashMap的put方法实现原理</h4><p>HashMap在put方法中，它使用hashCode()和equals()方法。当我们通过传递key-value对调用put方法的时候，HashMap使用Key hashCode()和哈希算法来找出存储key-value对的索引。如果索引处为空，则直接插入到对应的数组中，否则，判断是否是红黑树，若是，则红黑树插入，否则遍历链表，若长度不小于8，则将链表转为红黑树，转成功之后 再插入。</p><h4 id="04-说说对反射的理解-项目当中用到了反射吗？"><a href="#04-说说对反射的理解-项目当中用到了反射吗？" class="headerlink" title="04-说说对反射的理解 项目当中用到了反射吗？"></a>04-说说对反射的理解 项目当中用到了反射吗？</h4><ul><li>用 IoC 来注入和组装 bean</li><li>动态代理、面向切面、bean 对象中的方法替换与增强，也使用了反射</li><li>定义的注解，也是通过反射查找</li></ul><h4 id="05-什么是回表查询"><a href="#05-什么是回表查询" class="headerlink" title="05-什么是回表查询"></a>05-什么是回表查询</h4><p>特定情况下的一种查询的步骤：</p><p>一般数据库建表时，会创建索引，以普通索引为例，创建的索引结构中包含的是聚簇索引的值（一般就是主键id），在根据此普通索引进行查询时，首先会查到普通索引的位置，比如下标是110，那么会从110处取出聚簇值，也就是id值，再拿id值取表中取数据，</p><p>这个过程就叫做回表。</p><p>再说下什么是聚簇索引，一个表建立后，如果有主键，主键就是默认的聚簇索引，它的特点就是，数据的物理存储顺序和索引顺序一致，一个表建立好了，存储的物理顺序也不会再改变了，所以也说，聚簇索引只有一个。没有主键，就会自动建立。</p><h4 id="06-慢SQL日志怎么开-怎么看？"><a href="#06-慢SQL日志怎么开-怎么看？" class="headerlink" title="06-慢SQL日志怎么开 怎么看？"></a>06-慢SQL日志怎么开 怎么看？</h4><ul><li>slow_query_log：慢查询开启状态</li><li>slow_query_log_file：慢查询日志存放的位置（一般设置为 MySQL 的数据存放目录）</li><li>long_query_time：查询超过多少秒才记录</li></ul><p>可以通过 log-slow-queries 选项开启慢查询日志。通过 long_query_time 选项来设置时间值，时间以秒为单位。如果查询时间超过了这个时间值，这个查询语句将被记录到慢查询日志。</p><ul><li>dir 参数指定慢查询日志的存储路径，如果不指定存储路径，慢查询日志将默认存储到 MySQL 数据库的数据文件夹下。</li><li>filename 参数指定日志的文件名，生成日志文件的完整名称为 filename-slow.log。 如果不指定文件名，默认文件名为 hostname-slow.log，hostname 是 MySQL 服务器的主机名。</li><li>“n”参数是设定的时间值，该值的单位是秒。如果不设置 long_query_time 选项，默认时间为 10 秒。</li></ul><h4 id="07-springboot的核心注解有哪些"><a href="#07-springboot的核心注解有哪些" class="headerlink" title="07-springboot的核心注解有哪些"></a>07-springboot的核心注解有哪些</h4><ul><li><strong>@Configuration</strong></li><li><strong>@Import</strong></li><li><strong>@SpringBootApplication</strong></li><li><strong>@ConditionalOnJava</strong></li></ul><h4 id="08-springboot的启动流程？"><a href="#08-springboot的启动流程？" class="headerlink" title="08-springboot的启动流程？"></a>08-springboot的启动流程？</h4><p>0.启动main方法开始</p><p>1.<strong>初始化配置</strong>：通过类加载器，（loadFactories）读取classpath下所有的spring.factories配置文件，创建一些初始配置对象；通知监听者应用程序启动开始，创建环境对象environment，用于读取环境配置 如 application.yml</p><p>2.<strong>创建应用程序上下文</strong>-createApplicationContext，创建 bean工厂对象</p><p>3.<strong>刷新上下文（启动核心）</strong><br>3.1 配置工厂对象，包括上下文类加载器，对象发布处理器，beanFactoryPostProcessor<br>3.2 注册并实例化bean工厂发布处理器，并且调用这些处理器，对包扫描解析(主要是class文件)<br>3.3 注册并实例化bean发布处理器 beanPostProcessor<br>3.4 初始化一些与上下文有特别关系的bean对象（创建tomcat服务器）<br>3.5 实例化所有bean工厂缓存的bean对象（剩下的）<br>3.6 发布通知-通知上下文刷新完成（启动tomcat服务器）</p><p>4.<strong>通知监听者-启动程序完成</strong></p><h4 id="09-你对redis中的主从复制，哨兵模式你了解吗？"><a href="#09-你对redis中的主从复制，哨兵模式你了解吗？" class="headerlink" title="09-你对redis中的主从复制，哨兵模式你了解吗？"></a>09-你对redis中的主从复制，哨兵模式你了解吗？</h4><p>Redis主从复制 主要是分为全量同步和部分同步<br>全量同步一般发生在slave初始化阶段，这个时候slave需要将master上的数据都复制一遍，后边部分同步都是在master发生变化后，slave进行的部分同步</p><p>当一个从数据库启动的时候，会向主数据库发送sync命令<br>当主数据库收到sync命令后会在后台保存快照(执行rdb操作)，并在缓存区记录后面所有的写操作<br>当主数据库快照保存完整后，redis会将主数据库快照文件发送给从数据库<br>从数据库收到快照后，会丢弃原有的数据库，载入收到的快照<br>主数据库发送完快照后，会开始向从数据库中发送从数据库的写命令<br>从数据库完成对快照的载入，会接受请求，开始执行向从数据库中执行相对应的写操作</p><h4 id="10-微服务服务降级、熔断的实现"><a href="#10-微服务服务降级、熔断的实现" class="headerlink" title="10-微服务服务降级、熔断的实现"></a>10-微服务服务降级、熔断的实现</h4><h4 id="01spring的中设计到的设计模式"><a href="#01spring的中设计到的设计模式" class="headerlink" title="01spring的中设计到的设计模式"></a>01spring的中设计到的设计模式</h4><h4 id="02springmvc有哪些主键做什么用的？"><a href="#02springmvc有哪些主键做什么用的？" class="headerlink" title="02springmvc有哪些主键做什么用的？"></a>02springmvc有哪些主键做什么用的？</h4><h4 id="03spring如何配置事务"><a href="#03spring如何配置事务" class="headerlink" title="03spring如何配置事务"></a>03spring如何配置事务</h4><h4 id="04-aop的有哪些通知，什么特点"><a href="#04-aop的有哪些通知，什么特点" class="headerlink" title="04 aop的有哪些通知，什么特点"></a>04 aop的有哪些通知，什么特点</h4><h4 id="05-stream流你项目中如何使用"><a href="#05-stream流你项目中如何使用" class="headerlink" title="05 stream流你项目中如何使用"></a>05 stream流你项目中如何使用</h4><h3 id="2、要求"><a href="#2、要求" class="headerlink" title="2、要求"></a>2、要求</h3><p>1、上午整理面试题，自己可以查询百度等方式完成，要求,1 逻辑清晰，2语言简洁 3、3-4点即可</p><p>2、下午3点在老师桌子上拿取白纸写面试题答案，自己对自己上午的内容进行验收</p><p>3、下周会检查，验收大家周末的面试体整理情况</p><p>4、都能完成的可以继续复习整理以前的内容或者整理微服务springcloud组件</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是共产主义</title>
    <link href="/2022/11/27/%E9%A9%AC%E5%85%8B%E6%80%9D/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%B1%E4%BA%A7%E4%B8%BB%E4%B9%89/"/>
    <url>/2022/11/27/%E9%A9%AC%E5%85%8B%E6%80%9D/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%B1%E4%BA%A7%E4%B8%BB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="什么是共产主义"><a href="#什么是共产主义" class="headerlink" title="什么是共产主义"></a>什么是共产主义</h3><p>共产主义是关于无产阶级解放的条件学说<br>什么是无产阶级？<br>无产阶级是完全靠出卖自己的劳动而不是靠某一种资本的利润来获得生活资料的社会阶级，这子阶级的祸福，存亡和整个生存，都取决于对劳动的需求，既取决于生意的好坏，取决于不受限制的竞争的波动。一句话，无产阶级或无产者阶级是19世纪的劳动阶级。</p>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>杂感一</title>
    <link href="/2022/11/27/%E9%9A%8F%E6%83%B3/%E6%9D%82%E6%84%9F%E4%B8%80/"/>
    <url>/2022/11/27/%E9%9A%8F%E6%83%B3/%E6%9D%82%E6%84%9F%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="2022年08-x2F-23有记"><a href="#2022年08-x2F-23有记" class="headerlink" title="2022年08&#x2F;23有记"></a>2022年08&#x2F;23有记</h2><p>请大家原谅我的自私，一是自知学习方面比不上在座各位(修)，我所知道的，大家都知道，也比我会很多，所以在知识分享这方面我远远不如大家。二是，我的时间实属不多，当然，这里指的是能和大家一起分享自己的时间不多，机会也十分的难得，我实在不愿意把机会错过，这也是我自私的原因之一，我太想和大家一起去感受生活，感受这其中的意境之美了，至此，我今天想和大家分享的主题是：诗与远方<br>题目请容我稍后详解，我们大家因为同一个目的聚在一起，如果赋予它一个名字，姑且可以称之为缘，多少元呢，几万元，<br>其实我想说的是，在已经过去的几个月生活中，我们一起经历了平凡，<br>赋予平凡日子以意义，这就是诗<br>赋予未来以期待，这边是远方，<br>除了java我们真的可以聊天别的，以后的日子里，没有大家相聚的日子，希望能有诗，有思想，有这些陪着你们，期望你们不会寂寞。</p><p>诗，现代，写给儿子刘云帆，浪费日子，古代，苏轼，李清照<br>远方，没有远方，眼下便是最好，<br>诗非诗，比诗更重要的是情怀，在这个快节奏的生活里，感受慢</p><p>结语：昨天已经成为历史，明天还是未知，今天是一个礼物</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我喜欢的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂感</title>
    <link href="/2022/11/27/%E9%9A%8F%E6%83%B3/%E6%9D%82%E6%84%9F/"/>
    <url>/2022/11/27/%E9%9A%8F%E6%83%B3/%E6%9D%82%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>天下皆知美之为美</p><p>好的东西，无需提倡，看到自会学习，不要好为人师。礼记：行修言道，礼之质也。礼闻取于人，不闻取人。礼闻来学，不闻往教</p><p>改变不了任何人，每个人都只会被自己改变，不要去讲了，</p><p>欲望是上山的滚石，大家都明白山下是什么，但石头开始滚了，停下的几率又是多少呢。</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我喜欢的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我</title>
    <link href="/2022/11/27/%E9%9A%8F%E6%83%B3/%E6%88%91/"/>
    <url>/2022/11/27/%E9%9A%8F%E6%83%B3/%E6%88%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>今天没有学到什么东西，配置环境，下载了几个docker镜像，时间就过去了，看起来学到了一些东西，其实都是拓展罢了，<br>但这不足以促使我来写点什么，真的让我恐慌的是，突如其来的人，连一点准备都没有，突然出现在我在城市，让我手足无措，这是我曾经期盼的，期盼已久的，但不是这种突入其来的，我感觉到了退缩，感觉到压力，我不希望去承担这样一份突如其来的惊喜，我大抵是个<br>不太负责任的人，怯懦时常有的事，发生在现在确实让我感到了羞愧，我不知道要用什么样的态度去面对，</li><li>我想说的是，我不是害怕得到，大概是害怕失去，可我却也没有拥有，不知道要说什么，确实感到了躁动，我时常活在过去，留恋我失去的，于是拼命抓住了一些时间的碎片，陶醉在其中，把希望寄托在了久久的未来，今天我会想起，在昨天的时候，我总想着有一天我会怎么样，我要怎么样，总是生活的抽象，丢失了具体，除了喜欢T是这件具体的事情我忘记不了，却也是失败，过去了很久，时间走了，人也走了，只有我留在原地，在一定的范围内循环。只活在自己臆想的世界里，兜兜转转，有人回作短暂的停留，有人告诉我外面的世界，有人要带我出去，我错过可一次又一次，找了一个又一个理由。停留了一年又一年，总在自欺欺人，有人问我为什么不出去，可能一开始没有走出去，后来就一直缺失走出去的勇气了，而今，似乎我又得到了眷顾，在我的不远处，有人偏着头，笑着问了我一句，你会试着走出来吗？</li><li>也有人对我说，你不走出去吗？而我在想，我真的会出去吗！</li></ul>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我喜欢的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回执</title>
    <link href="/2022/11/27/%E9%9A%8F%E6%83%B3/%E5%9B%9E%E6%89%A7/"/>
    <url>/2022/11/27/%E9%9A%8F%E6%83%B3/%E5%9B%9E%E6%89%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>想来我是寻找到答案的，罗姐，我没有看到你们的眼睛，我看到你们的心，我也能明白他为什么会追到你了。同时，我也相信他们会把你们照顾的很好，所以，向着美好出发吧，奔向各自的人生，能够认识你们真好。我相信你所说的了，祝福再一次送给你，期待你们的未来。缘分我已经种下，就在书里，也许永远不会看到，也许会，但已经不重要了，我已经透过你，想起了许多以前的东西，或者说，我学到了很多，也感受到了很多，如果此因有果，到时候我们再把酒言欢吧！<br>2022&#x2F;09&#x2F;16 夜</p><p>想来时境过迁，也许有一天，你们开出了结果的花，那也算我送给你们的礼物吧，毕竟，有人见证的爱情，为何不让人羡慕呢，也许你会证明一些东西的存在。<br>还有些许的话，也一并说了吧，浪漫的事情，却是需要代价的，有时候也想做一个浪漫的缔造者，见证者也不错了，少时候我会感到孤单，习惯与依赖吧，有时候想找你们聊天或者见面，但想来，毕竟不合适，于情于理，时间扑面而来，我们终究渐行渐远，但，我们永远会是朋友。时间扑面而来，我们各自精彩。多少有些怀念当初啊~<br>2022&#x2F;09&#x2F;23 夜</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我喜欢的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stream流</title>
    <link href="/2022/11/27/Java/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/11/27/Java/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="函数式编程-Stream流"><a href="#函数式编程-Stream流" class="headerlink" title="函数式编程-Stream流"></a>函数式编程-Stream流</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-为什么学？"><a href="#1-1-为什么学？" class="headerlink" title="1.1 为什么学？"></a>1.1 为什么学？</h3><ul><li>能够看懂公司里的代码</li><li>大数量下处理集合效率高</li><li>代码可读性高</li><li>消灭嵌套地狱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询未成年作家的评分在70以上的书籍 由于洋流影响所以作家和书籍可能出现重复，需要进行去重</span><br>List&lt;Book&gt; bookList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Set&lt;Book&gt; uniqueBookValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>Set&lt;Author&gt; uniqueAuthorValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Author author : authors) &#123;<br>    <span class="hljs-keyword">if</span> (uniqueAuthorValues.add(author)) &#123;<br>        <span class="hljs-keyword">if</span> (author.getAge() &lt; <span class="hljs-number">18</span>) &#123;<br>            List&lt;Book&gt; books = author.getBooks();<br>            <span class="hljs-keyword">for</span> (Book book : books) &#123;<br>                <span class="hljs-keyword">if</span> (book.getScore() &gt; <span class="hljs-number">70</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (uniqueBookValues.add(book)) &#123;<br>                        bookList.add(book);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>System.out.println(bookList);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; collect = authors.stream()<br>    .distinct()<br>    .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">18</span>)<br>    .map(author -&gt; author.getBooks())<br>    .flatMap(Collection::stream)<br>    .filter(book -&gt; book.getScore() &gt; <span class="hljs-number">70</span>)<br>    .distinct()<br>    .collect(Collectors.toList());<br>System.out.println(collect);<br></code></pre></td></tr></table></figure><h3 id="1-2-函数式编程思想"><a href="#1-2-函数式编程思想" class="headerlink" title="1.2 函数式编程思想"></a>1.2 函数式编程思想</h3><h4 id="1-2-1-概念"><a href="#1-2-1-概念" class="headerlink" title="1.2.1 概念"></a>1.2.1 概念</h4><p>​面向对象思想需要关注用什么对象完成什么事情。而函数式编程思想就类似于我们数学中的函数。它主要关注的是对数据进行了什么操作。</p><h4 id="1-2-2-优点"><a href="#1-2-2-优点" class="headerlink" title="1.2.2 优点"></a>1.2.2 优点</h4><ul><li>代码简洁，开发快速</li><li>接近自然语言，易于理解</li><li>易于”并发编程”</li></ul><h2 id="2-Lambda表达式"><a href="#2-Lambda表达式" class="headerlink" title="2. Lambda表达式"></a>2. Lambda表达式</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>​Lambda是JDK8中一个语法糖。他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。让我们不用关注是什么对象。而是更关注我们对数据进行了什么操作。</p><h3 id="2-2-核心原则"><a href="#2-2-核心原则" class="headerlink" title="2.2 核心原则"></a>2.2 核心原则</h3><blockquote><p>可推导可省略</p></blockquote><h3 id="2-3-基本格式"><a href="#2-3-基本格式" class="headerlink" title="2. 3 基本格式"></a>2. 3 基本格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(参数列表)-&gt;&#123;代码&#125;<br></code></pre></td></tr></table></figure><h4 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h4><p>我们在创建线程并启动时可以使用匿名内部类的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;你知道吗 我比你想象的 更想在你身边&quot;</span>);<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><p>可以使用Lambda的格式对其进行修改。修改后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;你知道吗 我比你想象的 更想在你身边&quot;</span>);<br>&#125;).start();<br></code></pre></td></tr></table></figure><h4 id="例二"><a href="#例二" class="headerlink" title="例二:"></a>例二:</h4><p>现有方法定义如下，其中IntBinaryOperator是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateNum</span><span class="hljs-params">(IntBinaryOperator operator)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">return</span> operator.applyAsInt(a, b);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> calculateNum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntBinaryOperator</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">applyAsInt</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>            <span class="hljs-keyword">return</span> left + right;<br>        &#125;<br>    &#125;);<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> calculateNum((<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)-&gt;&#123;<br>        <span class="hljs-keyword">return</span> left + right;<br>    &#125;);<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例三："><a href="#例三：" class="headerlink" title="例三："></a>例三：</h4><p>现有方法定义如下，其中IntPredicate是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNum</span><span class="hljs-params">(IntPredicate predicate)</span>&#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        <span class="hljs-keyword">if</span>(predicate.test(i))&#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    printNum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntPredicate</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>            <span class="hljs-keyword">return</span> value%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    printNum((<span class="hljs-type">int</span> value)-&gt; &#123;<br>        <span class="hljs-keyword">return</span> value%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;<br>    &#125;);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNum</span><span class="hljs-params">(IntPredicate predicate)</span>&#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        <span class="hljs-keyword">if</span>(predicate.test(i))&#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例四："><a href="#例四：" class="headerlink" title="例四："></a>例四：</h4><p>现有方法定义如下，其中Function是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;R&gt; R <span class="hljs-title function_">typeConver</span><span class="hljs-params">(Function&lt;String,R&gt; function)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1235&quot;</span>;<br>    <span class="hljs-type">R</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> function.apply(str);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> typeConver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, Integer&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;<br>            <span class="hljs-keyword">return</span> Integer.valueOf(s);<br>        &#125;<br>    &#125;);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> typeConver((String s)-&gt;&#123;<br>    <span class="hljs-keyword">return</span> Integer.valueOf(s);<br>&#125;);<br>System.out.println(result);<br><br></code></pre></td></tr></table></figure><h4 id="例五："><a href="#例五：" class="headerlink" title="例五："></a>例五：</h4><p>现有方法定义如下，其中IntConsumer是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreachArr</span><span class="hljs-params">(IntConsumer consumer)</span>&#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>        consumer.accept(i);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    foreachArr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntConsumer</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>            System.out.println(value);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    foreachArr((<span class="hljs-type">int</span> value)-&gt;&#123;<br>        System.out.println(value);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-省略规则"><a href="#2-4-省略规则" class="headerlink" title="2.4 省略规则"></a>2.4 省略规则</h3><ul><li>参数类型可以省略</li><li>方法体只有一句代码时大括号return和唯一一句代码的分号可以省略</li><li>方法只有一个参数时小括号可以省略</li><li>以上这些规则都记不住也可以省略不记</li></ul><h2 id="3-Stream流"><a href="#3-Stream流" class="headerlink" title="3. Stream流"></a>3. Stream流</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>​Java8的Stream使用的是函数式编程模式，如同它的名字一样，它可以被用来对集合或数组进行链状流式的操作。可以更方便的让我们对集合或数组操作。</p><h3 id="3-2-案例数据准备"><a href="#3-2-案例数据准备" class="headerlink" title="3.2 案例数据准备"></a>3.2 案例数据准备</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@EqualsAndHashCode</span><span class="hljs-comment">//用于后期的去重使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;<br>    <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">//简介</span><br>    <span class="hljs-keyword">private</span> String intro;<br>    <span class="hljs-comment">//作品</span><br>    <span class="hljs-keyword">private</span> List&lt;Book&gt; books;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@EqualsAndHashCode</span><span class="hljs-comment">//用于后期的去重使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">//书名</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//分类</span><br>    <span class="hljs-keyword">private</span> String category;<br><br>    <span class="hljs-comment">//评分</span><br>    <span class="hljs-keyword">private</span> Integer score;<br><br>    <span class="hljs-comment">//简介</span><br>    <span class="hljs-keyword">private</span> String intro;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Author&gt; <span class="hljs-title function_">getAuthors</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//数据初始化</span><br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">&quot;蒙多&quot;</span>,<span class="hljs-number">33</span>,<span class="hljs-string">&quot;一个从菜刀中明悟哲理的祖安人&quot;</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">2L</span>,<span class="hljs-string">&quot;亚拉索&quot;</span>,<span class="hljs-number">15</span>,<span class="hljs-string">&quot;狂风也追逐不上他的思考速度&quot;</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">&quot;易&quot;</span>,<span class="hljs-number">14</span>,<span class="hljs-string">&quot;是这个世界在限制他的思维&quot;</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">&quot;易&quot;</span>,<span class="hljs-number">14</span>,<span class="hljs-string">&quot;是这个世界在限制他的思维&quot;</span>,<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">//书籍列表</span><br>    List&lt;Book&gt; books1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;Book&gt; books2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;Book&gt; books3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1L</span>,<span class="hljs-string">&quot;刀的两侧是光明与黑暗&quot;</span>,<span class="hljs-string">&quot;哲学,爱情&quot;</span>,<span class="hljs-number">88</span>,<span class="hljs-string">&quot;用一把刀划分了爱恨&quot;</span>));<br>    books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">2L</span>,<span class="hljs-string">&quot;一个人不能死在同一把刀下&quot;</span>,<span class="hljs-string">&quot;个人成长,爱情&quot;</span>,<span class="hljs-number">99</span>,<span class="hljs-string">&quot;讲述如何从失败中明悟真理&quot;</span>));<br><br>    books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">&quot;那风吹不到的地方&quot;</span>,<span class="hljs-string">&quot;哲学&quot;</span>,<span class="hljs-number">85</span>,<span class="hljs-string">&quot;带你用思维去领略世界的尽头&quot;</span>));<br>    books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">3L</span>,<span class="hljs-string">&quot;那风吹不到的地方&quot;</span>,<span class="hljs-string">&quot;哲学&quot;</span>,<span class="hljs-number">85</span>,<span class="hljs-string">&quot;带你用思维去领略世界的尽头&quot;</span>));<br>    books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">4L</span>,<span class="hljs-string">&quot;吹或不吹&quot;</span>,<span class="hljs-string">&quot;爱情,个人传记&quot;</span>,<span class="hljs-number">56</span>,<span class="hljs-string">&quot;一个哲学家的恋爱观注定很难把他所在的时代理解&quot;</span>));<br><br>    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">5L</span>,<span class="hljs-string">&quot;你的剑就是我的剑&quot;</span>,<span class="hljs-string">&quot;爱情&quot;</span>,<span class="hljs-number">56</span>,<span class="hljs-string">&quot;无法想象一个武者能对他的伴侣这么的宽容&quot;</span>));<br>    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">6L</span>,<span class="hljs-string">&quot;风与剑&quot;</span>,<span class="hljs-string">&quot;个人传记&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br>    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">6L</span>,<span class="hljs-string">&quot;风与剑&quot;</span>,<span class="hljs-string">&quot;个人传记&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br><br>    author.setBooks(books1);<br>    author2.setBooks(books2);<br>    author3.setBooks(books3);<br>    author4.setBooks(books3);<br><br>    List&lt;Author&gt; authorList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(author,author2,author3,author4));<br>    <span class="hljs-keyword">return</span> authorList;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-快速入门"><a href="#3-3-快速入门" class="headerlink" title="3.3 快速入门"></a>3.3 快速入门</h3><h4 id="3-3-1-需求"><a href="#3-3-1-需求" class="headerlink" title="3.3.1 需求"></a>3.3.1 需求</h4><p>​我们可以调用getAuthors方法获取到作家的集合。现在需要打印所有年龄小于18的作家的名字，并且要注意去重。</p><h4 id="3-3-2-实现"><a href="#3-3-2-实现" class="headerlink" title="3.3.2 实现"></a>3.3.2 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//打印所有年龄小于18的作家的名字，并且要注意去重</span><br>List&lt;Author&gt; authors = getAuthors();<br>authors.<br>        stream()<span class="hljs-comment">//把集合转换成流</span><br>        .distinct()<span class="hljs-comment">//先去除重复的作家</span><br>        .filter(author -&gt; author.getAge()&lt;<span class="hljs-number">18</span>)<span class="hljs-comment">//筛选年龄小于18的</span><br>        .forEach(author -&gt; System.out.println(author.getName()));<span class="hljs-comment">//遍历打印名字</span><br></code></pre></td></tr></table></figure><h3 id="3-4-常用操作"><a href="#3-4-常用操作" class="headerlink" title="3.4 常用操作"></a>3.4 常用操作</h3><h4 id="3-4-1-创建流"><a href="#3-4-1-创建流" class="headerlink" title="3.4.1 创建流"></a>3.4.1 创建流</h4><p>单列集合： <code>集合对象.stream()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">      List&lt;Author&gt; authors = getAuthors();<br>Stream&lt;Author&gt; stream = authors.stream();<br></code></pre></td></tr></table></figure><p>数组：<code>Arrays.stream(数组) </code>或者使用<code>Stream.of</code>来创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Integer[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>Stream&lt;Integer&gt; stream = Arrays.stream(arr);<br>Stream&lt;Integer&gt; stream2 = Stream.of(arr);<br></code></pre></td></tr></table></figure><p>双列集合：转换成单列集合后再创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;蜡笔小新&quot;</span>,<span class="hljs-number">19</span>);<br>map.put(<span class="hljs-string">&quot;黑子&quot;</span>,<span class="hljs-number">17</span>);<br>map.put(<span class="hljs-string">&quot;日向翔阳&quot;</span>,<span class="hljs-number">16</span>);<br><br>Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = map.entrySet().stream();<br></code></pre></td></tr></table></figure><h4 id="3-4-2-中间操作"><a href="#3-4-2-中间操作" class="headerlink" title="3.4.2 中间操作"></a>3.4.2 中间操作</h4><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>​可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中。</p><p>例如：</p><p>​打印所有姓名长度大于1的作家的姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .filter(author -&gt; author.getName().length()&gt;<span class="hljs-number">1</span>)<br>        .forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>​可以把对流中的元素进行计算或转换。</p><p>例如：</p><p>​打印所有作家的姓名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>authors<br>        .stream()<br>        .map(author -&gt; author.getName())<br>        .forEach(name-&gt;System.out.println(name));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印所有作家的姓名</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br><span class="hljs-comment">//        authors.stream()</span><br><span class="hljs-comment">//                .map(author -&gt; author.getName())</span><br><span class="hljs-comment">//                .forEach(s -&gt; System.out.println(s));</span><br><br>        authors.stream()<br>                .map(author -&gt; author.getAge())<br>                .map(age-&gt;age+<span class="hljs-number">10</span>)<br>                .forEach(age-&gt; System.out.println(age));<br></code></pre></td></tr></table></figure><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><p>​可以去除流中的重复元素。</p><p>例如：</p><p>​打印所有作家的姓名，并且要求其中不能有重复元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .distinct()<br>        .forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><p><strong>注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</strong></p><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>​可以对流中的元素进行排序。</p><p>例如：</p><p>​对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">        List&lt;Author&gt; authors = getAuthors();<br><span class="hljs-comment">//        对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span><br>        authors.stream()<br>                .distinct()<br>                .sorted()<br>                .forEach(author -&gt; System.out.println(author.getAge()));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">        List&lt;Author&gt; authors = getAuthors();<br><span class="hljs-comment">//        对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span><br>        authors.stream()<br>                .distinct()<br>                .sorted((o1, o2) -&gt; o2.getAge()-o1.getAge())<br>                .forEach(author -&gt; System.out.println(author.getAge()));<br></code></pre></td></tr></table></figure><p><strong>注意：如果调用空参的sorted()方法，需要流中的元素是实现了Comparable。</strong></p><p>​</p><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>​可以设置流的最大长度，超出的部分将被抛弃。</p><p>例如：</p><p>​对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素,然后打印其中年龄最大的两个作家的姓名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .distinct()<br>        .sorted()<br>        .limit(<span class="hljs-number">2</span>)<br>        .forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><p>​跳过流中的前n个元素，返回剩下的元素</p><p>例如：</p><p>​打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        authors.stream()<br>                .distinct()<br>                .sorted()<br>                .skip(<span class="hljs-number">1</span>)<br>                .forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><p>​map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p><p>例一：</p><p>​打印所有书籍的名字。要求对重复的元素进行去重。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印所有书籍的名字。要求对重复的元素进行去重。</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .distinct()<br>                .forEach(book -&gt; System.out.println(book.getName()));<br></code></pre></td></tr></table></figure><p>例二：</p><p>​打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情     爱情</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .distinct()<br>                .flatMap(book -&gt; Arrays.stream(book.getCategory().split(<span class="hljs-string">&quot;,&quot;</span>)))<br>                .distinct()<br>                .forEach(category-&gt; System.out.println(category));<br></code></pre></td></tr></table></figure><h4 id="3-4-3-终结操作"><a href="#3-4-3-终结操作" class="headerlink" title="3.4.3 终结操作"></a>3.4.3 终结操作</h4><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><p>​对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作。</p><p>例子：</p><p>​输出所有作家的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        输出所有作家的名字</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        authors.stream()<br>                .map(author -&gt; author.getName())<br>                .distinct()<br>                .forEach(name-&gt; System.out.println(name));<br><br></code></pre></td></tr></table></figure><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>​可以用来获取当前流中元素的个数。</p><p>例子：</p><p>​打印这些作家的所出书籍的数目，注意删除重复元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印这些作家的所出书籍的数目，注意删除重复元素。</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .distinct()<br>                .count();<br>        System.out.println(count);<br></code></pre></td></tr></table></figure><h5 id="max-amp-min"><a href="#max-amp-min" class="headerlink" title="max&amp;min"></a>max&amp;min</h5><p>​可以用来或者流中的最值。</p><p>例子：</p><p>​分别获取这些作家的所出书籍的最高分和最低分并打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        分别获取这些作家的所出书籍的最高分和最低分并打印。</span><br>        <span class="hljs-comment">//Stream&lt;Author&gt;  -&gt; Stream&lt;Book&gt; -&gt;Stream&lt;Integer&gt;  -&gt;求值</span><br><br>        List&lt;Author&gt; authors = getAuthors();<br>        Optional&lt;Integer&gt; max = authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .map(book -&gt; book.getScore())<br>                .max((score1, score2) -&gt; score1 - score2);<br><br>        Optional&lt;Integer&gt; min = authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .map(book -&gt; book.getScore())<br>                .min((score1, score2) -&gt; score1 - score2);<br>        System.out.println(max.get());<br>        System.out.println(min.get());<br></code></pre></td></tr></table></figure><h5 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h5><p>​把当前流转换成一个集合。</p><p>例子：</p><p>​获取一个存放所有作者名字的List集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取一个存放所有作者名字的List集合。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        List&lt;String&gt; nameList = authors.stream()<br>                .map(author -&gt; author.getName())<br>                .collect(Collectors.toList());<br>        System.out.println(nameList);<br></code></pre></td></tr></table></figure><p>​获取一个所有书名的Set集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取一个所有书名的Set集合。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        Set&lt;Book&gt; books = authors.stream()<br>                .flatMap(author -&gt; author.getBooks().stream())<br>                .collect(Collectors.toSet());<br><br>        System.out.println(books);<br></code></pre></td></tr></table></figure><p>​获取一个Map集合，map的key为作者名，value为List<Book></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取一个Map集合，map的key为作者名，value为List&lt;Book&gt;</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        Map&lt;String, List&lt;Book&gt;&gt; map = authors.stream()<br>                .distinct()<br>                .collect(Collectors.toMap(author -&gt; author.getName(), author -&gt; author.getBooks()));<br><br>        System.out.println(map);<br></code></pre></td></tr></table></figure><h5 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h5><h6 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h6><p>​可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。</p><p>例子：</p><p>​判断是否有年龄在29以上的作家</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        判断是否有年龄在29以上的作家</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> authors.stream()<br>                .anyMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">29</span>);<br>        System.out.println(flag);<br></code></pre></td></tr></table></figure><h6 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h6><p>​可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则结果为false。</p><p>例子：</p><p>​判断是否所有的作家都是成年人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        判断是否所有的作家都是成年人</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> authors.stream()<br>                .allMatch(author -&gt; author.getAge() &gt;= <span class="hljs-number">18</span>);<br>        System.out.println(flag);<br></code></pre></td></tr></table></figure><h6 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h6><p>​可以判断流中的元素是否都不符合匹配条件。如果都不符合结果为true，否则结果为false</p><p>例子：</p><p>​判断作家是否都没有超过100岁的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        判断作家是否都没有超过100岁的。</span><br>        List&lt;Author&gt; authors = getAuthors();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> authors.stream()<br>                .noneMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">100</span>);<br><br>        System.out.println(b);<br></code></pre></td></tr></table></figure><h6 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h6><p>​获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素。</p><p>例子：</p><p>​获取任意一个年龄大于18的作家，如果存在就输出他的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取任意一个年龄大于18的作家，如果存在就输出他的名字</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        Optional&lt;Author&gt; optionalAuthor = authors.stream()<br>                .filter(author -&gt; author.getAge()&gt;<span class="hljs-number">18</span>)<br>                .findAny();<br><br>        optionalAuthor.ifPresent(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h6 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h6><p>​获取流中的第一个元素。</p><p>例子：</p><p>​获取一个年龄最小的作家，并输出他的姓名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        获取一个年龄最小的作家，并输出他的姓名。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        Optional&lt;Author&gt; first = authors.stream()<br>                .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())<br>                .findFirst();<br><br>        first.ifPresent(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h5 id="reduce归并"><a href="#reduce归并" class="headerlink" title="reduce归并"></a>reduce归并</h5><p>​对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）</p><p>​reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。</p><p>​reduce两个参数的重载形式内部的计算方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> identity;<br><span class="hljs-keyword">for</span> (T element : <span class="hljs-built_in">this</span> stream)<br>result = accumulator.apply(result, element)<br><span class="hljs-keyword">return</span> result;<br></code></pre></td></tr></table></figure><p>​其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。</p><p>例子：</p><p>​使用reduce求所有作者年龄的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        使用reduce求所有作者年龄的和</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> authors.stream()<br>                .distinct()<br>                .map(author -&gt; author.getAge())<br>                .reduce(<span class="hljs-number">0</span>, (result, element) -&gt; result + element);<br>        System.out.println(sum);<br></code></pre></td></tr></table></figure><p>​使用reduce求所有作者中年龄的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        使用reduce求所有作者中年龄的最大值</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> authors.stream()<br>                .map(author -&gt; author.getAge())<br>                .reduce(Integer.MIN_VALUE, (result, element) -&gt; result &lt; element ? element : result);<br><br>        System.out.println(max);<br></code></pre></td></tr></table></figure><p>​使用reduce求所有作者中年龄的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        使用reduce求所有作者中年龄的最小值</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> authors.stream()<br>                .map(author -&gt; author.getAge())<br>                .reduce(Integer.MAX_VALUE, (result, element) -&gt; result &gt; element ? element : result);<br>        System.out.println(min);<br></code></pre></td></tr></table></figure><p>​reduce一个参数的重载形式内部的计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">foundAny</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">for</span> (T element : <span class="hljs-built_in">this</span> stream) &#123;<br>      <span class="hljs-keyword">if</span> (!foundAny) &#123;<br>          foundAny = <span class="hljs-literal">true</span>;<br>          result = element;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>          result = accumulator.apply(result, element);<br>  &#125;<br>  <span class="hljs-keyword">return</span> foundAny ? Optional.of(result) : Optional.empty();<br></code></pre></td></tr></table></figure><p>​如果用一个参数的重载方法去求最小值代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        使用reduce求所有作者中年龄的最小值</span><br>List&lt;Author&gt; authors = getAuthors();<br>Optional&lt;Integer&gt; minOptional = authors.stream()<br>        .map(author -&gt; author.getAge())<br>        .reduce((result, element) -&gt; result &gt; element ? element : result);<br>minOptional.ifPresent(age-&gt; System.out.println(age));<br></code></pre></td></tr></table></figure><h3 id="3-5-注意事项"><a href="#3-5-注意事项" class="headerlink" title="3.5 注意事项"></a>3.5 注意事项</h3><ul><li>惰性求值（如果没有终结操作，没有中间操作是不会得到执行的）</li><li>流是一次性的（一旦一个流对象经过一个终结操作后。这个流就不能再被使用）</li><li>不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）</li></ul><h2 id="4-Optional"><a href="#4-Optional" class="headerlink" title="4. Optional"></a>4. Optional</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>​我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。</p><p>​例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> getAuthor();<br><span class="hljs-keyword">if</span>(author!=<span class="hljs-literal">null</span>)&#123;<br>    System.out.println(author.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p>​尤其是对象中的属性还是一个对象的情况下。这种判断会更多。</p><p>​而过多的判断语句会让我们的代码显得臃肿不堪。</p><p>​所以在JDK8中引入了Optional,养成使用Optional的习惯后你可以写出更优雅的代码来避免空指针异常。</p><p>​并且在很多函数式编程相关的API中也都用到了Optional，如果不会使用Optional也会对函数式编程的学习造成影响。</p><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><h4 id="4-2-1-创建对象"><a href="#4-2-1-创建对象" class="headerlink" title="4.2.1 创建对象"></a>4.2.1 创建对象</h4><p>​Optional就好像是包装类，可以把我们的具体数据封装Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数据就可以非常优雅的避免空指针异常。</p><p>​我们一般使用<strong>Optional</strong>的<strong>静态方法ofNullable</strong>来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> getAuthor();<br>Optional&lt;Author&gt; authorOptional = Optional.ofNullable(author);<br></code></pre></td></tr></table></figure><p>​你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下getAuthor方法，让其的返回值就是封装好的Optional的话，我们在使用时就会方便很多。</p><p>​而且在实际开发中我们的数据很多是从数据库获取的。Mybatis从3.5版本可以也已经支持Optional了。我们可以直接把dao方法的返回值类型定义成Optional类型，MyBastis会自己把数据封装成Optional对象返回。封装的过程也不需要我们自己操作。</p><p>​如果你<strong>确定一个对象不是空</strong>的则可以使用<strong>Optional</strong>的<strong>静态方法of</strong>来把数据封装成Optional对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>();<br>Optional&lt;Author&gt; authorOptional = Optional.of(author);<br></code></pre></td></tr></table></figure><p>​但是一定要注意，如果使用of的时候传入的参数必须不为null。（尝试下传入null会出现什么结果）</p><p>​如果一个方法的返回值类型是Optional类型。而如果我们经判断发现某次计算得到的返回值为null，这个时候就需要把null封装成Optional对象返回。这时则可以使用<strong>Optional</strong>的<strong>静态方法empty</strong>来进行封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional.empty()<br></code></pre></td></tr></table></figure><p>​</p><p>​所以最后你觉得哪种方式会更方便呢？<strong>ofNullable</strong></p><h4 id="4-2-2-安全消费值"><a href="#4-2-2-安全消费值" class="headerlink" title="4.2.2 安全消费值"></a>4.2.2 安全消费值</h4><p>​我们获取到一个Optional对象后肯定需要对其中的数据进行使用。这时候我们可以使用其<strong>ifPresent</strong>方法对来消费其中的值。</p><p>​这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。</p><p>​例如,以下写法就优雅的避免了空指针异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br><br>authorOptional.ifPresent(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure><h4 id="4-2-3-获取值"><a href="#4-2-3-获取值" class="headerlink" title="4.2.3 获取值"></a>4.2.3 获取值</h4><p>​如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。</p><h4 id="4-2-4-安全获取值"><a href="#4-2-4-安全获取值" class="headerlink" title="4.2.4 安全获取值"></a>4.2.4 安全获取值</h4><p>​如果我们期望安全的获取值。我们不推荐使用get方法，而是使用Optional提供的以下方法。</p><ul><li><p>orElseGet</p><p>获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认值返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br><span class="hljs-type">Author</span> <span class="hljs-variable">author1</span> <span class="hljs-operator">=</span> authorOptional.orElseGet(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>());<br></code></pre></td></tr></table></figure></li><li><p>orElseThrow</p><p>获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> authorOptional.orElseThrow((Supplier&lt;Throwable&gt;) () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;author为空&quot;</span>));<br>    System.out.println(author.getName());<br>&#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>    throwable.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="4-2-5-过滤"><a href="#4-2-5-过滤" class="headerlink" title="4.2.5 过滤"></a>4.2.5 过滤</h4><p>​我们可以使用filter方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的Optional对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br>authorOptional.filter(author -&gt; author.getAge()&gt;<span class="hljs-number">100</span>).ifPresent(author -&gt; System.out.println(author.getName()));<br><br></code></pre></td></tr></table></figure><h4 id="4-2-6-判断"><a href="#4-2-6-判断" class="headerlink" title="4.2.6 判断"></a>4.2.6 判断</h4><p>​我们可以使用isPresent方法进行是否存在数据的判断。如果为空返回值为false,如果不为空，返回值为true。但是这种方式并不能体现Optional的好处，<strong>更推荐使用ifPresent方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());<br><br><span class="hljs-keyword">if</span> (authorOptional.isPresent()) &#123;<br>    System.out.println(authorOptional.get().getName());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-7-数据转换"><a href="#4-2-7-数据转换" class="headerlink" title="4.2.7 数据转换"></a>4.2.7 数据转换</h4><p>​Optional还提供了map可以让我们的对数据进行转换，并且转换得到的数据也还是被Optional包装好的，保证了我们的使用安全。</p><p>例如我们想获取作家的书籍集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMap</span><span class="hljs-params">()</span> &#123;<br>    Optional&lt;Author&gt; authorOptional = getAuthorOptional();<br>    Optional&lt;List&lt;Book&gt;&gt; optionalBooks = authorOptional.map(author -&gt; author.getBooks());<br>    optionalBooks.ifPresent(books -&gt; System.out.println(books));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-函数式接口"><a href="#5-函数式接口" class="headerlink" title="5. 函数式接口"></a>5. 函数式接口</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>​<strong>只有一个抽象方法</strong>的接口我们称之为函数接口。</p><p>​JDK的函数式接口都加上了**@FunctionalInterface** 注解进行标识。但是无论是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p><h3 id="5-2-常见函数式接口"><a href="#5-2-常见函数式接口" class="headerlink" title="5.2 常见函数式接口"></a>5.2 常见函数式接口</h3><ul><li><p>​Consumer 消费接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数进行消费。</p><p><img src="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.assets/image-20211028145622163-16354041894551.png" alt="image-20211028145622163"></p></li><li><p>​Function 计算转换接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数计算或转换，把结果返回</p><p><img src="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.assets/image-20211028145707862-16354042291112.png" alt="image-20211028145707862"></p></li><li><p>​Predicate 判断接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数条件判断，返回判断结果</p><p><img src="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.assets/image-20211028145818743-16354043004393.png" alt="image-20211028145818743"></p></li><li><p>​Supplier 生产型接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回</p></li></ul><p><img src="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.assets/image-20211028145843368-16354043246954.png" alt="image-20211028145843368"></p><h3 id="5-3-常用的默认方法"><a href="#5-3-常用的默认方法" class="headerlink" title="5.3 常用的默认方法"></a>5.3 常用的默认方法</h3><ul><li><p>and</p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而and方法相当于是使用&amp;&amp;来拼接两个判断条件</p><p>例如：</p><p>打印作家中年龄大于17并且姓名的长度大于1的作家。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>Stream&lt;Author&gt; authorStream = authors.stream();<br>authorStream.filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>        <span class="hljs-keyword">return</span> author.getAge()&gt;<span class="hljs-number">17</span>;<br>    &#125;<br>&#125;.and(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>        <span class="hljs-keyword">return</span> author.getName().length()&gt;<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;)).forEach(author -&gt; System.out.println(author));<br></code></pre></td></tr></table></figure></li><li><p>or </p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而or方法相当于是使用||来拼接两个判断条件。</p><p>例如：</p><p>打印作家中年龄大于17或者姓名的长度小于2的作家。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印作家中年龄大于17或者姓名的长度小于2的作家。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        authors.stream()<br>                .filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>                        <span class="hljs-keyword">return</span> author.getAge()&gt;<span class="hljs-number">17</span>;<br>                    &#125;<br>                &#125;.or(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>                        <span class="hljs-keyword">return</span> author.getName().length()&lt;<span class="hljs-number">2</span>;<br>                    &#125;<br>                &#125;)).forEach(author -&gt; System.out.println(author.getName()));<br></code></pre></td></tr></table></figure></li><li><p>negate</p><p>Predicate接口中的方法。negate方法相当于是在判断添加前面加了个! 表示取反</p><p>例如：</p><p>打印作家中年龄不大于17的作家。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        打印作家中年龄不大于17的作家。</span><br>        List&lt;Author&gt; authors = getAuthors();<br>        authors.stream()<br>                .filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;<br>                        <span class="hljs-keyword">return</span> author.getAge()&gt;<span class="hljs-number">17</span>;<br>                    &#125;<br>                &#125;.negate()).forEach(author -&gt; System.out.println(author.getAge()));<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-方法引用"><a href="#6-方法引用" class="headerlink" title="6. 方法引用"></a>6. 方法引用</h2><p>​我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法）,我们可以用方法引用进一步简化代码。</p><h3 id="6-1-推荐用法"><a href="#6-1-推荐用法" class="headerlink" title="6.1 推荐用法"></a>6.1 推荐用法</h3><p>​我们在使用lambda时不需要考虑什么时候用方法引用，用哪种方法引用，方法引用的格式是什么。我们只需要在写完lambda方法发现方法体只有一行代码，并且是方法的调用时使用快捷键尝试是否能够转换成方法引用即可。</p><p>​当我们方法引用使用的多了慢慢的也可以直接写出方法引用。</p><h3 id="6-2-基本格式"><a href="#6-2-基本格式" class="headerlink" title="6.2 基本格式"></a>6.2 基本格式</h3><p>​类名或者对象名::方法名</p><h3 id="6-3-语法详解-了解"><a href="#6-3-语法详解-了解" class="headerlink" title="6.3 语法详解(了解)"></a>6.3 语法详解(了解)</h3><h4 id="6-3-1-引用类的静态方法"><a href="#6-3-1-引用类的静态方法" class="headerlink" title="6.3.1 引用类的静态方法"></a>6.3.1 引用类的静态方法</h4><p>​其实就是引用类的静态方法</p><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名::方法名<br></code></pre></td></tr></table></figure><h5 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的静态方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个静态方法中</strong>，这个时候我们就可以引用类的静态方法。</p><p>​</p><p>例如：</p><p>如下代码就可以用方法引用进行简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>Stream&lt;Author&gt; authorStream = authors.stream();<br><br>authorStream.map(author -&gt; author.getAge())<br>        .map(age-&gt;String.valueOf(age));<br></code></pre></td></tr></table></figure><p>注意，如果我们所重写的方法是没有参数的，调用的方法也是没有参数的也相当于符合以上规则。</p><p>优化后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>Stream&lt;Author&gt; authorStream = authors.stream();<br><br>authorStream.map(author -&gt; author.getAge())<br>        .map(String::valueOf);<br></code></pre></td></tr></table></figure><h4 id="6-3-2-引用对象的实例方法"><a href="#6-3-2-引用对象的实例方法" class="headerlink" title="6.3.2 引用对象的实例方法"></a>6.3.2 引用对象的实例方法</h4><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对象名::方法名<br></code></pre></td></tr></table></figure><h5 id="使用前提-1"><a href="#使用前提-1" class="headerlink" title="使用前提"></a>使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用对象的实例方法</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>Stream&lt;Author&gt; authorStream = authors.stream();<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>authorStream.map(author -&gt; author.getName())<br>        .forEach(name-&gt;sb.append(name));<br></code></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br><br>Stream&lt;Author&gt; authorStream = authors.stream();<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>authorStream.map(author -&gt; author.getName())<br>        .forEach(sb::append);<br></code></pre></td></tr></table></figure><h4 id="6-3-4-引用类的实例方法"><a href="#6-3-4-引用类的实例方法" class="headerlink" title="6.3.4 引用类的实例方法"></a>6.3.4 引用类的实例方法</h4><h5 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名::方法名<br></code></pre></td></tr></table></figure><h5 id="使用前提-2"><a href="#使用前提-2" class="headerlink" title="使用前提"></a>使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了第一个参数的成员方法</strong>，并且我们把要<strong>重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用类的实例方法。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UseString</span>&#123;<br>       String <span class="hljs-title function_">use</span><span class="hljs-params">(String str,<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> length)</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">subAuthorName</span><span class="hljs-params">(String str, UseString useString)</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">return</span> useString.use(str,start,length);<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>       subAuthorName(<span class="hljs-string">&quot;三更草堂&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UseString</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> String <span class="hljs-title function_">use</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> length)</span> &#123;<br>               <span class="hljs-keyword">return</span> str.substring(start,length);<br>           &#125;<br>       &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>优化后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    subAuthorName(<span class="hljs-string">&quot;三更草堂&quot;</span>, String::substring);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-3-5-构造器引用"><a href="#6-3-5-构造器引用" class="headerlink" title="6.3.5 构造器引用"></a>6.3.5 构造器引用</h4><p>​如果方法体中的一行代码是构造器的话就可以使用构造器引用。</p><h5 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名::<span class="hljs-keyword">new</span><br></code></pre></td></tr></table></figure><h5 id="使用前提-3"><a href="#使用前提-3" class="headerlink" title="使用前提"></a>使用前提</h5><p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的构造方法</strong>，并且我们把<strong>要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中</strong>，这个时候我们就可以引用构造器。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .map(author -&gt; author.getName())<br>        .map(name-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(name))<br>        .map(sb-&gt;sb.append(<span class="hljs-string">&quot;-三更&quot;</span>).toString())<br>        .forEach(str-&gt; System.out.println(str));<br></code></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.stream()<br>        .map(author -&gt; author.getName())<br>        .map(StringBuilder::<span class="hljs-keyword">new</span>)<br>        .map(sb-&gt;sb.append(<span class="hljs-string">&quot;-三更&quot;</span>).toString())<br>        .forEach(str-&gt; System.out.println(str));<br></code></pre></td></tr></table></figure><h2 id="7-高级用法"><a href="#7-高级用法" class="headerlink" title="7. 高级用法"></a>7. 高级用法</h2><h3 id="基本数据类型优化"><a href="#基本数据类型优化" class="headerlink" title="基本数据类型优化"></a>基本数据类型优化</h3><p>​我们之前用到的很多Stream的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。</p><p>​即使我们操作的是整数小数，但是实际用的都是他们的包装类。JDK5中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很下。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了。</p><p>​所以为了让我们能够对这部分的时间消耗进行优化。Stream还提供了很多专门针对基本数据类型的方法。</p><p>​例如：mapToInt,mapToLong,mapToDouble,flatMapToInt,flatMapToDouble等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test27</span><span class="hljs-params">()</span> &#123;<br><br>    List&lt;Author&gt; authors = getAuthors();<br>    authors.stream()<br>            .map(author -&gt; author.getAge())<br>            .map(age -&gt; age + <span class="hljs-number">10</span>)<br>            .filter(age-&gt;age&gt;<span class="hljs-number">18</span>)<br>            .map(age-&gt;age+<span class="hljs-number">2</span>)<br>            .forEach(System.out::println);<br><br>    authors.stream()<br>            .mapToInt(author -&gt; author.getAge())<br>            .map(age -&gt; age + <span class="hljs-number">10</span>)<br>            .filter(age-&gt;age&gt;<span class="hljs-number">18</span>)<br>            .map(age-&gt;age+<span class="hljs-number">2</span>)<br>            .forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>​当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。</p><p>​parallel方法可以把串行流转换成并行流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test28</span><span class="hljs-params">()</span> &#123;<br>    Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> stream.parallel()<br>            .peek(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Integer&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Integer num)</span> &#123;<br>                    System.out.println(num+Thread.currentThread().getName());<br>                &#125;<br>            &#125;)<br>            .filter(num -&gt; num &gt; <span class="hljs-number">5</span>)<br>            .reduce((result, ele) -&gt; result + ele)<br>            .get();<br>    System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure><p>​也可以通过parallelStream直接获取并行流对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();<br>authors.parallelStream()<br>        .map(author -&gt; author.getAge())<br>        .map(age -&gt; age + <span class="hljs-number">10</span>)<br>        .filter(age-&gt;age&gt;<span class="hljs-number">18</span>)<br>        .map(age-&gt;age+<span class="hljs-number">2</span>)<br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2022/11/27/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/11/27/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="基本概念-：-程序-、-进程-、-线程"><a href="#基本概念-：-程序-、-进程-、-线程" class="headerlink" title="基本概念 ： 程序 、 进程 、 线程"></a><em>基本概念 ： 程序 、 进程 、 线程</em></h1><ul><li><p><a href="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28ddeeec272246eba2e5db1b8996c58d~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28ddeeec272246eba2e5db1b8996c58d~tplv-k3u1fbpfcp-zoom-crop-mark:3024:3024:3024:1702.awebp" alt="Java多线程-笔记"></a></p></li><li><p>程序(program)</p><ul><li>是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。（可以想象为代码未跑起来）</li></ul></li><li><p><strong>进程(process)</strong></p><ul><li>是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期（可以想象为正在跑的代码）</li></ul><p>如：运行中的QQ，运行中的MP3播放器</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">程序是静态的，进程是动态的</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</span><br>复制代码<br><br>MARKDOWN<br></code></pre></td></tr></table></figure></li><li><p>线程(thread)</p><ul><li>进程可进一步细化为线程，是一个程序内部的一条执行路径。</li><li>若一个进程同一时间并行执行多个线程，就是支持多线程的</li><li>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小</li><li>一个进程中的多个线程共享相同的内存单元&#x2F;内存地址空间—&gt;它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。</li></ul></li></ul><h3 id="单核CPU和多核CPU的理解"><a href="#单核CPU和多核CPU的理解" class="headerlink" title="单核CPU和多核CPU的理解"></a>单核CPU和多核CPU的理解</h3><ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费）。但是因为CPU时间单元特别短，因此感觉不出来。</li><li>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</li><li>一个Java应用程序java.exe，其至少有三个线程：main()主线程，gc() 垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li></ul><h3 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h3><ul><li><strong>并行</strong>：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</li><li><strong>并发</strong>：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</li></ul><h3 id="使用多线程的优点"><a href="#使用多线程的优点" class="headerlink" title="使用多线程的优点"></a>使用多线程的优点</h3><ol><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li><li>提高计算机系统CPU的利用率</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</li></ol><h3 id="何时需要多线程"><a href="#何时需要多线程" class="headerlink" title="何时需要多线程"></a>何时需要多线程</h3><ul><li>程序需要同时执行两个或多个任务。</li><li>程序需要实现一些需要等待的任务时，如用户输入、文件读写 操作、网络操作、搜索等。</li><li>需要一些后台运行的程序时。</li></ul><h1 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a><em>线程的创建和使用</em></h1><h3 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h3><h4 id="方式一-：-（继承于Thread类）"><a href="#方式一-：-（继承于Thread类）" class="headerlink" title="方式一 ： （继承于Thread类）"></a>方式一 ： （继承于Thread类）</h4><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run()方法–&gt;将此线程执行的操作声明在run()</li><li>实例化Thread类的子类的对象</li><li>通过此对象调用Thread的start()</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//例子 ： 便利一百内所有偶数</span><br><br><span class="hljs-comment">//1、创建一个继承于Thread类的子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;<br><span class="hljs-comment">//2、重写Thread类的run()方法</span><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">100</span> ; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.<span class="hljs-keyword">out</span>.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br><span class="hljs-comment">//3、创建Thread类的子类的对象</span><br>        MyThread t1 = <span class="hljs-keyword">new</span> MyThread();<br><span class="hljs-comment">//4、通过此对象调用Thread的start()</span><br>        t1.start();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">100</span> ; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.<span class="hljs-keyword">out</span>.println(i+<span class="hljs-string">&quot;***main***&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>复制代码<br><br>CSHARP<br></code></pre></td></tr></table></figure><ul><li>start()方法：<ul><li>①启动当前线程</li><li>②调用当前线程的run()</li></ul></li></ul><p>问题一 ： 我们不能通过直接调用run()方法启动线程</p><p>问题二 ： 再启动一个线程，不能让已经start()的线程去执行。会报IllegalThreadStateException异常，需重新创建一个线程对象</p><ul><li><p>创建Thread的匿名子类 ：</p><ul><li><p>`&#96;&#96;typescript</p><p>new Thread(){</p><p>@override</p><p>public void run(){</p><p><em>*<em>*</em>*code****</em>*</p><ul><li></li></ul><p>}</p><p>}.start();</p><p>复制代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#### 方式二 ： (实现Runnable接口)</span><br><br><span class="hljs-number">1.</span> 创建一个实现了Runnable接口的类<br><br><span class="hljs-number">1.</span> 实现类去实现Runnable的抽象方法 ：run()<br><br><span class="hljs-number">1.</span> 创建实现类的对象<br><br><span class="hljs-number">1.</span> 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象<br><br><span class="hljs-number">1.</span> 通过Thread类的对象调用start()<br><br>```java<br><span class="hljs-comment">// 1、创建一个实现了Runnable接口的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">MThread</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span> &#123;<br>    <span class="hljs-comment">//2、实现类去实现Runnable的抽象方法 ：run()</span><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.<span class="hljs-keyword">out</span>.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTeat_1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br><span class="hljs-comment">//3、创建实现类的对象</span><br>        MThread mThread = <span class="hljs-keyword">new</span> MThread();<br><span class="hljs-comment">//4、将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mThread);<br><span class="hljs-comment">//5、通过Thread类的对象调用start()--&gt;调用Runnable类型的target的run()方法</span><br>        t1.start();<br>    &#125;<br>&#125;<br>复制代码<br><br>CSHARP<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>关于同步方法的总结 ：</p><p>1、同步方法仍然涉及到同步监视器，只是不要需要我们显示的声明</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">2</span>、非静态的同步方法，同步监视器是 ： <span class="hljs-keyword">this</span><br>   静态的同步方法，同步监视器是 ： 当前类本身<br>复制代码<br><br>KOTLIN<br></code></pre></td></tr></table></figure><h4 id="比较创建线程的两种方式"><a href="#比较创建线程的两种方式" class="headerlink" title="比较创建线程的两种方式"></a>比较创建线程的两种方式</h4><ul><li><p>开发中优先选择 ： 实现Runnable接口的方式</p><ul><li>原因 ：<ul><li>实现的方式没有类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程有共享数据的情况</li><li>联系 ：Thread类本身也实现了Runnable接口</li><li>class Thread implements Runnable { }</li><li>相同点：两种方式都需要重写run()方法，将线程要执行的逻辑声明在run()中。</li></ul></li></ul></li><li><h3 id="Thread中的常用方法"><a href="#Thread中的常用方法" class="headerlink" title="Thread中的常用方法"></a>Thread中的常用方法</h3><ul><li><h4 id="start-："><a href="#start-：" class="headerlink" title="start() ："></a>start() ：</h4><p>启动线程，并执行对象的run()方法</p></li><li><h4 id="run"><a href="#run" class="headerlink" title="run() :"></a>run() :</h4><p>通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</p></li><li><h4 id="currentThread"><a href="#currentThread" class="headerlink" title="currentThread() :"></a>currentThread() :</h4><p>静态方法，返回执行当前代码的线程</p></li><li><h4 id="getName"><a href="#getName" class="headerlink" title="getName :"></a>getName :</h4><p>获取当前线程名字</p></li><li><h4 id="SetName"><a href="#SetName" class="headerlink" title="SetName :"></a>SetName :</h4><p>设置当前线程的名字</p></li><li><h4 id="Yield"><a href="#Yield" class="headerlink" title="Yield :"></a>Yield :</h4><p>释放当前CPU的执行权(存在释放执行权后又重新获得执行权的情况)</p></li><li><h4 id="Join-："><a href="#Join-：" class="headerlink" title="Join ："></a>Join ：</h4><p>在线程A中调用线程B的Join()方法，此时相乘A就进入阻塞状态，直到线程B完全执行完后，线程A才结束阻塞状态</p></li><li><h4 id="sleep-long-millitime"><a href="#sleep-long-millitime" class="headerlink" title="sleep(long millitime) :"></a>sleep(long millitime) :</h4><p>让当前线程“睡眠”指定的millitime毫秒，在指定的millitime毫秒时间内，当前线程是阻塞的</p></li><li><h4 id="isAlive"><a href="#isAlive" class="headerlink" title="isAlive() :"></a>isAlive() :</h4><p>判断当前线程是否存活</p></li><li><h4 id="getPriority"><a href="#getPriority" class="headerlink" title="getPriority() :"></a>getPriority() :</h4><p>返回线程优先值</p></li><li><h4 id="setPriority-int-newPriority-："><a href="#setPriority-int-newPriority-：" class="headerlink" title="setPriority(int newPriority) ："></a>setPriority(int newPriority) ：</h4><p>改变线程的优先级</p></li></ul></li></ul><h3 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h3><ul><li><h4 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h4></li></ul><ol><li>时间片式 ：</li></ol><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db23f642df0a4d2e9b673978337660b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db23f642df0a4d2e9b673978337660b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="img"></a></p><p>img</p><ol><li>抢占式 ： 高优先级的线程抢占CPU</li></ol><h4 id="java的调度方法"><a href="#java的调度方法" class="headerlink" title="java的调度方法"></a>java的调度方法</h4><p>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</p><p>对高优先级，使用优先调度的抢占式策略</p><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><p>MAX_PRIORITY：10</p><p>MIN _PRIORITY：1</p><p>NORM_PRIORITY：5</p><h4 id="涉及的方法"><a href="#涉及的方法" class="headerlink" title="涉及的方法"></a>涉及的方法</h4><p>getPriority() ：返回线程优先值</p><p>setPriority(int newPriority) ：改变线程的优先级</p><blockquote><p>说明 ： 高优先级的线程要抢占低优先级线程cpu的执行权，但是只是从概率上讲，高优先级的线程高概率的情况下被执行，并不意味着只有当高优先级的线程执行完成后，低优先级的线程才执行。</p></blockquote><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a><em>线程的生命周期</em></h1><p><strong>新建 ：</strong> 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建 ****状态</p><p><strong>就绪 ：</strong> 处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已 ****具备了运行的条件，只是没分配到CPU资源</p><p><strong>运行 ：</strong> 当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线 ****程的操作和功能</p><p><strong>阻塞 ：</strong> 在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中 ****止自己的执行，进入阻塞状态</p><p><strong>死亡 ：</strong> 线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</p><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e93e9d11e4a74e04b548b2094007924f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e93e9d11e4a74e04b548b2094007924f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="img"></a></p><p>img</p><h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a><em>线程的同步</em></h1><p>问 ： 解决线程安全问题一共有几种方法</p><p>答 ： 3种</p><h3 id="线程安全问题的举例"><a href="#线程安全问题的举例" class="headerlink" title="线程安全问题的举例"></a>线程安全问题的举例</h3><blockquote><p>问题 ： 买票过程中，出现了重票，错票 –&gt; 出现了线程安全问题</p><p>原因 ： 当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票</p><p>解决 ： 当一个线程A正在操作ticket时，其他线程不能参与进来，直到A线程操作完ticket时，其他线程才可以操作ticket（即使A出现阻塞也不能改变）</p></blockquote><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df62d4ddd19d4ebea7a5c2ec20f23239~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df62d4ddd19d4ebea7a5c2ec20f23239~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="img"></a></p><p>img</p><h3 id="同步机制-："><a href="#同步机制-：" class="headerlink" title="同步机制 ："></a>同步机制 ：</h3><p>（java中我们通过同步机制，来解决线程安全问题）</p><h4 id="方法一-：同步代码块"><a href="#方法一-：同步代码块" class="headerlink" title="方法一 ：同步代码块"></a>方法一 ：同步代码块</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">synchronized</span><span class="hljs-params">(同步监视器)</span></span>&#123;<br>    /需要被同步的代码<br>&#125;<br>复制代码<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><p>在实现Runnable接口创建多线程的方式中，可以考虑用shis充当同步监视器 在继承Thread类创建多线程的 方式，慎用this充当同步监视器，可以考虑当前类(类名.class)充当同步监视器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">synchronized</span><span class="hljs-params">(this)</span></span>&#123;<br>    /需要被同步的代码<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span><span class="hljs-params">(类名.class)</span></span>&#123;<br>    /需要被同步的代码<br>&#125;<br><span class="hljs-function"><span class="hljs-title">synchronized</span><span class="hljs-params">(obj)</span></span>&#123;<br>    /需要被同步的代码<br>&#125; <br>复制代码<br><br>JAVASCRIPT<br></code></pre></td></tr></table></figure><ul><li>说明 ：<ul><li>操作共享数据的代码，就是需要被同步的代码</li><li>共享数据 ： 多个线程共同操作的变量。如 ：ticket就是共享数据</li><li>同步监视器 ： 俗称 ： 锁。任何一个类的对象，都可以充当锁<ol><li><strong>要求 ：多个线程必须共用同一把锁</strong></li></ol></li></ul></li></ul><h4 id="方法二-：同步方法"><a href="#方法二-：同步方法" class="headerlink" title="方法二 ：同步方法"></a><strong>方法二 ：同步方法</strong></h4><p>synchronized还可以放在方法声明中，表示整个方法为同步方法。</p><p>例如 ：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span> <span class="hljs-params">(<span class="hljs-type">String</span> name)</span></span>&#123; <br>        ….<br>&#125;<br>复制代码<br><br>ARDUINO<br></code></pre></td></tr></table></figure><ul><li>总结 ：<ul><li>同步方法仍然涉及到同步监视器，只是不需要我们显式的去声明。</li><li>非静态的同步方法，同步监视器是 ： this</li><li>静态的同步方法，同步监视器是 ：当前类本身</li></ul></li></ul><h4 id="同步的方式，解决了线程安全问题。-–-gt-好处"><a href="#同步的方式，解决了线程安全问题。-–-gt-好处" class="headerlink" title="同步的方式，解决了线程安全问题。 –&gt; 好处"></a><strong>同步的方式，解决了线程安全问题。 –&gt; 好处</strong></h4><p><strong>操作同步代码时，只能有一个线程参与，其他线程等待。相当于</strong> <strong>时</strong> <strong>一个单线程的过程 –&gt; 局限性</strong></p><h3 id="解决线程安全问题的方式三：Lock锁-—JDK5-0新增"><a href="#解决线程安全问题的方式三：Lock锁-—JDK5-0新增" class="headerlink" title="解决线程安全问题的方式三：Lock锁 —JDK5.0新增"></a>解决线程安全问题的方式三：Lock锁 —JDK5.0新增</h3><p>问 ： synchronized 与 Lock的异同？</p><p>相同 ： 二者都可以解决线程安全问题</p><p>不同 ：</p><ol><li><p>`&#96;&#96;arduino</p><p>synchronized 机制在执行完相应的同步代码以后，自动释放 同步监视器</p><p>复制代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2.</span> Lock需要手动的启动同步（Lock），同时结束同步也需要手 动实现（unlock）<br><br>- java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。<br><br>- **ReentrantLock** 类实现了 **Lock** ，它拥有与 **<span class="hljs-keyword">synchronized</span>** 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是**ReentrantLock**，可以显式加锁、释放锁。<br><br>![img](https:<span class="hljs-comment">//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/236b75fe8e3b451d9e135fa61bb55657~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image)</span><br><br>```java<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//1.实例化ReentrantLock</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br><br>                <span class="hljs-comment">//2.调用锁定方法lock()</span><br>                lock.lock();<br><br>                <span class="hljs-keyword">if</span>(ticket &gt; <span class="hljs-number">0</span>)&#123;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;：售票，票号为：&quot;</span> + ticket);<br>                    ticket--;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//3.调用解锁方法：unlock()</span><br>                lock.unlock();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LockTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Window</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(w);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(w);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(w);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br>复制代码<br><br>JAVA<br></code></pre></td></tr></table></figure></li></ol><p><strong>优先使用顺序 ：</strong> Lock -&gt; 同步代码块（已经进入了方法体，分配了相应资源） -&gt; 同步方法（在方法体之外）</p><h3 id="使用同步机制将单例模式中的懒汉式改写为线程安全的"><a href="#使用同步机制将单例模式中的懒汉式改写为线程安全的" class="headerlink" title="使用同步机制将单例模式中的懒汉式改写为线程安全的"></a>使用同步机制将单例模式中的懒汉式改写为线程安全的</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs smali">class Bank&#123;<br><br>   <span class="hljs-keyword"> private</span> Bank()&#123;&#125;<br><br>   <span class="hljs-keyword"> private</span><span class="hljs-keyword"> static</span> Bank<span class="hljs-built_in"> instance </span>= null;<br><br>   <span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> Bank getInstance()&#123;<br>        //方式一：效率稍差<br>//        synchronized (Bank.class) &#123;<br>//            if(instance == null)&#123;<br>//<br>//               <span class="hljs-built_in"> instance </span>=<span class="hljs-built_in"> new </span>Bank();<br>//            &#125;<br>//           <span class="hljs-built_in"> return </span>instance;<br>//        &#125;<br>        //方式二：效率更高<br>        if(instance == null)&#123;<br><br>            synchronized (Bank.class) &#123;<br>                if(instance == null)&#123;<br><br>                   <span class="hljs-built_in"> instance </span>=<span class="hljs-built_in"> new </span>Bank();<br>                &#125;<br><br>            &#125;<br>        &#125;<br>       <span class="hljs-built_in"> return </span>instance;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword"></span><br><span class="hljs-keyword">public</span> class BankTest &#123;<br><br>&#125;<br>复制代码<br><br>CSHARP<br></code></pre></td></tr></table></figure><h3 id="线程的死锁问题"><a href="#线程的死锁问题" class="headerlink" title="线程的死锁问题"></a>线程的死锁问题</h3><blockquote><p>死锁 ：</p><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对放弃自己需要的同步资源，就形成了线程的死锁</p><p>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</p></blockquote><p><strong>我们写程序时要避免死锁！</strong></p><ul><li>解决办法 ：<ul><li>专门的算法、原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul></li></ul><h1 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a><em>线程的通信</em></h1><ul><li><h3 id="线程的通信涉及的方法-："><a href="#线程的通信涉及的方法-：" class="headerlink" title="线程的通信涉及的方法 ："></a>线程的通信涉及的方法 ：</h3><ul><li><strong>wait() :</strong></li><li>执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li><li><strong>notify() :</strong></li><li>执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的那个</li><li><strong>notifyAll() :</strong></li><li>执行此方法，就会唤醒所有被wait的线程</li></ul></li></ul><p>*<em>使用前提：只能在synchronized*</em>*<em>同步代码块*</em>*<em>或者synchronized*</em>*<em>同步方法*</em>*<em>中使用（lock不可以）</em>*</p><p><em><strong>！！！这三个方法的调用者必须是同步代码块或同步方法中的同步监视器，否则会出现java.lang.IllegalMonitorStateException异常</strong></em></p><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa54142d8d074a4bb307b3395b7ff502~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa54142d8d074a4bb307b3395b7ff502~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="img"></a></p><p>img</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程通信的例子：使用两个线程打印 1-100。线程1, 线程2 交替打印</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> int <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Object</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br>            synchronized (obj) &#123;<br><br>                obj.<span class="hljs-title function_">notify</span>();<br><br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">number</span> &lt;= <span class="hljs-number">100</span>)&#123;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">sleep</span>(<span class="hljs-number">10</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">InterruptedException</span> e) &#123;<br>                        e.<span class="hljs-title function_">printStackTrace</span>();<br>                    &#125;<br><br>                    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">number</span>);<br>                    <span class="hljs-built_in">number</span>++;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//使得调用如下wait()方法的线程进入阻塞状态</span><br>                        obj.<span class="hljs-title function_">wait</span>();<br>                    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">InterruptedException</span> e) &#123;<br>                        e.<span class="hljs-title function_">printStackTrace</span>();<br>                    &#125;<br><br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommunicationTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Number</span> <span class="hljs-built_in">number</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>();<br>        <span class="hljs-title class_">Thread</span> t1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">number</span>);<br>        <span class="hljs-title class_">Thread</span> t2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">number</span>);<br><br>        t1.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;线程1&quot;</span>);<br>        t2.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;线程2&quot;</span>);<br><br>        t1.<span class="hljs-title function_">start</span>();<br>        t2.<span class="hljs-title function_">start</span>();<br>    &#125;<br>&#125;<br>复制代码<br><br><span class="hljs-variable constant_">TYPESCRIPT</span><br></code></pre></td></tr></table></figure><h3 id="sleep-和wait-的异同"><a href="#sleep-和wait-的异同" class="headerlink" title="sleep()和wait()的异同"></a>sleep()和wait()的异同</h3><ul><li>相同点 ：<ul><li>执行方法，都可以使得当前的线程进入阻塞状态</li><li>不同点 :</li><li>两个方法的声明位置不同 ：sleep()方法在Thread类中声明，wait()方法在Object类中声明</li><li>调用要求不同 ：sleep()可以在任何需要的场景下调用，wait()必须使用在同步代码块或同步方法中</li><li>关于是否释放同步监视器 ： 如果两个方法都是用在同步代码块和同步方法中，sleep()不会释放锁，wait()会释放锁。</li></ul></li></ul><h3 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处</span><br><span class="hljs-comment">取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图</span><br><span class="hljs-comment">生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通</span><br><span class="hljs-comment">知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如</span><br><span class="hljs-comment">果店中有产品了再通知消费者来取走产品。</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 分析 ：</span><br><span class="hljs-comment">*   1、是否是多线程问题？是 , 生产者线程 ， 消费者线程</span><br><span class="hljs-comment">*   2、是否有动向数据？是 ， 店员（产品）</span><br><span class="hljs-comment">*   3、如何解决线程安全问题？同步机制</span><br><span class="hljs-comment">*   4、是否设计线程通信？ 是</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clerk</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">productCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">produceProduct</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (productCount &lt; <span class="hljs-number">20</span>) &#123;<br>            productCount++;<br>            System.out. println(Thread.currentThread( ).getName() + <span class="hljs-string">&quot;: 正在生产第&quot;</span> + productCount + <span class="hljs-string">&quot;件产品&quot;</span>);<br>            notify();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumeProduct</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (productCount &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out. println(Thread.currentThread( ).getName() + <span class="hljs-string">&quot;: 正在消费第&quot;</span> + productCount + <span class="hljs-string">&quot;件产品&quot;</span>);<br>            productCount--;<br>            notify();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Productor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Clerk clerk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Productor</span><span class="hljs-params">(Clerk clerk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clerk = clerk;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out. println(getName() + <span class="hljs-string">&quot;:开始生产产品.....&quot;</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep( <span class="hljs-number">5</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            clerk.produceProduct();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<span class="hljs-comment">//消费者</span><br>    <span class="hljs-keyword">private</span> Clerk clerk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(Clerk clerk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clerk = clerk;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out. println(getName() + <span class="hljs-string">&quot;:开始消费产品.....&quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep( <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            clerk.consumeProduct();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">productText</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Clerk</span> <span class="hljs-variable">clerk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Clerk</span>();<br>        <span class="hljs-type">Productor</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Productor</span>(clerk);<br>        p1.setName(<span class="hljs-string">&quot;生产者1&quot;</span>);<br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(clerk);<br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(clerk);<br>        c1.setName(<span class="hljs-string">&quot;消费者1&quot;</span>);<br>        c2.setName(<span class="hljs-string">&quot;消费者2&quot;</span>);<br><br>        p1.start();<br>        c1.start();<br>        c2.start();<br>    &#125;<br>&#125;<br>复制代码<br><br>JAVA<br></code></pre></td></tr></table></figure><h1 id="JDK5-0新增线程创建方式"><a href="#JDK5-0新增线程创建方式" class="headerlink" title="JDK5.0新增线程创建方式"></a><em>JDK5.0新增线程创建方式</em></h1><p>问 ： 创建多线程有几种方式</p><p>答 ： 4种</p><h4 id="新增方式一-：-实现Callable接口"><a href="#新增方式一-：-实现Callable接口" class="headerlink" title="新增方式一 ： 实现Callable接口"></a><strong>新增方式一 ： 实现Callable接口</strong></h4><ul><li>与使用Runnable相比 ， Callable功能更加强大<ul><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li><li>\</li></ul></li><li>Future接口<ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li><li>FutureTaks是Future接口的唯一实现类</li><li>FutureTask同时实现了Runnable，Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul></li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建线程的方式三 ： 实现anCallable接口 --JDK5.0新增</span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-comment">//创建一个实现Callable的实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span> ; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                sum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadNew</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//3、创建Callable接口实现类的对象</span><br>        <span class="hljs-type">NumThread</span> <span class="hljs-variable">numThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumThread</span>();<br>        <span class="hljs-comment">//4、将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span><br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">futureTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(numThread);<br>        <span class="hljs-comment">//5、将FutureTask的对象，作为参数传递到Thread类的构造器中，创建Thread对象，并start()</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br><br>        <span class="hljs-keyword">try</span> &#123; <br>            <span class="hljs-comment">//6、获取Callable中call方法的返回值(当不需要返回值的时候，在call方法中可以return null)</span><br>            <span class="hljs-comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()方法的返回值</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> futureTask.get();<br>            System.out.println(<span class="hljs-string">&quot;总和为 :&quot;</span>+sum);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br>复制代码<br><br>JAVA<br></code></pre></td></tr></table></figure><p>\</p><h4 id="新增方式二-：-使用线程池"><a href="#新增方式二-：-使用线程池" class="headerlink" title="新增方式二 ： 使用线程池"></a>新增方式二 ： 使用线程池</h4><p><strong>背景 ：</strong> 经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</p><p><strong>思路</strong> ： 提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><ul><li>好处 :<ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理<ol><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li><li>……..</li></ol></li></ul></li></ul><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a><strong>案例</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><br><span class="hljs-comment">//创建线程的方式四 ： 使用线程池</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out. println(Thread.currentThread( ).getName()+<span class="hljs-string">&quot;:&quot;</span>+i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberThread1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>                System.out. println(Thread.currentThread( ).getName()+<span class="hljs-string">&quot;:&quot;</span>+i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>         <span class="hljs-comment">//1、通过指定数量的线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool( <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//强转</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">service1</span> <span class="hljs-operator">=</span> (ThreadPoolExecutor)service;<br>        <span class="hljs-comment">//设置线程池的属性</span><br><span class="hljs-comment">//        service1.setCorePoolSize(15);</span><br><span class="hljs-comment">//        service1.setKeepAliveTime();</span><br><br>        <span class="hljs-comment">//2、执行指定线程的操作，需要提供实现Runnable接口或Callable接口实现类的对象</span><br>        service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberThread</span>());<span class="hljs-comment">//适合Runnable</span><br>        service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberThread1</span>());<br>        <span class="hljs-comment">//service.submit(Callable callable);//适用于Callable</span><br>        <span class="hljs-comment">//关闭连接池</span><br>        service.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三</title>
    <link href="/2022/11/07/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%B8%89/"/>
    <url>/2022/11/07/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>来信悉知<br>你没有记错，是十月九！感谢你送我的书，很久之前想过买一本，现在又多了双层意义，一举两得<br>从信得知，这段时间你很努力，辛苦了<br>有自己目标，不断的努力，这是一种很幸福的事情<br>我们确实是有很长时间没有怎么聊，但是都在为各自的事情烦恼！这也算是一种默契。聊来聊去都是些一样的事情，想来不制造焦虑也挺好。<br>阅读的事情不必纠结，有时间看看就行了，没有时间也没有关系，大多是些无关紧要的东西，专注于你的专业，你的目标更为重要！<br>我近来一切都好，感谢你一直记在心上，荣幸之余又受宠若惊，路过花店总想买一盆绿植，纠结下来便一直被搁置了，想来后面的时间我会拥有一盆绿植，借此充斥我的生活，这样想，我确想是生病的人。<br>思绪飘浮不定，恍惚之间便去了很远的地方，回过神来时间已经过去了很久。<br>有时间看书的话，看看你自己喜欢的书吧<br>想了很久，可以说的很多，但我还在纠结中，也许有天就不纠结了吧<br>很感谢你送给我的书和祝福，我都收到了，由于很懒的原因，我就不手写了，就着大纲，也没有仔细写了🙃<br>祝你在未来的日子里，去不断体验新的挑战。</p><p>2022&#x2F;11&#x2F;01 夜</p>]]></content>
    
    
    <categories>
      
      <category>远方来信</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>三个月读书计划</title>
    <link href="/2022/10/11/%E8%AE%A1%E5%88%92/%E4%B8%89%E4%B8%AA%E6%9C%88%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92/"/>
    <url>/2022/10/11/%E8%AE%A1%E5%88%92/%E4%B8%89%E4%B8%AA%E6%9C%88%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="三个月读书计划"><a href="#三个月读书计划" class="headerlink" title="三个月读书计划"></a>三个月读书计划</h3><p><strong>时间****2022&#x2F;09&#x2F;29——2022&#x2F;12&#x2F;29</strong></p><p>内容：</p><ul><li>第一阶段</li></ul><ol><li>了解西方哲学的简要历史，方便我能够知道事情的背景故事，以及到后来的资本主义是如何诞生的</li><li>了解西方教会的历史，教会对西方人，包括现在对我们的思想影响之巨大，这有利与我发现人的思想不同</li><li>了解西方的政治与阶级体制，这是社会变革的一个重要因素</li><li>了解西方的历史，时间关系，无法从很远的历史追溯到现在，于是我决定只从西方的近代史开始</li><li>了解西方原来的市场经济与生产模式，这有利于我对比后续的资本主义经济</li></ol><ul><li>第二阶段</li></ul><ol><li>了解马克思、恩格斯的生平经历，由于时间关系，暂时无法去了解其他伟大的人，但我十分明白，马克思也是在巨人的肩膀上看到了世界</li><li>了解马克思当时所处社会的党派组织。</li><li>理清所有的著作时间表</li></ol><ul><li>第三阶段<ol><li>开始阅读著作，做好笔记</li><li>整理笔记，总结学习所得，编辑后保存到 <strong>××马克思××</strong>分类中</li></ol></li></ul><p>计划实施进程记录表（日更）：</p><table><thead><tr><th align="center">时间</th><th align="center">进度</th><th align="center">内容</th><th align="center">自我评价</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">2022&#x2F;10&#x2F;11</td><td align="center">2</td><td align="center">开始学习西方哲学史，整理笔记</td><td align="center">一般，需加快进度，时间不够用</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>21天改变计划</title>
    <link href="/2022/10/11/%E8%AE%A1%E5%88%92/21%E5%A4%A9%E6%94%B9%E5%8F%98%E8%AE%A1%E5%88%92/"/>
    <url>/2022/10/11/%E8%AE%A1%E5%88%92/21%E5%A4%A9%E6%94%B9%E5%8F%98%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="21天改变计划"><a href="#21天改变计划" class="headerlink" title="21天改变计划"></a>21天改变计划</h3><ol><li>每天抽出时间完成三个月读书计划</li><li>十一点之前睡觉，六点起来，最迟六点半。</li><li>专心完成第一点，不与人闲聊，不浪费时间，不刷短视频等耗费精神的事情</li><li>认真学习Java知识，做好笔记</li><li>学习数据结构，每天一道算法题</li><li>每天10个英语单词</li></ol><p>打卡（日更）</p><table><thead><tr><th align="center">时间</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th></tr></thead><tbody><tr><td align="center">2022&#x2F;10&#x2F;11</td><td align="center">Y</td><td align="center"></td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;12</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;13</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;14</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;15</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;16</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;17</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;18</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;19</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;20</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;21</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;22</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;23</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;24</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;25</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;26</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;27</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;28</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;29</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;30</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2022&#x2F;10&#x2F;31</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>位图</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E5%9B%BE/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>红黑树</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉排列树</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%88%97%E6%A0%91/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%88%97%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>散列表</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%A3%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>链表是由一系列节点（链表中的每一个元素都叫作一个节点）组成的数据结构，节点可以在运行过程中动态生成。每个节点都包括两部分内容：存储数据的数据域；存储下一个节点地址的指针域。由于链表是随机存储数据的，因此在链表中插入数据的时间复杂度为O(1)，比在线性表和顺序表中插入的效率要高；但在链表中查找一个节点时需要遍历链表中所有元素，因此时间复杂度为O( )，而在线性表和顺序表中查找一个节点的时间复杂度分别为0 (log n)和 O(1)。<br>链表有 3种不同的类型：单向链表、双向链表及循环链表。</p><h3 id="链表的特点"><a href="#链表的特点" class="headerlink" title="链表的特点"></a>链表的特点</h3><p>链表通过一组存储单元存储线性表中的数据元素，这组存储单元可以是连续的，也可以是不连续的。因此，为了表示每个数据元素与其直接后继数据元素之间的逻辑关系，对数据元素来说，除了存储其本身的信息，还需要存储直接后继数据元素的信息（即直接后继数据元素的存储位置）。由这两部分信息组成一个“节点”。链表数据结构的优点是插入快，缺点是数据查询需要遍历整个链表，效率慢。</p><p><a href="https://pprince.top/img/0002.png"><img src="https://pprince.top/img/0002.png" alt="img"></a></p><h3 id="单向链表的操作及其Java实现"><a href="#单向链表的操作及其Java实现" class="headerlink" title="单向链表的操作及其Java实现"></a>单向链表的操作及其Java实现</h3><p>单向链表（又称单链表）是链表的一种，其特点是链表的链接方向是单向的，访问链表时要从头部开始顺序读取。单向链表是链表中结构最简单的。一个单向链表的节点（Node）可分为两部分：第1部分为数据区（data），用于保存节点的数据信息；第2部分为指针区，用于存储下一个节点的地址，最后一个节点的指针指向null。</p><p><a href="https://pprince.top/img/0003.png"><img src="https://pprince.top/img/0003.png" alt="img"></a></p><ul><li>单向链表的操作</li></ul><p>（1）查找：单向链表只可向一个方向遍历，一般在查找一个节点时需要从单向链表的第1个节点开始依次访问下一个节点，一直访问到需要的位置。<br>（2）插入：对于单向链表的插入，只需将当前插入的节点设置为头节点，将Next指针指向原来的头节点即可。插入后的结果。</p><p><a href="https://pprince.top/img/0004.png"><img src="https://pprince.top/img/0004.png" alt="img"></a></p><p>（3）删除：对于单向链表的删除，我们只需将该节点的上一个节点的Next指针指向该节点的下一个节点，然后删除该节点即可。</p><p><a href="https://pprince.top/img/0005.png"><img src="https://pprince.top/img/0005.png" alt="img"></a></p><ul><li>链表的Java实现</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>队列以及Java实现</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97%E4%BB%A5%E5%8F%8Ajava%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97%E4%BB%A5%E5%8F%8Ajava%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>队列是一种只允许在表的前端进行删除操作且在表的后端进行插入操作的线性表。其中，执行插入操作的端叫作队尾，执行删除操作的端叫作队头。没有元素的队列叫作空队列，在队列中插入一个队列元素叫作入队，从队列中删除一个队列元素叫作出队。因为队列只允许在队头插入，在队尾删除，所以最早进入队列的元素将最先从队列中删除，所以队列又叫先进先出（FIFO-first in first out）线性</p><p><a href="https://pprince.top/img/001.png"><img src="https://pprince.top/img/001.png" alt="img"></a></p><h3 id="实现一个队列"><a href="#实现一个队列" class="headerlink" title="实现一个队列"></a>实现一个队列</h3><ul><li>add()：向队列的尾部加入一个元素（入队），先入队列的元素在最前面</li><li>poll()：删除头部的元素，出队列</li><li>peek()：取出头部的队列元素</li></ul><p>代码实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于数组实现队列的数据结构</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Liu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> &lt;<span class="hljs-title">E</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> Object[] data = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>  front;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear;<br><br>    <span class="hljs-title function_ invoke__">Queue</span>() &#123;<br>        <span class="hljs-title function_ invoke__">this</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">Queue</span>(<span class="hljs-keyword">int</span> initial)&#123;<br>        <span class="hljs-keyword">if</span> (initial &gt;= <span class="hljs-number">0</span>)&#123;<br>            this.maxSize = initial;<br>            data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initial];<br>            front = rear = <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;Queue can&#x27;t be empty&#x27;&quot;</span>+ initial);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">boolean</span> <span class="hljs-title function_ invoke__">add</span>( E e)&#123;<br>        <span class="hljs-keyword">if</span> (rear == maxSize)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;Queue is full cannot add more&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            data[rear++] = e;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span>  E <span class="hljs-title function_ invoke__">poll</span>()&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;QueueNullException&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 临时保存队列front 端的元素的值</span><br>            E value = (E) data[front];<br>            data[front++] = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-keyword">empty</span>() &#123;<br>        <span class="hljs-keyword">return</span> maxSize == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span>  E <span class="hljs-title function_ invoke__">peek</span>() &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RuntimeException</span>(<span class="hljs-string">&quot;QueueNullException&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> (E) data[front];<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HelloStack</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HelloStack/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/HelloStack/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于数组实现栈</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> Object[] data = <span class="hljs-literal">null</span> ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxStack</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    Stack()&#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>    Stack (<span class="hljs-type">int</span> initialSize)&#123;<br>        <span class="hljs-keyword">if</span> (initialSize &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.maxStack = initialSize;<br>            data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialSize];<br>            top = -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;can&#x27;t create stack&#x27;&quot;</span>+ initialSize);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E e)</span>&#123;<br>        <span class="hljs-keyword">if</span> (top == maxStack -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;can&#x27;t push stack&#x27;&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            data[++top] = e;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (top == -<span class="hljs-number">1</span> ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;stack is empty&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (E)data[top--];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (top == -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;stack is empty&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> (E)data[top];<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>数据结构是指数据的存储，组织方式</p><p>程序 &#x3D; 数据结构 + 算法</p><table><thead><tr><th align="center">数据结构</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">栈</td><td align="center">顶部元素插入和取出快</td><td align="center">除顶部元素外，存取其他元素都很慢</td></tr><tr><td align="center">队列</td><td align="center">顶部元素插入和尾部元素取出快</td><td align="center">存取其他元素很慢</td></tr><tr><td align="center">链表</td><td align="center">插入、删除都快</td><td align="center">查找慢</td></tr><tr><td align="center">二叉树</td><td align="center">插入、删除、查找都快</td><td align="center">删除算法复杂</td></tr><tr><td align="center">红黑树</td><td align="center">插入、删除、查找都快</td><td align="center">算法复杂</td></tr><tr><td align="center">散列表</td><td align="center">插入、删除、查找都快</td><td align="center">数据散列、对存储空间有浪费</td></tr><tr><td align="center">位图</td><td align="center">节省存储空间</td><td align="center">不方便描述复杂的数据关系</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><a href="https://pprince.top/img/00023.png"><img src="https://pprince.top/img/00023.png" alt="img"></a></p><p>栈（Stack）又名堆栈，是允许在同一端进行插入和删除操作的特殊线性表。其中，允许进行插入和删除操作的一端叫作栈顶（Top），另一端叫作栈底（Bottom），栈底固定，栈顶浮动。栈中的元素个数为零时，该栈叫作空栈。插入一般叫作进栈（Push），删除叫作退栈（Pop）。栈也叫作后进先出（FILO-First In Last Out）的线性表</p><p><a href="https://pprince.top/img/zhan.png"><img src="https://pprince.top/img/zhan.png" alt="img"></a></p><h3 id="实现一个栈"><a href="#实现一个栈" class="headerlink" title="实现一个栈"></a>实现一个栈</h3><ul><li>push（）：向栈中压入一个数据，先入栈的数据在最下方，先入后出</li><li>pop（）：弹出最顶的数据</li><li>peek（）：返回当前栈顶的数据</li></ul><h3 id="栈的具体实现过程如下。"><a href="#栈的具体实现过程如下。" class="headerlink" title="栈的具体实现过程如下。"></a>栈的具体实现过程如下。</h3><h4 id="（1）定义栈的数据结构："><a href="#（1）定义栈的数据结构：" class="headerlink" title="（1）定义栈的数据结构："></a>（1）定义栈的数据结构：</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"> * 基于数组实现的顺序栈<br> * <span class="hljs-meta">@Parm</span> &lt;E&gt;<br> *<br> */<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span>  Object[] data = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">int</span> maxSize = <span class="hljs-number">0</span>; <span class="hljs-comment">//栈的容量</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;  <span class="hljs-comment">//栈的指针</span><br><br>    <span class="hljs-comment">// 构造函数：根据指定的size初始化栈</span><br><br>    Test()&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//默认栈的大小</span><br>    &#125;<br>    Test(<span class="hljs-keyword">int</span> initialSize)&#123;<br>        <span class="hljs-keyword">if</span> (initialSize &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">this</span>.maxSize = initialSize;<br>            data = <span class="hljs-keyword">new</span> Object[initialSize];<br>            top = <span class="hljs-number">-1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Invalid initial size more than zero &quot;</span>+ initialSize);<br>        &#125;<br>    &#125;<br>&#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><h4 id="（2）数据入栈，向栈顶压入一个数据："><a href="#（2）数据入栈，向栈顶压入一个数据：" class="headerlink" title="（2）数据入栈，向栈顶压入一个数据："></a>（2）数据入栈，向栈顶压入一个数据：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span>  <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">E e</span>)&#123;<br>       <span class="hljs-keyword">if</span>(top == maxSize - <span class="hljs-number">1</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈已经满了，无法加入&quot;</span>);<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           data[++top] = e;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>   &#125;<br><br><span class="hljs-variable constant_">JAVA</span><br></code></pre></td></tr></table></figure><p>以上代码定义了方法push()来向栈中压入数据，在数据入栈前首先判断栈是否满了，具体的判断依据为栈顶元素的指针位置等于栈的最大容量。注意，这里使用maxSize -1是因为栈顶元素的指针是从 0开始计算的。在栈有可用空间时，使用data[++top]&#x3D;e在栈顶（top位置）上方新压入一个元素并为top加1。</p><h4 id="（3）数据出栈，从栈顶移除一个数据："><a href="#（3）数据出栈，从栈顶移除一个数据：" class="headerlink" title="（3）数据出栈，从栈顶移除一个数据："></a>（3）数据出栈，从栈顶移除一个数据：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">pop</span>()</span>&#123;<br>     <span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span> ) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈为空&quot;</span>);<br>     &#125;<span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> (E)data[top--];<br>     &#125;<br> &#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><p>以上代码定义了方法pop()来从栈顶移除一个数据，移除前先判断栈顶是否有数据，如果有，则通过data[top–]将栈顶数据移出并给top减1。</p><h4 id="（4）数据查询："><a href="#（4）数据查询：" class="headerlink" title="（4）数据查询："></a>（4）数据查询：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> E <span class="hljs-title">peek</span>()</span>&#123;<br>     <span class="hljs-keyword">if</span> (top == <span class="hljs-number">-1</span>) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈为空&quot;</span>);<br>     &#125;<span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> (E)data[top];<br>     &#125;<br> &#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><p>以上代码定义了方法peek()来取出栈顶的数据，在取出栈顶的数据前先判断栈顶的元素是否存在，如果存在，则直接返回栈顶元素（注意：这里没有对栈顶的元素进行删除），否则抛出异常。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>西方哲学简史</title>
    <link href="/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6%E7%AE%80%E5%8F%B2/"/>
    <url>/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6%E7%AE%80%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="西方哲学简史"><a href="#西方哲学简史" class="headerlink" title="西方哲学简史"></a>西方哲学简史</h2><p>！<a href="https://pprince.top/xiz/Raphael_School_of_Athens.jpg">雅典学院</a></p><p>本文主要参考了该<a href="http://ssvideo.superlib.com/cxvideo">视频</a>，以及参考书：《<a href="https://baike.baidu.com/item/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6%E6%99%BA%E6%85%A7%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89/20159363?fromModule=lemma-qiyi_sense-lemma&fromtitle=%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6%E6%99%BA%E6%85%A7&fromid=8416828">西方哲学智慧</a>》《<a href="https://baike.baidu.com/item/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6%E5%8D%81%E4%BA%94%E8%AE%B2/3121326?fromModule=search-result_lemma">西方哲学十五讲</a>》<a href="https://baike.baidu.com/item/%E5%BC%A0%E5%BF%97%E4%BC%9F/7190948">张志伟</a> 著 北京大学出版社 。</p><h4 id="第一讲：智慧的痛苦（什么是哲学）"><a href="#第一讲：智慧的痛苦（什么是哲学）" class="headerlink" title="第一讲：智慧的痛苦（什么是哲学）"></a>第一讲：智慧的痛苦（什么是哲学）</h4><p>时间跨度：公元前6世纪到19世纪，共2500年，本文不涉及现代哲学。</p><p><strong>西方哲学史分期：</strong></p><ol><li>公元前6世纪到公园6世纪，古代哲学。</li><li>公元2世纪到16世纪，中古哲学。</li><li>17世纪到19世纪，近代哲学。</li><li>20世纪，现代西方哲学。</li></ol><h5 id="一、什么是哲学（没有定义，道可道，非常道）"><a href="#一、什么是哲学（没有定义，道可道，非常道）" class="headerlink" title="一、什么是哲学（没有定义，道可道，非常道）"></a>一、什么是哲学（没有定义，道可道，非常道）</h5><p>“什么是哲学”这个问题始终没有一个确切的解答，不同的哲学家有不同的解答。而从反面出发，可以从关于哲学的错误看法来了解哲学概念本身：</p><p>1、哲学是科学。但科学只是人类认识世界改造世界的工具和手段，本身不具备价值和意义，而哲学就为科学和人类提供了这样的方向指引。2000多年来哲学家一直在努力让哲学成为一门科学，但最终失败了，黑格尔终结了这种努力。</p><p>2、哲学是使人聪明的学问。相反，是使人糊涂的学问。“人生忧患识字始”（鲁迅），问题在于世界上有太多相互冲突的道理，不同的哲学家的理论相互矛盾。 <strong>每一位哲学家的思想，都提供了一种解决问题的方式，哲学家穷级一生希望能够把这个方式推断到极致，在这里可以和道家的思想做一个比较</strong></p><p>3、哲学是讲道理的学问。是意识形态的工具，科学的对象是——现实性（画人），哲学的对象是——理想性（画鬼）。哲学无法验证，而是一套逻辑论证，一套理论化的世界观，用道理让人信服，而它的大前提极端重要。</p><p>4、哲学无用。“所有的学科都比哲学有用，但是唯有哲学是自由的学问，因为所有的学科都有前提，都有它服务的对象，但惟独哲学是为了自身而被追求的知识。”</p><p><em>哲学是自由人的学问</em>————亚里士多德</p><p>价值理性和工具理性的平衡问题。</p><p><strong>哲学是人的精神家园。</strong>哲学最初的含义是：<strong>爱智慧</strong>，由次引申出一个问题，知识和智慧不同。</p><p>   试从古希腊来寻找哲学的定义——爱智慧。智慧具有理想性、无限性，而知识具有现实性、有限性，此处产生了人的有限与智慧的无限的矛盾，但人的本性却驱使人去追求无限。</p><p>真正要学的是哲学家面对什么问题以及解决方式，而非具体的知识内容，这些都过时了（水是万物的本原——泰勒斯）</p><p>如何定位哲学？</p><p>宗教关注超自然世界，面对终极关怀的问题，诉诸人的情感；科学关注自然世界，诉诸人的理性；而哲学位于两者之间，讲理性，但起源于终极关怀的问题。“哲学问题具有这样的形式：我找不到出路所在。”（维特根斯坦）</p><p>问题分为“问题”与“难题”，前者有标准答案，后者无，只有不同的解决方式，不同的哲学家将一种解决方式探索到极致，并在此路的尽头标明“此路不通”,既然如此，为什么还要去追问这些哲学问题？（见下）</p><h5 id="二、智慧的痛苦"><a href="#二、智慧的痛苦" class="headerlink" title="二、智慧的痛苦"></a>二、智慧的痛苦</h5><pre><code class="hljs">当人拥有智慧之后，会自觉地意识到死亡的问题，感受到无限与有限、相对与绝对、短暂与永恒之间的矛盾，从而产生痛苦。哲学说到底研究的是人的生死问题，一切哲学研究都围绕生死展开。</code></pre><p>希腊人哲学思维的特点：偏爱非个人性的、带有普遍性的东西；试图给事物的存在找出合理的原因（拯救现象）——学以致知、科学思维方式（抽象思维，对概念抽象的程度越高，概念的普遍性、概括性越强）。 </p><h5 id="三、问题与对话（学习哲学的方法）"><a href="#三、问题与对话（学习哲学的方法）" class="headerlink" title="三、问题与对话（学习哲学的方法）"></a>三、问题与对话（学习哲学的方法）</h5><pre><code class="hljs">哲学=哲学史=问题史，哲学只存在于哲学史中，存在于所有哲学家探索出的道路上，而不只存在于某个哲学家的理论里、某本书里。学哲学史的目的在于学习前人的思想之后选择自己的路，方法是读哲学著作，为了读懂晦涩的著作，应该注意以下：</code></pre><p>1、 了解哲学家的问题。哲学为了问题而存在。</p><p>2、 熟悉哲学家的术语。</p><p>3、 沿着哲学家的思路。</p><p>4、 理解哲学家的思想。</p><h5 id="四、西方哲学精神（西方哲学的特点）"><a href="#四、西方哲学精神（西方哲学的特点）" class="headerlink" title="四、西方哲学精神（西方哲学的特点）"></a>四、西方哲学精神（西方哲学的特点）</h5><pre><code class="hljs">希腊人哲学思维的特点：偏爱非个人性的、带有普遍性的东西；试图给事物的存在找出合理的原因（拯救现象）——学以致知、科学思维方式（抽象思维，对概念抽象的程度越高，概念的普遍性、概括性越强）。 希腊的哲学有两种倾向：一为自然哲学，二为超自然的哲学。</code></pre><p>​</p><p>​</p><h3 id="第二讲-哲学的诞生"><a href="#第二讲-哲学的诞生" class="headerlink" title="第二讲 哲学的诞生"></a>第二讲 哲学的诞生</h3><pre><code class="hljs">一、希腊文明的兴起在克里特岛的迈锡尼文明（中央集权制的帝国）灭亡几百年后，希腊城邦开始兴起。哲学在希腊的东方殖民地（小亚细亚伊奥尼亚的米利都人泰勒斯）兴起，后来在雅典繁荣发展，因为“哲学是城邦的女儿”，在民主制下，公共空间相对自由，人们靠语言和逻辑去说服彼此，而不是等级、身份、权力等等。正如中国的百家争鸣，诸侯林立提供了一种相对自由的言论空间。</code></pre><p>​</p><pre><code class="hljs">二、哲学的诞生哲学脱胎于神话。人类最早是以神话的方式给世界一种说明，最终都会归结到“命运”上，而当人们不满足于这种解释时，“命运”会向必然性、规律发展，哲学就在此诞生，在神话止步的地方继续发问，继续给世界一个更合理的解释。（如：阿那克西曼德的平衡补偿原理，和老子的“天之道损有余而补不足，人之道则不然，损不足以奉有余”相像。）</code></pre><p>​</p><p>​</p><pre><code class="hljs">三、希腊哲学希腊哲学分为三个时期：前苏格拉底哲学（早期希腊自然哲学、宇宙生成论）、雅典哲学（苏、柏、亚）、晚期希腊哲学（苏格拉底到公元6世纪柏拉图学园被毁）。</code></pre><p>​</p><pre><code class="hljs">1、前苏格拉底哲学。希腊人看见生物生生灭灭，但自然却循环不息、永恒不灭，便认为在一切变化之中一定有不变的东西。希腊人认为自然界由水火土气构成，而“本原（arche）”是这些元素的来源(arche有“开端”和“主宰”2个含义)，是产生万物、回收万物、永恒不变的东西。泰勒斯（米利都学派创始人）：最早的一个“本原”就是泰勒斯的“水”——“大地浮在水上”“宇宙充满了灵魂”。因为最初哲学家们没有很多概念可用，很多问题都采用比喻等方法来回答，而这里的“水”就是一种比喻，比喻arche像水一样孕育万物而不失去自身，并且流转不已。赫拉克利特（爱菲斯学派创始人）：“宇宙一直是一团永恒的活火”（活火也是一种比喻）；“人不能两次踏进同一条河流” ——&gt;一切皆流，无物常驻（柏拉图）。虽然一切都在变化，但变不是没有，不是无迹可寻的，变化是有规律的。提出“Logos（logic）”（本意为计算、理性、推理）的概念作为宇宙变化的规律。早期自然哲学的局限性：1、缺乏科学的支持；2、建立在经验观察的基础上；3、众说纷纭，莫衷一是；4、理论开端的无穷后退。毕达哥拉斯学派：最早探讨美的本质，一个集政治、学术、宗教于一体的组织。“宇宙万物的本源是数”爱利亚学派：产生于前6世纪南意大利。巴门尼德提出并区分开认识的两条道路与“存在的概念”：1、意见之路（认为非存在存在、存在不存在）和真理之路（存在是存在的、非存在是不存在的）。非存在指的是处于既存在又不存在的状态的（因为它一直在变化）“现象”。非存在不能被述说和思想（因为一直在变化没有一个确定的本质和状态），存在则相反，所以作为思想和作为存在是同一回事，凡能被思想和述说的都存在。2、存在： 这个概念的提出因为西方语言的特殊结构而具有必然性。早期希腊人在认识自然界时并没有将主体与客体分开，因此将语言等同于真实的事物，在自然中寻找永恒不变的东西时，会借助于对语言中永恒不变的语词的寻找。在印欧语系中，系词结构相对固定不变且普遍存在，因此系词被选中并有了名词形式“being”。对于Being一词，“是”是比“存在”更为恰当的翻译，因为中文里的“存在”包含太多的空间性，容易让人们误以为Being指的是具体的事物，实际上，Being一词指的却是一切具体事物的前提。由此巴门尼德确定了形而上学（=本体论）的研究对象——Being，也开创了这门学科。[注：“本体论Ontologia”一词在17世纪被提出来作为形而上学Metaphysics的同义词，由Onto（存在）+logia（论）组成，是研究存在的]巴门尼德的贡献：</code></pre><p>1、 确定了形而上学（&#x3D;本体论）的研究对象；</p><p>2、 确定了思辨哲学的一个基本公式：思维与存在的同一性。（在巴门尼德语境里的含义：只有当认识存在时，思维才能与认识对象达到同一，认识非存在时，思维无法与对象达成同一）；</p><pre><code class="hljs">3、在哲学中开始了推理论证。4、巴门尼德完成了本体论的转向。以桌子为例，巴之前的自然哲学家会问桌子是由什么做的，木头——树——种子——……问不到尽头，也无法说明桌子为什么是桌子，而不是椅子。而巴门尼德会问是什么使一张桌子成为一张桌子，也即桌子的概念。前者为意见之路，后者为真理之路。</code></pre><p>​</p><p>​</p><pre><code class="hljs">                          第三讲 苏格拉底的问题</code></pre><p>​</p><p>一、智者</p><pre><code class="hljs">智者是一群教授修辞学和论辩术的职业教师，他们采用一种相对主义的、感觉主义的视角，认为事物没有是非对错，一切都是意见，否认知识（包括自然界与人类社会）的存在，完全靠诡辩说服对方。智者否定一切传统的东西，虽然使得社会的道德伦理败坏，但也起到一定的思想解放作用。他们的兴起是雅典民主制的产物，也标志着雅典民主制的衰败。普罗泰戈拉：“人是万物的尺度”这里的“人”指的是具体的个人，并非抽象的普遍的“人”，这意味着每个人都是尺度，也就不存在尺度了。由此得出：“一切理论都有其对立的说法”。</code></pre><p>​</p><p>二、苏格拉底              </p><pre><code class="hljs">1、活动的背景：伯罗奔尼撒战争以雅典为首的提洛同盟战败，希腊文明急剧衰落；智者学派否定知识，需要重新树立起知识的权威。2、苏格拉底之死：早起学习自然哲学，但不久即产生质疑，转而认为自然万物真正的主宰和原因并非物质性的本原，而是它的内在目的，即善（agathon）。受自然哲学影响，他认为人不可能获得对自然的知识，转而探求和人本身相关的知识，即“认识你自己”。他认为人都是无知的，但大部分人都意识不到自己的无知，受德尔菲神庙神谕的启示，决定通过辩论让雅典人认识到自己的无知，从而去虚心探寻知识。但这样也得罪了雅典人，被指控为教唆犯和引进了外邦的神（和城邦的利益不符）而判死刑。被判死刑的原因在于苏格拉底的政治理想和雅典城邦发生了冲突：雅典民主制是普遍民主，凡公民皆可参与政治生活，但苏格拉底则主张知识救国，反对无政治知识的人参与政治。3、认识你自己。苏格拉底认为哲学的真正对象不是自然而是人自己，即认识人自身中的“善”，也即“德性（arete）”（希腊语中原指事物的特性、品格、特长、功能，即使一事物成为该事物的本性）但人的德性不同于事物的德性，人的德性是潜在的，需要通过自觉的认识来让其发挥作用，所以，（接下）4、德性即知识。如果人们了解自己的德性就有德性，反之如果不了解就没有。“未经理性审慎的生活是不值得过的生活”。在这一点上来讲，无知即罪恶。苏格拉底认为人性是善的，如果人们了解自己的德性并根据自己的德性的指示就不会去做坏事——“人要以对自己德性的自觉作为一切行动的一个根本前提，一切行为要以一个善的意志为前提，人的行为才是善的”这里，苏格拉底第一次把人的道德当做一种知识来考虑，可谓是伦理学的奠基人。</code></pre><p>那末，如何获得关于德性的知识呢？（接下）</p><pre><code class="hljs">5、“是什么”的问题。巴门尼德认为现象都是假象，都是非存在，思维只能去把握认识“being”，这个being是万物的本原，不动不变。但哲学也要去解释千差万别形形色色的世间万物，而苏格拉底就把巴门尼德的“真理之路”落到了实处，探索一个事物是什么其实就是去探索这个事物的本质规定（或曰定义、德性），这种方法就是通过理性认识把握事物的本质。6、“助产术”（=辩证法）。论辩双方的矛盾运动推动讨论不断深入直到把握事物的本质，这种论辩分为反讥、归纳、诱导、定义四个环节。苏格拉底认为人的知识都是先天的，只不过人们忘了而已，要通过论辩和学习回忆起来。真正的哲学家不是说教者，而是要通过和人们对话、论辩来帮助人们认识自己。</code></pre><p>​</p><pre><code class="hljs">总结：认识人自己即认识人的德性，德性即知识，要获取知识就必须通过理性认识来把握事物的本质，要了解德性就必须通过论辩、对话来认识自己。</code></pre><p>​</p><p>​</p><pre><code class="hljs">                             第四讲 柏拉图</code></pre><p>一、理念论（客观唯心主义）</p><pre><code class="hljs">1、理念的内涵。“理念（idea &amp; eidos）”，两个词均出自动词idein（看），本义为“看见的东西”即形状，转义为灵魂所见的东西。英文中客观的理念为Idea，主观的观念为idea。内涵一：“理念”是从苏格拉底关于“是什么”的定义来的，它的基本规定之一就是“由一种特殊性质所表明的类”，是事物的“共相”（如，这些事物叫做花，而“花”的概念定义就叫做花的理念）。*柏拉图和苏格拉底的认识过程和我们现在的恰好相反，认为先有概念才有事物。内涵二：“理念”并非单纯的抽象概念，而是超越于个别事物之外并且作为其存在</code></pre><p>之根据的实在。</p><pre><code class="hljs">内涵三：理念是事物摹仿的完美模型。内涵四：理念是事物追求实现的目标。</code></pre><p>​</p><p>​</p><pre><code class="hljs">2、柏拉图对事物和理念的关系有两种解释：a. 分有。“如果在美自身之外还有美的事物，那么它美的原因不是别的，就是因为它分有美自身。每类事物都是如此。”b. 摹仿。造物主是根据理念来创造具体事物的，所以事物因摹仿理念而存在。“木工是根据理念来制造我们所使用的床和桌子的”，以此来类比造物主。理念世界和可感世界是完全分离的，前者是真实存在的，而后者不过是前者的摹本或映像。3、理念论涉及的认识论探讨：可感世界——可感而不可知——感觉的对象理念世界——可知而不可感——思想的对象 *那末如何去认识理念？如何确定理念存在？a. 回忆说（先验论的知识先验）。“我们的灵魂原本高居于天上的理念世界”b. 灵魂转向说（先验论的认识能力先验）。“我们不可能通过洞壁上的影像认识身后的事物，除非转过身来。” 即从感觉世界转向理念世界。柏拉图的理念论最重要的目的就是给知识提供根据。PS先验论：认为感觉经验是相对的、偶然的、不可靠的，经验无论怎么重复人们，都不可能从中找到普遍性和必然性。而人的知识或者认识能力是先于感觉经验和社会实践的东西，先天就有。4、柏拉图对理念论的反思。（见于《巴门尼德斯篇》）理念的普遍性问题。一方面认为各种事物皆有理念，一方面认为理念的世界（带有伦理色彩）由“善”主宰，这样就无法处理恶的、丑的东西到底有没有理念。（此问题也被圣奥古斯丁思考过，他提出了“神正论”，认为上帝所创造的世界之所以有恶是因为善的缺失，恶并非实际存在。注意这种“恶”包括自然的恶与人类的恶）理念的分有问题。事物分得理念的部分还是整体？假设分为部分或者假设分为整体都无法推论出理念是统一的这个结论。感觉世界A与理念世界B的分离问题。如果分离，那末如何认识B，而B又怎么可以对A发生作用？（亚里士多德认为事物和事物的概念是融为一体的；黑格尔提出“现象即本质”，现象乃本质的自身显现）5、“通种论”【理念即为“Genos（种）”，打通理念与理念之间关系的学说简称通种论】在早年，柏拉图坚持理念的纯洁性，认为理念之间没有关系，但到了后期，出于解释世界的必要，柏拉图开始认可并逐渐探讨理念和理念间的关系。一件事物的多种属性分属不同的理念，不同的理念聚集到同一事物上，说明理念之间必然有着关联。在《智者篇》中，着重探讨了存在与非存在、相同与相异、运动与静止六大概念。6、后世影响。“一部西方哲学史不过是给柏拉图作注脚”——怀特海；基督教哲学乃柏拉图主义与亚里士多德哲学之混合物。 </code></pre><p>​</p><pre><code class="hljs">                           第五讲 亚里士多德一、知识的科学分类理论知识实践知识创制知识</code></pre><p>​</p><p>​</p><pre><code class="hljs">二、原因论亚里士多德时期的“原因”的意义更接近于一个事物存在所需要的或者说必备的、充分的条件，不同于现在因果关系里的“原因”。亚里士多德在前人的探讨“原因”基础上将构成事物存在的条件归结为四种，即“四因说”，。1、质料因。质料，希腊语hule本意为木头、木料，英语翻译作matter，是事物持续存在的一个基本条件，也叫作“载体”；2、形式因。形式，eidos、form，即一个事物的概念、本质规定；来源于毕达哥拉斯学派的“数”和柏拉图的理念。3、动力因。来源于赫拉克利特的“活火”和恩培多克勒的“爱憎说”（把动力划分为吸引和排斥两个方面）4、目的因。事物总是在追求成为自身、完善自己。这是对以往的希腊哲学的一个概括和总结。“质料”可追溯到早期自然哲学讲的事物的“本原”——水、火、土、气；“形式”即为苏与柏的理念，解决事物“是什么”问题的东西；“动力”可追溯到阿那克萨戈拉的“nous”（引起万物运动的一种理智的力量）；“目的”即苏与柏讲的“善”。后来亚里士多德将质料因称为“质料”，将后三种因合称为“形式”，因为“形式因”即一个事物发展成长要实现的目的，而这种目的就是事物变化发展的动力，推动着事物追求自身的完善。与柏拉图不同，在质料与形式的关系上，亚认为两者结合在一个事物中不可分离，事物是真实存在的，只有当人们去认识事物的概念时，形式才与质料分离。而形式与质料之间的关系是相对的，一个事物的质料可能是另一事物的形式，亚在这里规定最初的质料完全没有形式，即水、火、土、气，而隐德莱希（entelekheia）则是最完满的存在，是纯形式，是引起万物运动而自身不动的宇宙最高目的。 而这两方之间则是质料与形式的潜能——&gt;现实——&gt;潜能——&gt;现实……的互相生成关系</code></pre><p>​</p><pre><code class="hljs">三、形而上学（Metaphysics）“有一门学问（形而上学）专门研究作为存在的存在以及存在由于自己的本性而具有的那些属性”，自然科学研究的是事物某些方面的属性，而哲学研究的是作为事物存在的前提的“存在”及其属性。希腊语词源追溯：后人整理完亚里士多德的《物理学》后发现了《物理学之后诸卷》（Ta meta ta phusika），后来简写作Metaphusika即Metaphysics，“meta”有后、超越、元的意思。汉语词义：一指片面静止孤立看问题的近代形而上学（源自黑格尔与恩格斯，影响范围仅限于社会主义国家），一指西方哲学的一门学科同义词：本体论，英文Ontology（Ontologia）= to on logos（关于存在的理论）（1）存在论（存疑）下定义的方法为“属加种差”，即先为存在物找到其从属的高一层次的“属”，然后将该存在物与同样从属于该“属”的其他种类的存在物区别开来（人是有理性的、会使用工具的动物），但亚发现这样的方法对于定义什么是存在本身并不适用，因为存在不属于任何东西。他转而去探讨存在是怎么存在的，也即存在的意义：一为偶然的意义，一为本然的意义（事物必然拥有的意义），亚关注的是存在的本然的意义，即“范畴”（对事物最大最普遍最一般的说明？？？），他列出了十种范畴：实体，数量，性质，关系，地点，时间，状态，动作，所有，承受。</code></pre><p>​</p><p>​</p><pre><code class="hljs">（2）“实体（ousia）”“实体，在最严格、最原始、最根本的意义上说，是既不述说一个主体（即一个判断中的主词），也不存在一个主体之中，如‘个别的人’、‘个别的马’。” 实体从语言和逻辑上说处于主词地位，其他表示数量性质等的范畴处于宾词的地位，依附于实体，只能用来说明主词，而实体则不能述说别的任何东西，是独立的。但后来亚发现个别的、具体的事物可以分为形式与质料，又把形式叫做“第一实体”亚里士多德的哲学所提供的终极关怀：人生的最高使命或者说最高境界就是去思想到那个神圣的最高的存在并同它融为一体。“思辨（theoretikos）是最高的幸福”（亚）</code></pre><p>​</p><pre><code class="hljs">四、亚里士多德的伦理学伦理学是实践的知识，探讨它不是为了知道什么，而是为了实践，为了成为一个善良的人。问题一：什么是最好的生活方式（实现幸福）？什么是幸福？亚：幸福就是合乎德性地实现活动。问题二：在不确定的情况下，我们应该做什么，不应该做什么？我们如何去选择？亚：合乎中道。实践智慧（Phronesis）：如何运用理性做出一个最佳选择。</code></pre><p>​</p><p>​</p><pre><code class="hljs">                          第六讲 晚期希腊哲学（因为战乱动荡而关注伦理和人生）四大主要流派：伊壁鸠鲁主义：快乐主义的伦理学，顺应自然（认为自然由原子和虚空构成），推崇肉体享乐与灵魂幸福。斯多亚学派（画廊学派）：塞浦路斯的芝诺创始，顺应自然（认为自然是智慧的活火，顺应它就是要按照理性去生活），强调灵魂和肉体的区别，认为人生的目的是要摆脱肉体的限制，让灵魂得到净化。怀疑主义：只有对一切不下判断、不置可否，达到不动心的境界，才能得到安宁。新柏拉图主义：普罗提诺创始</code></pre><p>​</p><p>​</p><pre><code class="hljs">             第七讲 信仰的时代（中世纪哲学2世纪——16世纪）一、基督教对哲学的贡献超验性、内在性、“自由”成为了的问题（上帝创造的人拥有自由意志）、从敬畏自然到支配主宰自然（上帝造人，让人成为地球的主宰）</code></pre><p>​</p><pre><code class="hljs">二、教父哲学产生于公元2世纪到5世纪，由一批具有哲学素养的基督教信徒创建，这些信徒被后世称为“教父”，分为西罗马帝国的西方教父（使用拉丁语）与东罗马帝国的东方教父（使用希腊语）。圣奥古斯丁（354——430年）。神正论，认为世界之所以存在是由于上帝的存在，虽然上帝是完满的，但上帝创造的世界不是完满的，恶是善的缺失，并非实体性的存在。三、经院哲学在查理曼帝国的宫廷学校、基督教的大修道院、主教管区的附属学校发展起来的基督教哲学。托马斯·阿奎那（1225——1274）。对于一般和个别、共相与殊相的讨论成为重点，并由此分化出两派：1、唯实论/实在论：普遍的共相是真正的实在，殊相不过是现象2、唯名论：个别的东西才是真正存在的，共相不过是概念、语词而已。两派的争论如同柏拉图与亚里士多德的争论。</code></pre><p>​</p><p>​</p><pre><code class="hljs">                           第八讲 文艺复兴与宗教改革人文主义：将人与自然对比，突出人的价值与尊严，而非与神对比。近代哲学诞生的背景：世界的发现（航海大发现）、人的发现、科学的发现（哥白尼的“日心说”）</code></pre><p>​</p><pre><code class="hljs">                           第九讲 主体性的觉醒希腊哲学重视经验和科学精神，基督教哲学重视超验性的形而上学，两者在主体性的觉醒或自我意识原则的基础上构成了近代哲学的基本主题：自然科学（形成了系统的认识论和自然哲学理论）与超验性的本体论问题。近代哲学试图将两个方面结合在一起，寻找一种能一举解决全部问题的方法。在某种意义上，希腊文明与希伯来文明汇流到了一起。近代初期科学的发展重新树立起理性的权威（相对于文艺复兴时期人们的重感性轻理性来说），给哲学家提出很多问题，从而使得哲学思想开始复苏。近代哲学的精神：启蒙主义（涵盖整个近代哲学，从经验论和唯理论到德国古典哲学）。</code></pre><p>​ </p><pre><code class="hljs">笛卡尔（1596——1650年，近代哲学的创始人）他开始活动之时，正值经院哲学衰落、哲学百废待兴、科学飞速发展，恢复理性的地位、重建形而上学、为整个人类知识的大厦重新奠定基础就成了他的任务。1、方法论。旧逻辑只能用来推理分析已知的知识而不能获得新知识，几何学方法能推演出新知识来但却只研究抽象的符号，不研究知识。笛卡尔各取所长提出了“理性演绎法”，理性指理智直观（由它来寻找形而上学的第一原理），演绎指从第一原理（“天赋观念”）推演出整个逻辑体系。外来的观念依赖于感觉，虚构的观念借助于想象，而天赋观念则出于纯粹的理智（是客观的）。在此他决定用方法论意义上的怀疑来质疑一切知识与观念，直到找到最清楚无可置疑的、可以作为形而上学的第一原理的“天赋观念”。“如果我想要在科学上建立起来某种坚定可靠、经久不变的东西的话，我就非要在我有生之日认真地把我历来信以为真的一切见解统统清除出去，在从根本上重新开始不可。”“把沙子和覆土挖掉，为的是找出磐石和硬土。”2、“我思故我在（I think therefore I am./Je pense, donc je suis.）”（形而上学第一原理）。他怀疑一切事物、观念、知识、主动感知活动（笛卡尔认为这种实践也常常出现在梦境中，使得我们无法确切地区分梦与醒），但发现“我在怀疑”本身是无可置疑的，而怀疑这一思想活动总是由怀疑者、思想者来进行的，因此得出“我思故我在”的第一原理。这个原理并非由推理得出，而是由理智直观得出的。 法文直译为“通过思考而意识到了我的存在，由思而知在”，中文翻译（很不确切）里的“在”不指肉身的存在，而指我自觉地意识到的自己的“存在”，笛卡尔想强调的应该是思想是人的本质。“‘我’是一个心灵实体，这个心灵实体的本质乃是‘思想’。”此原理的提出确定了理性的地位，也标志着人的主体性的觉醒。笛卡尔通过怀疑方法确立我思的过程，亦即通过否定性的方式排除知识内容，最终剩下抽象一般的认识主体的过程，也就是确立主体性的过程。3、第二原理（上帝存在）与第三原理（物质世界存在）的证明。证明过程：由怀疑确定的“我”是不完满的，在我的思想却中有一个无限完满的上帝的概念。因为不完满的东西只能由完满的东西创造，所以“我”肯定不是上帝概念的原因，它一定另有原因。由此我们只能说，在我们之外，有一个无限完满的心灵把这种观念赋予我的心灵，所以我有上帝的观念，而这个心灵就是所谓的上帝。因为欺骗和谬误这些非实在的东西与上帝这样一个绝对实在的完满属性不相符合，所以上帝不是一个骗子，而祂给予我们的认识能力就不可能是贻误人生、使我们认假为真的。</code></pre><p>   所以，由于确信上帝的实在性与完满性，我现在也确信物质世界的存在。</p><p>​</p><pre><code class="hljs">笛卡尔之所以要证明上帝存在，很重要的原因就是要通过上帝存在来确证外部世界的存在——曲线救国。</code></pre><p>​</p><pre><code class="hljs">4、笛卡尔的二元论：“人的心灵能够思想而没有广延（某物占据或表面上占据空间部分的性能）”，物体有广延但是不能思想，精神世界与物质世界都独立地存在而互不关联。在解决思维与存在的同一性这个问题上，笛卡尔仍然借助上帝——上帝将规律给予物质世界，同时将规律的概念赋予给人的精神世界。思维通过上帝来认识外部世界，与外部世界不发生直接关联，更不借助感觉经验去认识和推论外部世界及其规律。确立主体性使得笛卡尔成为近代哲学的创始人，然而也引出了二元论的难题（思维与存在的关系问题是近代哲学的基本问题——黑格尔），给近代哲学打上深深的烙印。</code></pre><p>​</p><pre><code class="hljs">疑问：只有“我怀疑”这件事是唯一确定存在的，那末“我的思想中存在一个无限完满的上帝概念”这件事就不一定成立，而从这个前提推导出来的上帝存在就不一定成立。</code></pre><p>​</p><pre><code class="hljs">                            第十讲 大陆唯理论                三大理性主义者：莱布尼茨、笛卡尔、斯宾诺莎一、巴鲁赫·德·斯宾诺莎（1632-1677）</code></pre><p>   “一般的哲学是从被创造物开始的（研究自然），笛卡尔是从心灵开始的，我则是从神开始的（神圣的必然性）。”</p><pre><code class="hljs">“事物被我们认为是真实的，不外两个方式：或者是就事物存在于一定的时间及地点的关系中加以认识，或者是就事物被包括在神内，从神圣的自然之必然性去加以认识。”</code></pre><p>1、 本体论——关于实体的学说</p><pre><code class="hljs">“实体，我理解为在自身内并通过自身而被认识的东西，换言之，形成实体的概念，可以无须借助于他物的概念。”（在自身内：事物存在的原因在自身之中，自身即为自己存在的原因，实体即自因）</code></pre><p>   实体即自因，假设它在某些方面受到（别的事物的）限制，就意味着它是有限的，并且这种有限的存在状态是因为别的事物的限制，那末实体就不在自身内而在他物内了，就不是自因了，因此该假设不成立，反之可证出实体是无限的。</p><pre><code class="hljs">实体是永恒的，是不可分的，是唯一的。实体=神=自然，这里的“自然”包括心与物。古希腊哲学一开始将世界看作一个整体，自己是自己存在的原因，万物从水火土气四大元素中产生，毁灭后又变成水火土气，但逐渐地，人们开始在自己生活的世界之外去寻找这个世界存在的原因，这一点在基督教哲学里体现得更加明显（上帝创造世界，造物主与被造物），能生的自然（作为原因的自然）和被生的自然（作为结果的自然）的区别就是这样。而斯宾诺莎讲，自然是自己存在的原因，也是自己存在的结果（实体即自因），而“神”（即神圣的必然性）不在世界之外，就在世界之中。这一点可以说是泛神论（接近于无神论，因为否定了人格神），和一切西方宗教的神创论和当时大多数科学家与哲学家所持的自然神论（上帝是“第一动力”）都有所冲突。实体的属性：思维和广延。“属性，我理解为由知性（intellectus）看来是构成实体的本质的东西。”（从人的理智的角度只能认识到这两个）任何一个事物既是思维的存在又是广延的存在，虽然两方面不能互相影响、发生关联，但是心和物是一致的，统一于最高实体，反映的是最高实体的本质。斯宾诺莎把笛卡尔的两个有限实体（思维与广延）下降为一个实体的两个属性，并通过这种心物两面论来解决笛卡尔的二元论难题。实体的样式：“样式（modus），我理解为实体的分殊，亦即在他物内通过他物而被认知的东西”，实际上就是实体的表现，就是我们看到的大千世界。这个样式的世界中的事物都在他物内并通过他物而被认识，存在无数的因果链条，因而是个被必然性统治的世界，是个受限制的世界，甚至认为物质界中没有偶然性，“偶然性是人们无知的托辞”。</code></pre><p>​                                                                                                                           </p><pre><code class="hljs">2、认识论把知识分为三类：意见或想象——没有确定性理性知识——需要推理来论证直观知识——对本质的正确认识，源自于“真观念”（即笛卡尔的“天赋观念”），它在人类理智中的地位如同最原始最简单的工具之于所有其他的后来的、更复杂精致的工具。总是与事物相一致，总是正确的。</code></pre><p>​</p><pre><code class="hljs">3、伦理学虽然人生活在必然性的因果链条的束缚之中，但仍然可以通过认识人的心灵与整个自然（=实体=神）相一致来抵达至善的境界，这种“至善”可以使人保持永恒的快乐与幸福。</code></pre><p>​</p><pre><code class="hljs">二、莱布尼茨（1646-1716）提出哲学始终面对的两大迷宫：自由与必然之间的矛盾；不可分的点与连续性之间的矛盾。莱布尼茨认为实体是无限多的，并具有以下几个特征：</code></pre><p>1、 不可分割性。有广延的东西可以被分割，且依他物而被知，不具有自足性，而实体是自足的，依自身而被知，因此不是具有广延的东西，也就不可分割。实体也被他称作“单子”；</p><p>2、 封闭性。因为每一个单子必然自足，不依他而存在，所以单子之间没有交互作用，“单子之间没有窗户。”</p><p>​</p><p>​</p><p>​</p><p>​</p><p>​</p><p>​</p><p>​</p><p>​</p><pre><code class="hljs">                        第十一讲 经验论经验论重视实验科学，以“心理论”的方式构建体系，往往按照“经验—观念—知识”的模式。经验论的基本原则：一切知识来源于感觉经验；我们无法超脱出感觉经验去认识世界。</code></pre><p>​</p><pre><code class="hljs">一、洛克（1632-1704）经验主义唯物论 《人类理智论》反对“天赋观念”的存在，提出“白板说”，人的心灵一开始就是一张白纸，外部事物通过外感官印在这张白纸上，产生经验，它变成观念再变成知识；同时人还会通过内感官来反省，形成另一种知识或者处理原有的知识。从外物到经验：物体的性质分为“第一性的质”（物体及各部分的大小、形状、数目、位置、运动和静止、体积、密度等等，即事物的广延的、原始的、固有的性质）与“第二性的质”（指物体具有的借助于第一性的质使人产生颜色、声音、滋味等不同感觉的性质，是一种附属性质）从经验到观念再到知识：观念可分为简单观念（由感官获得，具有单纯性与被动性）和复杂观念（将几个简单观念组合起来形成的），知识就是理智对于两种观念之间的或者不同观念之间的或契合或矛盾的关系的一种知觉和认识。洛克经验论的缺陷：一方面主张我们大部分的观念来源于外部事物的作用，因而知识的实在性标准应该是观念与事物真相的契合，但是另一方面又强调知识只是关于观念之间的关系的认识，因而将知识限制在观念范围之内，难以确定知识与外部对象的同一性。“显然，人心并不直接认识各种事物，它必然要以它们所有的观念为媒，才能知道它们。因此，我们的知识所以为真，只是因为在我们的观念和事物的实相之间有一种契合。不过在这里，我们拿什么作为标准呢？人心既然除了自己的观念之外不再认识别的，那末它怎么能知道它们是和事物本身相符合的呢？”洛克认为有两种观念是真实的：1、一切的“简单观念”。感觉观念是由被动的接受产生的，而非心灵自己的创造，各种事物之所以能产生那些知觉，只是因为上帝的智慧和意志把它们造得特别宜于产生那些知觉，把我们的心灵造得能够感知这些事物。2、一切“复杂观念”。复杂观念是简单观念的组合，因此不存在与外部事物是否符合的问题，只与自身符合一致。“任何观念如果原来就不表象任何事物，而只表象其自身，则它便不会有错误的表象，它也不会因为与任何事物不相似致我们陷于错误，而不能有真的地了解。”（表示怀疑）洛克的经验论蕴含着不可知论的因素：人通过外部感官获得的经验与宇宙相比已经很受限了，而人不可能记住所有的经验，把这些经验有选择地组织成的观念就更少，而同理探讨观念之间关系的知识就更狭小了。经验论必然导致的两个难题：1、经验从何而来？能不能超出经验去认识引起经验的那个东西？</code></pre><p>   2、感觉经验总是个别的、偶然的、相对的，那末以感觉经验为基础的知识怎么会有普遍性与必然性？（经验重复一万次还是经验，黑天鹅的例子）</p><p>​</p><pre><code class="hljs">二、贝克莱（1685-1753）非物质主义 主观唯心主义 维护宗教 《人类知识原理》  在认识中，只存在感知观念的心灵（主体）和被心灵感知的观念（客体）大前提：观念的存在在于被感知小前提：物=可感物=观念的集合结论：物的存在即被感知（物存不存在取决于我的心灵有没有感知到物）之所以用“观念”而不用“事物”，是为了反对心外有物的唯物主义，他不是想把事物变成观念，而是想把观念变成事物，即维护观念的客观实在性。贝克莱的“存在即感知和被感知”并不是我感知到就存在、感知不到就不存在的唯我论，而是说这个世界以观念的形式存在（观念并非主观的东西，是客观实在的，我们无非是具有感知这些观念的能力而已），你感知到的只能是观念，不能是别的。但我们的心灵只是去感知这个观念的世界，并没有创造它，在此，贝克莱说一定有一个无限的心灵（上帝）创造了这个观念的世界，也创造了我们有限的心灵，使我们能够感知这个世界。对比洛克：物客观存在——物刺激心灵形成观念——观念组成知识，超出经验去判断经验的产生是由于上帝。贝克莱：观念客观存在——心灵感知观念——观念组成知识，超出观念去判断观念由上帝创造。两人关于观念的产生问题都违背了经验论的基本原则。</code></pre><p>​</p><pre><code class="hljs">三、休谟（1711-1776）《人性论》《人类理智研究》人的意识分为观念和印象，人类理智的对象分为观念的关系（关于它的知识是必然的知识，自然界可以不存在三角形，但欧几里得定义的概念上的三角形仍然存在，因为它符合逻辑能够自洽）和实际的事情（关于它的知识是或然的知识，经验重复一万次也是经验，感觉经验只对过去和当下有效，对未来无效），实际上休谟认为人类只有这两方面的知识，其他所有的都不叫知识（特别是形而上学和神学，休谟称之为伪问题，都无法在逻辑和经验上得到证明）。“在所有的原则里，只有因果观念使人们超出经验去下判断。”因为休谟认为人只经验到了所谓的“原因”与所谓的“结果”，而没有也不可能经验到这两者之间的所谓的必然的因果联系，因此，人们说的因果联系实际上只是一种习惯性联想，是超出经验范围所下的一个判断。比如看到A之后看到B，多次这样之后便认为A是因，B是果，再比如巴甫洛夫的狗，狗认为铃铛是因，食物是果。但这样的习惯性联想对人来说十分重要，它让人对世界产生秩序感，从而适应世界，“习惯是人生伟大的指南”。</code></pre><p>​</p><p>​</p><pre><code class="hljs">                    第十二讲 近代哲学的社会政治思想一种社会制度应该建立符合人的自然本性，那个时代的两个核心概念：自然状态、社会契约。</code></pre><p>一、霍布斯（1588-1679）</p><pre><code class="hljs">霍布斯的国家起源学说：人的本性是趋利避害、自私的，为了利益，人与人之间会发生分歧、争端、争斗乃至战争，当人们处于一种混乱的状态时，每个人的利益都会受损，这时人们为了自己的利益制定出一些道德准则来，但是道德毕竟是软弱的，所以人们便相互约定，把他们的自然权利转让出去，交付给一个人或由一些人组成的会议，把大家的意志变成一个意志，由这个意志来限制暴力、调解争端，保护大家的利益。“国家的产生是通过人们相互之间订立契约，把全部权利交付给一个人或一些人组成的会议而实现的。”（国家就是利维坦,至高无上）</code></pre><p>二、洛克</p><pre><code class="hljs">同意社会契约论，但认为人们订立契约、建立政府的目的是为了保护自己的自然权利，所以人们并非像霍布斯所说的将全部自然权利都交给专制的政府或君主，他们放弃的唯一的自然权利只是维护自然法，惩罚犯罪者的执行权。人们拥有人民主权，如果政府不能维护好订立契约者们的自然权利，人们就可以群起推翻之。为了防止君主专制，提出权力分散、互相制约的学说。</code></pre><p>三、孟德斯鸠</p><pre><code class="hljs">一切存在物都有它们的“法（规律）”，人类的法是“根本理性”，所谓“法的精神”就是指作为一般的普遍的人类的法与一个国家的具体情况（宗教、民族、文化等等方面）相结合（地理环境决定论），由此产生了不同的政治体制。认为人类历史上存在过三种政体：共和政体（全体人民或仅仅一部分人民握有最高权力的政体）、君主政体（由一个人执政，不过参照固定的法律，英国君主立宪制就是典范，孟德斯鸠倾向于它）、专制政体（既无法律又无规章，由一个人按照自己的意志与性情领导一切）自由： “在一个有法律的社会里，自由仅仅是：一个人能够做他应该做的事情，而不被强迫去做他不应该做的事情。”   “自由是做法律所许可的一切事情的权利；如果一个公民能够哦做法律所禁止的事情，他就不再有自由了，因为其他人同样会有这种权利。” </code></pre><p>在人们从自然状态向社会状态过渡的过程中出现的法律绝不是为了限制人们的自由，而是为了保障人们的自由，法律为社会人的活动划定了一条底线，允许人们在这条底线之上实现自己的价值、追求自己的幸福。</p><p>四、卢梭（1712-1778）</p><pre><code class="hljs">卢梭把“人所形成的人”即社会人与自然人加以比较，来说明人类社会的基础和不平等的起源。在自然状态下，人人自由平等，人类的不平等源自私有制的产生，后来出现的国家加剧了这一不平等状态。启蒙思想家认为人只要大胆地使用理性，提倡科学与知识进步，社会就会不断进步，但卢梭则认为社会越发展越不平等。卢梭认为迄今为止一切社会制度都以人失去自由平等为代价，唯有合理的社会契约制度能保留人们的自由与平等，这样的制度的要旨就在于“每个结合者及其自身的一切权利全部都转让给整个的集体”，在这样的社会里，不存在统治者与被统治者，自己是自己的主人，法律、决策、政策、规则、制度等等依“公意”（公共利益的代表，是从作为个人意志总和的“众意”中除掉相异的地方而剩下的相同的部分）来制定。</code></pre><p>​</p><pre><code class="hljs">第十三讲 康德的“哥白尼式的革命”</code></pre><p>一、康德哲学面对的问题（都可以归结为和“知识”相关的问题）</p><pre><code class="hljs">1、理性的危机：经验论和唯理论（与精神世界无关的物质世界里的有关事物属性的知识无法进入人的精神里）没有做到证明科学知识具有普遍性与必然性。2、自由的失落：启蒙思想要实现人的自由与解放，但当时的科学主义渗透到哲学乃至一切学科的研究里，导致哲学里决定论占据上风（即人、社会、自然都服从于自然法则），这就使自由失去了自己的地位。3、形而上学的名存实亡：形而上学想成为科学但是没有成为。康德认为形而上学体现的是人类理性试图超越自身有限性，通达自由境界的一种理想，但假如形而上学试图成为一种科学，去探索那些普遍性必然性的法则，那么就与这个理想背道而驰了。</code></pre><p>   问题总结：在一个严格受自然法则限制的世界上，人有没有自由？有没有不同于其他自然存在物的价值与尊严？</p><pre><code class="hljs">对康德影响最大的两个人：休谟，打破了康德的独断论迷梦，独断主义/独断论（dogmatism）：没有对理性的认识能力进行深入的考察，就武断断定的哲学理论；卢梭，让康德改变过去的看法，认为真正体现人的价值与尊严的不是知识与理性，而是人的道德水平。</code></pre><p>二、康德哥白尼式的革命</p><pre><code class="hljs">经验论和唯理论的困境是：如果知识必须建立在感觉经验之上，就不可能有普遍必然性；如果有普遍必然性，就必须是先天的，不可能来源于感觉经验。两者达成共识——从感觉经验不可能探索出具有普遍性与必然性的科学知识。但现有的科学知识（牛顿物理学和欧几里得几何学）却具有普遍性必然性，前人在这里无计可施，而康德参照了哥白尼颠倒人们关于太阳围绕地球公转的成见，提出：不是知识必须符合对象（意味着知识具有普遍必然性），而是对象必须符合认识主体的先天认识形式。康德一方面承认一切知识来源于感觉经验，一方面认为主体具有加工整理感觉经验的先天认识形式（独立于经验同时作为经验的先决条件，对象符合这种先天形式，也就意味着加工出来的知识具有普遍必然性），而由此形成的科学知识也就同时具有经验内容与普遍必然性了。</code></pre><p>  科学</p><p>知识</p><pre><code class="hljs"> 构成  来源</code></pre><p> 存在方式</p><p> 作为真理的依据</p><p>   经验内容</p><p> 感觉器官</p><pre><code class="hljs"> 内容</code></pre><p> 过去：知识符合对象</p><p>   普遍必然性</p><p> 先天认识形式</p><pre><code class="hljs"> 形式</code></pre><p> 现在：对象符合先天形式</p><p>​    </p><p>​</p><pre><code class="hljs">不可知论：一个难题随着这种逆向的哥白尼式的观点而来，即所谓的“先天知识形式”限制了我们的认识能力与范围，我们认识到的只是事物那符合我们的先天形式的那一方面，而无法认识事物的整体面貌——物自体不可知，康德在此区分了一组概念，erscheinungen/appearance（显现）&amp; dinge an sich/things in themselves（物自体），这种不可知论打破了形而上学探索世界的终极原因的理想。但随即，康德就把这个看似消极的结论转化为了一个积极的论证出发点：在现象界中，一切事物都受到限制，没有自由，但物自体却不受任何先天认识形式的限制，我们可以从逻辑上假设erscheinungen是自由的，这就为伦理学和道德留下了追求自由的机会。“我必须限制知识（科学-纯粹理论理性），以便为信念（伦理学-纯粹实践理性，甚至是形而上学）留地盘”，康德在伦理学和科学中间严格地划分界限，科学只能去认识必然性，不可能使人类得到自由，一旦逾越界限甚至会妨害人类的自由。“人是有限的理性存在”——人是两个世界的成员，一方面是感觉世界、自然的成员，受到自然法则的必定限制，一切都是必然的，没有自由，另一方面是理性世界的成员，可以拥有理性但不必然拥有理性，可以但不必定受理性法则的限制。人之为人还是在于理性，人类应该按照理性法则（体现为道德法则）去做，只有在这个领域人类才拥有自由。</code></pre><p>​</p><p>康德为何要为形而上学和伦理学“留地盘”？</p><pre><code class="hljs">康德的三大批判（康德的“批判”指的是分析和考察，对象是理性，这种哲学方法与独断论相对）实际上解决的是形而上学和伦理学问题，在那个科学高歌猛进的启蒙时代，科学主义登上宝座，上帝（宗教信仰，也包括伦理学、道德、形而上学等等）退位，工具理性呈现出压倒价值理性的发展趋势，实际上卢梭已经看出了这种迹象，而康德和他的关注一样，想要去研究科学和理论理性究竟能不能代替上帝，填补人们的精神空虚。价值多元化、道德相对主义出现并在今日成为普遍现象，今天研究康德仍然有现实意义。 作者：古哼哼 https://www.bilibili.com/read/cv12721140?spm_id_from=333.999.0.0 出处：bilibili</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>杂感一</title>
    <link href="/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E6%9D%82%E6%84%9F%E4%B8%80/"/>
    <url>/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E6%9D%82%E6%84%9F%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><h2 id="杂感"><a href="#杂感" class="headerlink" title="杂感"></a>杂感</h2><a href="https://pprince.top/img/243C17A54D86D99A1C34B6CA78565960.jpg"><img src="https://pprince.top/img/243C17A54D86D99A1C34B6CA78565960.jpg" alt="img"></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>杂感二</title>
    <link href="/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E6%9D%82%E6%84%9F%E4%BA%8C/"/>
    <url>/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E6%9D%82%E6%84%9F%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><h2 id="杂感"><a href="#杂感" class="headerlink" title="杂感"></a>杂感</h2>第一，定义什么坏的，好的和坏的一定对立吗，什么是对的，什么是错的，苏格拉底说，没有好坏，只有对美的偏离。<br>第二，组织里面的坏人，金一南教授，组织的失败<br>第三，坏的一定是坏的吗？清朝和珅与纪晓岚<br>，谣言，真实的历史上，两位，<br>人的偏见，不能以偏概全，<br>第四，提出问题，提出解决的思路<br>我的解决思路<br>第五，从心出发，心是什么，看到的就是什么，<br>第六，无法改变世界，社会，自己，<br>第七，通过改变自己，影响他人，修身齐家<br>第八，真理存在，月亮的例子</li></ul>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>叫唤</title>
    <link href="/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E5%8F%AB%E5%94%A4/"/>
    <url>/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E5%8F%AB%E5%94%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><h2 id="叫唤"><a href="#叫唤" class="headerlink" title="叫唤"></a>叫唤</h2><a href="https://pprince.top/img/C24E999EBF8D0E108099E849F8B60A3E.jpg"><img src="https://pprince.top/img/C24E999EBF8D0E108099E849F8B60A3E.jpg" alt="img"></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回首</title>
    <link href="/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E5%9B%9E%E9%A6%96/"/>
    <url>/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E5%9B%9E%E9%A6%96/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><h2 id="我与马克思二"><a href="#我与马克思二" class="headerlink" title="我与马克思二"></a>我与马克思二</h2><p>我错了，原本我所憎恶的一切，原来是我之所以能够憎恶的基础。我与他们有最根本的区别。</p><p>但是这种醒悟是困难的，所以，爬山的路上，慢慢前进吧！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>行人的路</title>
    <link href="/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E8%A1%8C%E4%BA%BA%E7%9A%84%E8%B7%AF/"/>
    <url>/2022/10/11/%E9%A9%AC%E5%85%8B%E6%80%9D/%E8%A1%8C%E4%BA%BA%E7%9A%84%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li><h2 id="我与马克思"><a href="#我与马克思" class="headerlink" title="我与马克思"></a>我与马克思</h2><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>国庆将至，加之近来没有花时间学习，于是在国庆期间买了基本著作，准备认真研读，准备工作必不可少，于是乎，学习背景人文知识，了解事情的由来经过便要花上月余时间，至今，书的包装还没有打开来，烦恼却接重而来。</p><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>我是由现在写过去，当初的感受到如今怕是很少能够描绘的出一二，痛苦则是必要过程，当初的想法在今天看来是一个不成熟的决定，我不应当把大家，或者任何人带入到这一种痛苦之中来，哲学的学问本就是没有任何的用处的。于是在今天又做了另一个不成熟的决定，从今开始，就独自出发吧</p><p>范畴的建立追溯到初始要回到人类理性的怀抱，假如我借用道德经中的话来说就是，<em><strong>道可道，非常道</strong></em>，但由此也不过是用一种别的范畴来解释另一种罢了，那么就有一个追问，最开始的“一”，是怎么来的，这是个很大的问题。</p><p>但今天我不是来讨论这个一，我今天是来写下，一这下面的之一，马克思主义，在过去的很长一段时间里，我不知道我在干什么，我不知道我要走什么样的道路，在我还很懵懂的时候，由于因缘的汇聚之下，我接触到了马克思，我理所当然的认为我应该走的是这样的一条道路，于是从这里我就开始出发了。</p><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>他对我来说没有任何的意义，只是一个名字，一种概念。但，当我走向泰山就明白，泰山的高度。</p><p>此时的我应该是登上几步路在休息的行人，我本应该为自己呐喊几句，现在想想本来就应该休息的我，实在不应该浪费精力，况且对于一个在休息的人来说，痛苦已经消逝大半，他又有什么样的理由去呐喊几句呢！</p><p>短暂的路程告诉我，泰山是泰山，他有山的影子，但他不是山。爬山实在是不应该带上任何的东西，我只是个爬山的行人，有幸在爬的路途中偷窥到许多的精彩，也借着山的高度看了看世界，就不应该在有任何的留恋，行人应该有行人的觉悟，行人的我的路途不在山之中。</p><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>爬山的人终究要回家，我终究还是要回家</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>考研计划</title>
    <link href="/2022/10/11/%E8%AE%A1%E5%88%92/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/"/>
    <url>/2022/10/11/%E8%AE%A1%E5%88%92/%E8%80%83%E7%A0%94%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>专升本计划</title>
    <link href="/2022/10/11/%E8%AE%A1%E5%88%92/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%AE%A1%E5%88%92/"/>
    <url>/2022/10/11/%E8%AE%A1%E5%88%92/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>经济学</title>
    <link href="/2022/10/10/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    <url>/2022/10/10/%E7%BB%8F%E6%B5%8E%E5%AD%A6/%E7%BB%8F%E6%B5%8E%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    
    <categories>
      
      <category>经济学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络安全</title>
    <link href="/2022/10/10/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <url>/2022/10/10/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/2022/10/10/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    <url>/2022/10/10/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>人工智能</title>
    <link href="/2022/10/10/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    <url>/2022/10/10/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大数据</title>
    <link href="/2022/10/10/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/10/10/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>政治学</title>
    <link href="/2022/10/10/%E6%94%BF%E6%B2%BB%E5%AD%A6/%E6%94%BF%E6%B2%BB%E5%AD%A6/"/>
    <url>/2022/10/10/%E6%94%BF%E6%B2%BB%E5%AD%A6/%E6%94%BF%E6%B2%BB%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>政治学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>苏格拉底</title>
    <link href="/2022/10/10/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/"/>
    <url>/2022/10/10/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/%E8%8B%8F%E6%A0%BC%E6%8B%89%E5%BA%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>苏格拉底</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>理想国</title>
    <link href="/2022/10/10/%E7%90%86%E6%83%B3%E5%9B%BD/%E7%90%86%E6%83%B3%E5%9B%BD/"/>
    <url>/2022/10/10/%E7%90%86%E6%83%B3%E5%9B%BD/%E7%90%86%E6%83%B3%E5%9B%BD/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>理想国</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>西方哲学</title>
    <link href="/2022/10/10/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6/"/>
    <url>/2022/10/10/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6/%E8%A5%BF%E6%96%B9%E5%93%B2%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>西方哲学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>法学</title>
    <link href="/2022/10/10/%E6%B3%95%E5%AD%A6/%E6%B3%95%E5%AD%A6/"/>
    <url>/2022/10/10/%E6%B3%95%E5%AD%A6/%E6%B3%95%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>法学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>儒家</title>
    <link href="/2022/10/10/%E5%84%92%E5%AE%B6/%E5%84%92%E5%AE%B6/"/>
    <url>/2022/10/10/%E5%84%92%E5%AE%B6/%E5%84%92%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>儒家</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>王阳明心学</title>
    <link href="/2022/10/10/%E5%BF%83%E5%AD%A6/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/"/>
    <url>/2022/10/10/%E5%BF%83%E5%AD%A6/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>王阳明心学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>道家</title>
    <link href="/2022/10/10/%E9%81%93%E5%AE%B6/%E9%81%93%E5%AE%B6/"/>
    <url>/2022/10/10/%E9%81%93%E5%AE%B6/%E9%81%93%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>道家</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>佛家</title>
    <link href="/2022/10/10/%E4%BD%9B%E5%AE%B6/%E4%BD%9B%E5%AE%B6/"/>
    <url>/2022/10/10/%E4%BD%9B%E5%AE%B6/%E4%BD%9B%E5%AE%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>佛家</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>社会学</title>
    <link href="/2022/10/10/%E7%A4%BE%E4%BC%9A%E5%AD%A6/%E7%A4%BE%E4%BC%9A%E5%AD%A6/"/>
    <url>/2022/10/10/%E7%A4%BE%E4%BC%9A%E5%AD%A6/%E7%A4%BE%E4%BC%9A%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>社会学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>变态心理学</title>
    <link href="/2022/10/10/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%8F%98%E6%80%81%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    <url>/2022/10/10/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%8F%98%E6%80%81%E5%BF%83%E7%90%86%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>心理学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>见或不见</title>
    <link href="/2022/10/09/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E8%A7%81%E6%88%96%E4%B8%8D%E8%A7%81/"/>
    <url>/2022/10/09/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E8%A7%81%E6%88%96%E4%B8%8D%E8%A7%81/</url>
    
    <content type="html"><![CDATA[<p><strong>你见，或者不见我。</strong></p><p><strong>我就在那里，不悲不喜。</strong></p><p><strong>你念，或者不念我。</strong></p><p><strong>情就在那里，不来不去。</strong></p><p><strong>你爱或者不爱我，爱就在那里，不增不减。</strong></p><p><strong>你跟，或者不跟我。</strong></p><p><strong>我的手就在你的手里，不舍不弃。</strong></p><p><strong>来我怀里，或者，让我住进你的心里。</strong></p><p><strong>默然相爱，寂静喜欢。</strong></p><p><strong>你见，或者不见我。</strong></p><p>我就在那里，不悲不喜。</p><p>你念，或者不念我。</p><p>情就在那里，不来不去。</p><p>你爱或者不爱我，爱就在那里，不增不减。</p><p>你跟，或者不跟我。</p><p>我的手就在你的手里，不舍不弃。</p><p>来我怀里，或者，让我住进你的心里。</p><p><strong>默然相爱，寂静喜欢。</strong></p>]]></content>
    
    
    <categories>
      
      <category>现代诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>现代诗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你见或不见</title>
    <link href="/2022/10/09/%E9%A9%AC%E5%85%8B%E6%80%9D/%E4%BD%A0%E8%A7%81%E6%88%96%E8%80%85%E4%B8%8D%E8%A7%81/"/>
    <url>/2022/10/09/%E9%A9%AC%E5%85%8B%E6%80%9D/%E4%BD%A0%E8%A7%81%E6%88%96%E8%80%85%E4%B8%8D%E8%A7%81/</url>
    
    <content type="html"><![CDATA[<ul><li>喜欢你与你无关</li><li>抽象到个人</li><li>深究原因：</li><li>资本主义，从宗教把人拉出家庭，社会关系到教会，有独立的个体思想</li><li>共产主义：加入到组织中</li></ul>]]></content>
    
    
    <categories>
      
      <category>马克思</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/09/README/"/>
    <url>/2022/10/09/README/</url>
    
    <content type="html"><![CDATA[<h1 id="WoniuDoctor"><a href="#WoniuDoctor" class="headerlink" title="WoniuDoctor"></a>WoniuDoctor</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>第三阶段开发项目,<strong>蜗牛医生</strong>，小组开发者必须遵守以下开发规范，在仓库创建自己的分支，每个人推送代码仅允许push到自己的分支，严禁push到master，代码日更，记得完成下列附属文件：</p><ul><li>Debug日志</li><li>Mysql日志</li><li>代码进度日志</li></ul><h2 id="版本管理规范"><a href="#版本管理规范" class="headerlink" title="版本管理规范"></a>版本管理规范</h2><p>依赖版本</p><h2 id="Git-Commit代码提交规范"><a href="#Git-Commit代码提交规范" class="headerlink" title="Git Commit代码提交规范"></a>Git Commit代码提交规范</h2><p>git commit -m “提交注释”</p><h3 id="格式说明"><a href="#格式说明" class="headerlink" title="格式说明"></a>格式说明</h3><h3 id="主要type"><a href="#主要type" class="headerlink" title="主要type"></a>主要type</h3><p>feat:     增加新功能<br>fix:      修复bug</p><h3 id="特殊type"><a href="#特殊type" class="headerlink" title="特殊type"></a>特殊type</h3><p>docs:     只改动了文档相关的内容<br>style:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号<br>build:    构造工具的或者外部依赖的改动，例如webpack，npm<br>refactor: 代码重构时使用,重构（即不是新增功能，也不是修改bug的代码变动）<br>revert:   执行git revert打印的message</p><h3 id="暂不使用type"><a href="#暂不使用type" class="headerlink" title="暂不使用type"></a>暂不使用type</h3><p>test:     添加测试或者修改现有测试<br>perf:     提高性能的改动<br>ci:       与CI（持续集成服务）有关的改动<br>chore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动</p><h2 id="分支管理规范"><a href="#分支管理规范" class="headerlink" title="分支管理规范"></a>分支管理规范</h2><p>远程仓库只允许出现五种类型的分支：</p><ul><li><strong>主分支</strong>：项目的主要分支也就是master分支。用于正式发布，该分支禁止任何人直接提交，提交合并请求由对应项目主管人员确认合并。</li><li><strong>开发分支</strong>：项目的开发迭代分支，用于开发发布，常规开发任务的代码直接提交至该分支或者由临时分支合并至该分支。</li><li><strong>测试分支</strong>：项目的测试迭代分支，用户测试发布，该分支禁止任何人直接提交，提交合并请求由对应项目主管人员确认合并。</li><li><strong>归档分支</strong>：项目的里程碑版本保留分支，由测试负责人、项目负责人、产品负责人直接定义版本，从测试分支归档出新分支。</li><li><strong>临时分支</strong>：由项目的开发人员建立的临时分支，禁止交叉提交，谁建立的分支便由谁负责管理，用于合并至开发分支，合并完成之后禁止新提交应当立刻删除。</li></ul><h4 id="主分支"><a href="#主分支" class="headerlink" title="主分支"></a>主分支</h4><p>主分支全局仓库唯一，分支名称固定为<strong>master</strong>，任何对主分支的直接提交定性为严重违规行为，需要尝试对主分支进行合并应当由对应仓库的开发负责人提交合并请求并由上级负责人通过合并实现对主分支的变更。</p><h4 id="开发分支"><a href="#开发分支" class="headerlink" title="开发分支"></a>开发分支</h4><p>开发分支全局仓库唯一，分支名称固定为<strong>devLoop</strong>，开发人员允许对该分支直接提交，任何向开发分支提交的代码在提交之前应当保证能够正常通过编译、部署并运行，无法部署的提交应当立刻修复并重新提交。开发分支部署的代码应当由开发人员完成所有的单元测试，全部通过之后再向测试分支提交。</p><h4 id="测试分支"><a href="#测试分支" class="headerlink" title="测试分支"></a>测试分支</h4><p>测试分支全局仓库唯一，分支名称固定为<strong>testLooop</strong>，禁止直接对该分支提交，测试分支应当由开发分支提交合并请求而来，由开发人员提交合并请求，由主要开发人员通过合并请求实现测试部署。小型项目、中间件研发可以酌情省略测试分支，由开发分支部署交于测试进行质量校验，大型项目或产品必须保证有测试分支。</p><h4 id="归档分支"><a href="#归档分支" class="headerlink" title="归档分支"></a>归档分支</h4><p>归档分支全局仓管可以具备多个，直接由测试分支或主分支派生，除特殊情况下禁止任何提交行为，归档分支名称格式为<strong>release-版本号</strong>（如：<code>release-1.2.0</code>），分支由对应项目的开发主要负责人再与测试负责人沟通之后创建，已经后续无论是BUG、还是功能性问题都不应当项归档分支提交。</p><h4 id="临时分支"><a href="#临时分支" class="headerlink" title="临时分支"></a>临时分支</h4><p>临时分支全局仓库可以具备多个，临时分支名称格式为<strong>tem-开发者-创建时间</strong>（如：<code>tem-tangyuecan-20200724</code>），由开发人员自行创建，临时分支的提交进制交叉提交，只允许分支创建者提交，临时分支只能合并到开发分支一旦完成合并之后应当立即删除，可以直接本地合并之后向开发分支提交或者提交合并请求由开发负责人进行合并，临时分支的生命周期原则上不超过三个工作日。临时分支主要用于无法在短时间之内完成的开发工作，或者整合至开发分支之后无法运行情况，这样考虑之下才有临时分支的概念。</p><h4 id="提交描述"><a href="#提交描述" class="headerlink" title="提交描述"></a>提交描述</h4><p>所以代码的提交、合并都应该通过文字目前描述出改此提交、合并的目的如下面几种：</p><ul><li><code>修复问题：#xxxx</code>（禅道BUG的ID或者ISSUE）</li><li><code>修复问题：xxxx</code>（BUG的名称）</li><li><code>完成功能：#xxxx</code>（禅道的任务ID）</li><li><code>完成功能：xxxxx</code>（功能的名称）</li></ul><p>任何无意义或者具体目的的提交禁止同步至远程仓库，包括远程临时分支（禁止commit）</p><h2 id="Java中的命名规范"><a href="#Java中的命名规范" class="headerlink" title="Java中的命名规范"></a>Java中的命名规范</h2><table><thead><tr><th align="left">类型</th><th align="left">约束</th><th align="center">例</th></tr></thead><tbody><tr><td align="left">项目名</td><td align="left">全部小写，多个单词用中划线分隔‘-’</td><td align="center">spring-cloud</td></tr><tr><td align="left">包名</td><td align="left">全部小写</td><td align="center">com.alibaba.fastjson</td></tr><tr><td align="left">类名</td><td align="left">单词首字母大写</td><td align="center">Feature, ParserConfig,DefaultFieldDeserializer</td></tr><tr><td align="left">变量名</td><td align="left">首字母小写，多个单词组成时，除首个单词，其他单词首字母都要大写</td><td align="center">password, userName</td></tr><tr><td align="left">常量名</td><td align="left">全部大写，多个单词，用’_’分隔</td><td align="center">CACHE_EXPIRED_TIME</td></tr><tr><td align="left">方法</td><td align="left">同变量</td><td align="center">read(), readObject(), getById()</td></tr></tbody></table><h3 id="包命名"><a href="#包命名" class="headerlink" title="包命名"></a>包命名</h3><table><thead><tr><th align="left">前缀名</th><th align="left">例</th><th align="center">含义</th></tr></thead><tbody><tr><td align="left">indi（或onem ）</td><td align="left">indi.发起者名.项目名.模块名.……</td><td align="center">个体项目，指个人发起，但非自己独自完成的项目，可公开或私有项目，copyright主要属于发起者。</td></tr><tr><td align="left">pers</td><td align="left">pers.个人名.项目名.模块名.……</td><td align="center">个人项目，指个人发起，独自完成，可分享的项目，copyright主要属于个人</td></tr><tr><td align="left">priv</td><td align="left">priv.个人名.项目名.模块名.……</td><td align="center">私有项目，指个人发起，独自完成，非公开的私人使用的项目，copyright属于个人。</td></tr><tr><td align="left">team</td><td align="left">team.团队名.项目名.模块名.……</td><td align="center">团队项目，指由团队发起，并由该团队开发的项目，copyright属于该团队所有</td></tr><tr><td align="left">顶级域名</td><td align="left">com.公司名.项目名.模块名.……</td><td align="center">公司项目，copyright由项目发起的公司所有</td></tr></tbody></table><h3 id="类命名"><a href="#类命名" class="headerlink" title="类命名"></a>类命名</h3><table><thead><tr><th align="left">属性</th><th align="left">约束</th><th align="center">例</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">Abstract 或者 Base 开头</td><td align="center">BaseUserService</td></tr><tr><td align="left">枚举类</td><td align="left">Enum 作为后缀</td><td align="center">GenderEnum</td></tr><tr><td align="left">工具类</td><td align="left">Utils作为后缀</td><td align="center">StringUtils</td></tr><tr><td align="left">异常类</td><td align="left">Exception结尾</td><td align="center">RuntimeException</td></tr><tr><td align="left">接口实现类</td><td align="left">接口名+ Impl</td><td align="center">UserServiceImpl</td></tr><tr><td align="left">领域模型相关</td><td align="left">&#x2F;DO&#x2F;DTO&#x2F;VO&#x2F;DAO</td><td align="center">正例：UserDAO 反例： UserDo， UserDao</td></tr><tr><td align="left">设计模式相关类</td><td align="left">Builder，Factory等</td><td align="center">当使用到设计模式时，需要使用对应的设计模式作为后缀，如ThreadFactory</td></tr><tr><td align="left">处理特定功能的</td><td align="left">Handler，Predicate, Validator</td><td align="center">表示处理器，校验器，断言，这些类工厂还有配套的方法名如handle，predicate，validate</td></tr><tr><td align="left">测试类</td><td align="left">Test结尾</td><td align="center">UserServiceTest， 表示用来测试UserService类的</td></tr><tr><td align="left">MVC分层</td><td align="left">Controller，Service，ServiceImpl，DAO后缀</td><td align="center">UserManageController，UserManageDAO</td></tr></tbody></table><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th align="left">位置</th><th align="left">单词</th><th align="left">意义</th><th align="center">例</th></tr></thead><tbody><tr><td align="left">Prefix</td><td align="left">is</td><td align="left">对象是否符合期待的状态</td><td align="center">isValid</td></tr><tr><td align="left">Prefix</td><td align="left">can</td><td align="left">对象能否执行所期待的动作</td><td align="center">canRemove</td></tr><tr><td align="left">Prefix</td><td align="left">should</td><td align="left">调用方执行某个命令或方法是好还是不好,应不应该，或者说推荐还是不推荐</td><td align="center">shouldMigrate</td></tr><tr><td align="left">Prefix</td><td align="left">has</td><td align="left">对象是否持有所期待的数据和属性</td><td align="center">hasObservers</td></tr><tr><td align="left">Prefix</td><td align="left">needs</td><td align="left">调用方是否需要执行某个命令或方法</td><td align="center">needsMigrate</td></tr></tbody></table><h3 id="变量-amp-常量命名"><a href="#变量-amp-常量命名" class="headerlink" title="变量&amp;常量命名"></a>变量&amp;常量命名</h3><p>变量使用驼峰命名法</p><p>常量名必须大写</p><h3 id="通用命名规则"><a href="#通用命名规则" class="headerlink" title="通用命名规则"></a>通用命名规则</h3><ol><li>尽量不要使用拼音；杜绝拼音和英文混用。对于一些通用的表示或者难以用英文描述的可以采用拼音，一旦采用拼音就坚决不能和英文混用。 正例： BeiJing， HangZhou 反例： validateCanShu</li><li>命名过程中尽量不要出现特殊的字符，常量除外。</li><li>尽量不要和jdk或者框架中已存在的类重名，也不能使用java中的关键字命名。</li><li>妙用介词，如for(可以用同音的4代替), to(可用同音的2代替), from, with，of等。 如类名采用User4RedisDO，方法名getUserInfoFromRedis，convertJson2Map等。</li></ol><h2 id="继承结构及工程规范"><a href="#继承结构及工程规范" class="headerlink" title="继承结构及工程规范"></a>继承结构及工程规范</h2><table><thead><tr><th></th><th></th><th></th><th align="center"></th></tr></thead><tbody><tr><td>模块名称</td><td>模块说明xxxx<br/><br/>xxxx<br/><br/>xxxx<br/><br/>使用说明<br/>xxxx<br/><br/>xxxx<br/><br/>xxxx</td><td>示例</td><td align="center">备注</td></tr><tr><td>entity层</td><td>实体类命名与表名相同，首字母大写，如果表名存在_那么将_这去掉后首字母大写。</td><td>表名:like_log 实体名 LikeLog</td><td align="center"><strong>实体类属性必须与数据库字段名保持一致。</strong></td></tr><tr><td>mapper层</td><td>继承com.baomidou.mybatisplus.core.mapper.BaseMapper 要求实体泛型dao层下接口命名：实体名+Mapper 。</td><td>LikeLogMapper</td><td align="center"></td></tr><tr><td>service层</td><td>要求：接口继承com.baomidou.mybatisplus.extension.service.IService要求实体泛型</td><td></td><td align="center"></td></tr><tr><td>service.impl层类</td><td>继承com.baomidou.mybatisplus.extension.service.impl.ServiceImpl，service层下接口命名：业务名称+Service 。service.impl层命名：　业务名称+ServiceImpl 。xxxx<br/><br/>xxxx<br/><br/>xxxx<br/><br/>使用说明<br/>xxxx<br/><br/>xxxx<br/><br/>xxxx</td><td>LikeLogService；LikeLogServiceImpl</td><td align="center">service层可以调用service层和dao层和其他项目。 service层下可再包一层bean层，用以存放数据结构的类，必须以Bean结尾。 平台service层内部调用的方法可以返回entity，但是被manage层调用的service方法只能返回dto或基本数据类型，不能返回entity到manage。</td></tr><tr><td>manage层</td><td>调用其他服务的接口，通常使用Feign来实现</td><td>ILikeLogMange</td><td align="center">manage层下接口命名：I+业务名称+Manage。</td></tr><tr><td>controller层</td><td>继承: org.jeecg.common.system.base.controller.JeecgController&lt;T, S extends IService&gt;controller层命名：以Controller结尾。</td><td>LikeLogController</td><td align="center">web&#x2F;proxy&#x2F;internal可用；<strong>controller层不能出现dto</strong></td></tr><tr><td>form层</td><td>web&#x2F;proxy&#x2F;internal可用；form下类命名：以Form结尾。</td><td>LikeBaseInfoForm</td><td align="center">form可以引用其他form form中不可以包含dto</td></tr><tr><td>vo层</td><td>internal&#x2F;platform 可用；vo层命名：以vo结尾，前缀不一定是entity。</td><td>LikeLogDto</td><td align="center">dto不能引用别人的dto</td></tr><tr><td>schedule类</td><td>schedule层命名: 以业务名称开头，以Schedule结尾，前缀不一定是entity。</td><td>SendEmailSchedule</td><td align="center"></td></tr><tr><td>Idp类</td><td>idp层命名：以IdpHandler结尾。</td><td>ResumeIdpHandler</td><td align="center"></td></tr><tr><td>util层</td><td>util层命名：以Util或Utils结尾。</td><td>MoneyUtil</td><td align="center"></td></tr><tr><td>consts层</td><td>静态变量类consts层命名：以Const结尾。</td><td>LikeLogConst</td><td align="center"></td></tr><tr><td>helper层</td><td>helper层命名：client名+Helper结尾。</td><td>UserPlatformClientHelper</td><td align="center">Helper层主要放置调用其它端client的工具类； Helper只可以出现调平台的代码和处理平台返回错误的代码； Helper不允许调其他helper；</td></tr><tr><td>filter</td><td>filter命名：以Filter结尾。</td><td>AuthFilter</td><td align="center">只能出现在common包下面的filter包中</td></tr><tr><td>resolver</td><td>包名只能叫resolver且同一工程下只能有一个resolve包，只能出现在common包下的resolver包中，此包下只能有一个类文件且名称为：MvcExceptionResolver。</td><td></td><td align="center"></td></tr></tbody></table><h2 id="Web-URL标准"><a href="#Web-URL标准" class="headerlink" title="Web URL标准"></a>Web URL标准</h2><h2 id="Ajax返回数据规范"><a href="#Ajax返回数据规范" class="headerlink" title="Ajax返回数据规范"></a>Ajax返回数据规范</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正常返回</span><br>&#123;<br>  <span class="hljs-string">&quot;flag&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-comment">// 数据状态标识</span><br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;     <span class="hljs-comment">// 正常返回的相关数据，可以是 Object / Array</span><br>    ...<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 异常返回</span><br>&#123;<br>  <span class="hljs-string">&quot;flag&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-comment">// 数据状态标识</span><br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;***&quot;</span>,    <span class="hljs-comment">// 异常标识code</span><br>  <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;some error message.&quot;</span>    <span class="hljs-comment">// 异常提示信息</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h2><h2 id="数据库命令规范"><a href="#数据库命令规范" class="headerlink" title="数据库命令规范"></a>数据库命令规范</h2><p>1、所有数据库对象名称必须使用小写字母并用下划线分割</p><p>2、所有数据库对象名称禁止使用mysql保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）</p><p>3、数据库对象的命名要能做到见名识意，并且最后不要超过32个字符</p><p>4、临时库表必须以tmp_为前缀并以日期为后缀，备份表必须以bak_为前缀并以日期(时间戳)为后缀</p><p>5、所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）</p><h3 id="数据库命名规范"><a href="#数据库命名规范" class="headerlink" title="数据库命名规范"></a>数据库命名规范</h3><p>采用小写字母、数字（通常不需要）和下划线组成。禁止使用’-’，命名简洁、含义明确。</p><h3 id="表命名"><a href="#表命名" class="headerlink" title="表命名"></a>表命名</h3><ul><li><p>根据业务类型不同，采用不同的前缀，小写字母、下划线组成</p></li><li><p>长度控制在30个字符以内</p><p>推荐的命名规则</p><table><thead><tr><th>类型</th><th>前缀</th><th>说明</th></tr></thead><tbody><tr><td>业务表</td><td>tb_</td><td></td></tr><tr><td>关系表</td><td>tr_</td><td></td></tr><tr><td>历史表</td><td>th_</td><td></td></tr><tr><td>统计表</td><td>ts_</td><td></td></tr><tr><td>日志表</td><td>tl_xx_log</td><td></td></tr><tr><td>系统表、字典表、码表</td><td>sys_</td><td></td></tr><tr><td>临时表</td><td>tmp_</td><td>禁止使用</td></tr><tr><td>备份表</td><td>bak_xx_ymd</td><td></td></tr><tr><td>视图</td><td>view_</td><td>避免使用</td></tr></tbody></table></li></ul><h2 id="数据库基本设计规范"><a href="#数据库基本设计规范" class="headerlink" title="数据库基本设计规范"></a>数据库基本设计规范</h2><h3 id="所有表必须使用Innodb存储引擎"><a href="#所有表必须使用Innodb存储引擎" class="headerlink" title="所有表必须使用Innodb存储引擎"></a>所有表必须使用Innodb存储引擎</h3><p>没有特殊要求（即Innodb无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用Innodb存储引擎（mysql5.5之前默认使用Myisam，5.6以后默认的为Innodb）Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。</p><h3 id="数据库和表的字符集统一使用utf8mb4"><a href="#数据库和表的字符集统一使用utf8mb4" class="headerlink" title="数据库和表的字符集统一使用utf8mb4"></a>数据库和表的字符集统一使用utf8mb4</h3><p>兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效。</p><ul><li>解读：在Mysql中的UTF-8并非“真正的UTF-8”，而utf8mb4”才是真正的“UTF-8”。</li></ul><h3 id="所有表和字段都需要添加注释"><a href="#所有表和字段都需要添加注释" class="headerlink" title="所有表和字段都需要添加注释"></a>所有表和字段都需要添加注释</h3><p>使用comment从句添加表和列的备注 从一开始就进行数据字典的维护</p><h3 id="尽量控制单表数据量的大小，建议控制在500万以内"><a href="#尽量控制单表数据量的大小，建议控制在500万以内" class="headerlink" title="尽量控制单表数据量的大小，建议控制在500万以内"></a>尽量控制单表数据量的大小，建议控制在500万以内</h3><p>500万并不是MySQL数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题</p><p>可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小。</p><h3 id="谨慎使用MySQL分区表"><a href="#谨慎使用MySQL分区表" class="headerlink" title="谨慎使用MySQL分区表"></a>谨慎使用MySQL分区表</h3><p>分区表在物理上表现为多个文件，在逻辑上表现为一个表 谨慎选择分区键，跨分区查询效率可能更低 建议采用物理分表的方式管理大数据</p><h3 id="尽量做到冷热数据分离，减小表的宽度"><a href="#尽量做到冷热数据分离，减小表的宽度" class="headerlink" title="尽量做到冷热数据分离，减小表的宽度"></a>尽量做到冷热数据分离，减小表的宽度</h3><p>MySQL限制每个表最多存储4096列，并且每一行数据的大小不能超过65535字节 减少磁盘IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的IO） 更有效的利用缓存，避免读入无用的冷数据 经常一起使用的列放到一个表中（避免更多的关联操作）</p><h3 id="禁止在表中建立预留字段"><a href="#禁止在表中建立预留字段" class="headerlink" title="禁止在表中建立预留字段"></a>禁止在表中建立预留字段</h3><p>预留字段的命名很难做到见名识义 预留字段无法确认存储的数据类型，所以无法选择合适的类型 对预留字段类型的修改，会对表进行锁定</p><h3 id="禁止在数据库中存储图片，文件等大的二进制数据"><a href="#禁止在数据库中存储图片，文件等大的二进制数据" class="headerlink" title="禁止在数据库中存储图片，文件等大的二进制数据"></a>禁止在数据库中存储图片，文件等大的二进制数据</h3><p>通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机IO操作，文件很大时，IO操作很耗时 通常存储于文件服务器，数据库只存储文件地址信息</p><h3 id="每张表必须设置一个主键ID，且这个主键ID使用自增主键（在满足需要的情况下尽量短），除非在分库分表环境下"><a href="#每张表必须设置一个主键ID，且这个主键ID使用自增主键（在满足需要的情况下尽量短），除非在分库分表环境下" class="headerlink" title="每张表必须设置一个主键ID，且这个主键ID使用自增主键（在满足需要的情况下尽量短），除非在分库分表环境下"></a>每张表必须设置一个主键ID，且这个主键ID使用自增主键（在满足需要的情况下尽量短），除非在分库分表环境下</h3><ul><li>解读：由于InnoDB组织数据的方式决定了需要有一个主键，而且若是这个主键ID是单调递增的可以有效提高插入的性能，避免过多的页分裂、减少表碎片提高空间的使用率。 而在分库分表环境下，则需要统一来分配各个表中的主键值，从而避免整个逻辑表中主键重复。</li></ul><h3 id="禁止使用外键，如果有外键完整性约束，需要应用程序控制"><a href="#禁止使用外键，如果有外键完整性约束，需要应用程序控制" class="headerlink" title="禁止使用外键，如果有外键完整性约束，需要应用程序控制"></a>禁止使用外键，如果有外键完整性约束，需要应用程序控制</h3><ul><li>解读：外键会导致表与表之间耦合，UPDATE与DELETE操作都会涉及相关联的表，十分影响SQL的性能，甚至会造成死锁。</li></ul><h3 id="单表列数目必须小于30，若超过则应该考虑将表拆分"><a href="#单表列数目必须小于30，若超过则应该考虑将表拆分" class="headerlink" title="单表列数目必须小于30，若超过则应该考虑将表拆分"></a>单表列数目必须小于30，若超过则应该考虑将表拆分</h3><ul><li>解读：单表列数太多使得Mysql服务器处理InnoDB返回数据之间的映射成本太高。</li></ul><h3 id="禁止在线上做数据库压力测试"><a href="#禁止在线上做数据库压力测试" class="headerlink" title="禁止在线上做数据库压力测试"></a>禁止在线上做数据库压力测试</h3><h3 id="禁止从开发环境，测试环境直接连接生成环境数据库"><a href="#禁止从开发环境，测试环境直接连接生成环境数据库" class="headerlink" title="禁止从开发环境，测试环境直接连接生成环境数据库"></a>禁止从开发环境，测试环境直接连接生成环境数据库</h3><h2 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h2><h3 id="优先选择符合存储需要的最小的数据类型"><a href="#优先选择符合存储需要的最小的数据类型" class="headerlink" title="优先选择符合存储需要的最小的数据类型"></a>优先选择符合存储需要的最小的数据类型</h3><p>原因</p><p>列的字段越大，建立索引时所需要的空间也就越大，这样一页中所能存储的索引节点的数量也就越少也越少，在遍历时所需要的IO次数也就越多， 索引的性能也就越差</p><p>方法</p><p>1）将字符串转换成数字类型存储，如：将IP地址转换成整形数据。</p><p>mysql提供了两个方法来处理ip地址：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">inet_aton 把ip转为无符号整型(<span class="hljs-number">4</span><span class="hljs-number">-8</span>位)<br>inet_ntoa 把整型的ip转为地址<br></code></pre></td></tr></table></figure><p>插入数据前，先用inet_aton把ip地址转为整型，可以节省空间。显示数据时，使用inet_ntoa把整型的ip地址转为地址显示即可。</p><p>2）对于非负型的数据（如自增ID、整型IP）来说，要优先使用无符号整型来存储</p><p>因为：无符号相对于有符号可以多出一倍的存储空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">SIGNED <span class="hljs-type">INT</span> <span class="hljs-number">-2147483648</span><span class="hljs-operator">~</span><span class="hljs-number">2147483647</span><br><br>UNSIGNED <span class="hljs-type">INT</span> <span class="hljs-number">0</span><span class="hljs-operator">~</span><span class="hljs-number">4294967295</span><br></code></pre></td></tr></table></figure><p>VARCHAR(N)中的N代表的是字符数，而不是字节数</p><p>使用UTF8存储255个汉字 Varchar(255)&#x3D;765个字节。过大的长度会消耗更多的内存</p><h3 id="避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据"><a href="#避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据" class="headerlink" title="避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据"></a>避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据</h3><p>建议把BLOB或是TEXT列分离到单独的扩展表中</p><p>Mysql内存临时表不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。</p><p>而且对于这种数据，Mysql还是要进行二次查询，会使sql性能变得很差，但是不是说一定不能使用这样的数据类型。</p><p>如果一定要使用，建议把BLOB或是TEXT列分离到单独的扩展表中，查询时一定不要使用select * 而只需要取出必要的列，不需要TEXT列的数据时不要对该列进行查询。</p><p>TEXT或BLOB类型只能使用前缀索引</p><p>因为MySQL对索引字段长度是有限制的，所以TEXT类型只能使用前缀索引，并且TEXT列上是不能有默认值的。</p><h3 id="避免使用ENUM类型"><a href="#避免使用ENUM类型" class="headerlink" title="避免使用ENUM类型"></a>避免使用ENUM类型</h3><p>1、修改ENUM值需要使用ALTER语句</p><p>2、ENUM类型的ORDER BY操作效率低，需要额外操作</p><p>3、禁止使用数值作为ENUM的枚举值</p><h3 id="必须把字段定义为NOT-NULL并且提供默认值"><a href="#必须把字段定义为NOT-NULL并且提供默认值" class="headerlink" title="必须把字段定义为NOT NULL并且提供默认值"></a>必须把字段定义为NOT NULL并且提供默认值</h3><p>原因：</p><p>1、索引NULL列需要额外的空间来保存，所以要占用更多的空间；</p><p>2、进行比较和计算时要对NULL值做特别的处理</p><ul><li>解读：</li><li>NULL的列使索引&#x2F;索引统计&#x2F;值比较都更加复杂，对MySQL来说更难优化；</li><li>NULL这种类型Msql内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多；</li><li>NULL值需要更多的存储空，无论是表还是索引中每行中的NULL的列都需要额外的空间来标识。</li></ul><h3 id="使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间"><a href="#使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间" class="headerlink" title="使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间"></a>使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间</h3><p>TIMESTAMP 存储的时间范围 1970-01-01 00:00:01 ~ 2038-01-19-03:14:07。</p><p>TIMESTAMP 占用4字节和INT相同，但比INT可读性高</p><p>超出TIMESTAMP取值范围的使用DATETIME类型存储。</p><p>经常会有人用字符串存储日期型的数据（不正确的做法）：</p><p>缺点1：无法用日期函数进行计算和比较</p><p>缺点2：用字符串存储日期要占用更多的空间</p><h3 id="同财务相关的金额类数据必须使用decimal类型"><a href="#同财务相关的金额类数据必须使用decimal类型" class="headerlink" title="同财务相关的金额类数据必须使用decimal类型"></a>同财务相关的金额类数据必须使用decimal类型</h3><p>1、非精准浮点：float,double</p><p>2、精准浮点：decimal</p><p>Decimal类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每4个字节可以存储9位数字，并且小数点要占用一个字节。可用于存储比bigint更大的整型数据。</p><h3 id="如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。"><a href="#如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。" class="headerlink" title="如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。"></a>如果存储的字符串长度几乎相等，使用CHAR定长字符串类型。</h3><ul><li>解读：能够减少空间碎片，节省存储空间。</li></ul><h3 id="禁用保留字，如DESC、RANGE、MARCH等，请参考Mysql官方保留字"><a href="#禁用保留字，如DESC、RANGE、MARCH等，请参考Mysql官方保留字" class="headerlink" title="禁用保留字，如DESC、RANGE、MARCH等，请参考Mysql官方保留字"></a>禁用保留字，如DESC、RANGE、MARCH等，请参考Mysql官方保留字</h3><h2 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h2><h3 id="4-4-1-限制每张表上的索引数量，建议单张表索引不超过5个"><a href="#4-4-1-限制每张表上的索引数量，建议单张表索引不超过5个" class="headerlink" title="4.4.1 限制每张表上的索引数量，建议单张表索引不超过5个"></a>4.4.1 限制每张表上的索引数量，建议单张表索引不超过5个</h3><p>索引并不是越多越好！索引可以提高效率同样可以降低效率。</p><p>索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。</p><p>因为mysql优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加mysql优化器生成执行计划的时间，同样会降低查询性能。</p><h3 id="4-4-2-禁止给表中的每一列都建立单独的索引"><a href="#4-4-2-禁止给表中的每一列都建立单独的索引" class="headerlink" title="4.4.2 禁止给表中的每一列都建立单独的索引"></a>4.4.2 禁止给表中的每一列都建立单独的索引</h3><p>5.6版本之前，一个sql只能使用到一个表中的一个索引，5.6以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好</p><h3 id="4-4-3-每个Innodb表必须有个主键"><a href="#4-4-3-每个Innodb表必须有个主键" class="headerlink" title="4.4.3 每个Innodb表必须有个主键"></a>4.4.3 每个Innodb表必须有个主键</h3><p>Innodb是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。</p><p>每个表都可以有多个索引，但是表的存储顺序只能有一种 Innodb是按照主键索引的顺序来组织表的。</p><p>不要使用更新频繁的列作为主键，不适用多列主键（相当于联合索引） 不要使用UUID、MD5、HASH、字符串列作为主键（无法保证数据的顺序增长）。</p><p>主键建议使用自增ID值。</p><h3 id="4-4-4-索引规约"><a href="#4-4-4-索引规约" class="headerlink" title="4.4.4 索引规约"></a>4.4.4 索引规约</h3><p>【建议】（1）避免在更新比较频繁、区分度不高的列上单独建立索引</p><ul><li>解读：区分度不高的列单独创建索引的优化效果很小，但是较为频繁的更新则会让索引的维护成本更高。</li></ul><p>【强制】（2） JOIN的表不允许超过五个。需要JOIN的字段，数据类型必须绝对一致; 多表关联查询时，保证被关联的字段需要有索引</p><ul><li><p>解读：太多表的JOIN会让Mysql的优化器更难权衡出一个“最佳”的执行计划（可能性为表数量的阶乘），同时要注意关联字段的类型、长度、字符编码等等是否一致。</p><p>【强制】（3）在一个联合索引中，若第一列索引区分度等于1，那么则不需要建立联合索引</p></li><li><p>解读：索引通过第一列就能够完全定位的数据，所以联合索引的后边部分是不需要的。</p></li></ul><p>【强制】（4）建立联合索引时，必须将区分度更高的字段放在左</p><ul><li>解读：区分度更高的列放在左边，能够在一开始就有效的过滤掉无用数据。提高索引的效率，相应我们在Mapper中编写SQL的WHERE条件中有多个条件时，需要先看看当前表是否有现成的联合索引直接使用，注意各个条件的顺序尽量和索引的顺序一致。</li></ul><p>【建议】（5）利用覆盖索引来进行查询操作，避免回表</p><ul><li>解读：覆盖查询即是查询只需要通过索引即可拿到所需DATA，而不再需要再次回表查询，所以效率相对很高。我们在使用EXPLAIN的结果，extra列会出现：”using index”。这里也要强调一下不要使用“SELECT * ”，否则几乎不可能使用到覆盖索引。</li></ul><p>【建议】（6）在较长VARCHAR字段,例如VARCHAR(100)上建立索引时，应指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可</p><ul><li>解读：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，若长度为20的索引，区分度会高达90%以上，则可以考虑创建长度例为20的索引，而非全字段索引。例如可以使用SELECT COUNT(DISTINCT LEFT(lesson_code, 20)) &#x2F; COUNT(*) FROM lesson;来确定lesson_code字段字符长度为20时文本区分度。</li></ul><p>【建议】（7）如果有ORDER BY的场景，请注意利用索引的有序性。ORDER BY最后的字段是联合索引的一部分，并且放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能。</p><ul><li>解读：</li><li>假设有查询条件为WHERE a&#x3D;? and b&#x3D;? ORDER BY c；存在索引：a_b_c，则此时可以利用索引排序；</li><li>反例：在查询条件中包含了范围查询，那么索引有序性无法利用，如:WHERE a&gt;10 ORDER BY b; 索引a_b无法排序。</li></ul><p>【建议】（8）在where中索引的列不能某个表达式的一部分，也不能是函数的参数</p><ul><li>解读：即是某列上已经添加了索引，但是若此列成为表达式的一部分、或者是函数的参数，Mysql无法将此列单独解析出来，索引也不会生效。</li></ul><p>【建议】 （9）我们在where条件中使用范围查询时，索引最多用于一个范围条件，超过一个则后边的不走索引</p><ul><li>解读：Mysql能够使用多个范围条件里边的最左边的第一个范围查询，但是后边的范围查询则无法使用。</li></ul><p>【建议】 （10）在多个表进行外连接时，表之间的关联字段类型必须完全一致</p><ul><li>解读：当两个表进行Join时，字段类型若没有完全一致，则加索引也不会生效，这里的完全一致包括但不限于字段类型、字段长度、字符集、collection等等。</li></ul><h2 id="常见索引列建议"><a href="#常见索引列建议" class="headerlink" title="常见索引列建议"></a>常见索引列建议</h2><p>1、出现在SELECT、UPDATE、DELETE语句的WHERE从句中的列</p><p>2、包含在ORDER BY、GROUP BY、DISTINCT中的字段</p><p>并不要将符合1和2中的字段的列都建立一个索引，通常将1、2中的字段建立联合索引效果更好</p><p>3、多表join的关联列</p><h2 id="如何选择索引列的顺序"><a href="#如何选择索引列的顺序" class="headerlink" title="如何选择索引列的顺序"></a>如何选择索引列的顺序</h2><p>建立索引的目的是：希望通过索引进行数据查找，减少随机IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。</p><p>1、区分度最高的放在联合索引的最左侧（区分度&#x3D;列中不同值的数量&#x2F;列的总行数）；</p><p>2、尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO性能也就越好）；</p><p>3、使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）。</p><h2 id="避免建立冗余索引和重复索引"><a href="#避免建立冗余索引和重复索引" class="headerlink" title="避免建立冗余索引和重复索引"></a>避免建立冗余索引和重复索引</h2><p>因为这样会增加查询优化器生成执行计划的时间。</p><p><strong>重复索引示例：</strong>primary key(id)、index(id)、unique index(id)</p><p><strong>冗余索引示例：</strong>index(a,b,c)、index(a,b)、index(a)</p><h2 id="优先考虑覆盖索引"><a href="#优先考虑覆盖索引" class="headerlink" title="优先考虑覆盖索引"></a>优先考虑覆盖索引</h2><p>对于频繁的查询优先考虑使用覆盖索引。</p><p>覆盖索引：就是包含了所有查询字段(where,select,ordery by,group by包含的字段)的索引</p><p>覆盖索引的好处：</p><ul><li>避免Innodb表进行索引的二次查询</li><li>Innodb是以聚集索引的顺序来存储的，对于Innodb来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了IO操作，提升了查询效率。</li><li>可以把随机IO变成顺序IO加快查询效率</li></ul><p>由于覆盖索引是按键值的顺序存储的，对于IO密集型的范围查找来说，对比随机从磁盘读取每一行的数据IO要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的IO转变成索引查找的顺序IO。</p><h2 id="索引SET规范"><a href="#索引SET规范" class="headerlink" title="索引SET规范"></a>索引SET规范</h2><p><strong>尽量避免使用外键约束</strong></p><p>1、不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引；</p><p>2、外键可用于保证数据的参照完整性，但建议在业务端实现；</p><p>3、外键会影响父表和子表的写操作从而降低性能。</p><h2 id="数据库SQL开发规范"><a href="#数据库SQL开发规范" class="headerlink" title="数据库SQL开发规范"></a>数据库SQL开发规范</h2><h3 id="建议使用预编译语句进行数据库操作"><a href="#建议使用预编译语句进行数据库操作" class="headerlink" title="建议使用预编译语句进行数据库操作"></a>建议使用预编译语句进行数据库操作</h3><p>预编译语句可以重复使用这些计划，减少SQL编译所需要的时间，还可以解决动态SQL所带来的SQL注入的问题 只传参数，比传递SQL语句更高效 相同语句可以一次解析，多次使用，提高处理效率。</p><h3 id="不允许使用属性隐式转换"><a href="#不允许使用属性隐式转换" class="headerlink" title="不允许使用属性隐式转换"></a>不允许使用属性隐式转换</h3><p>隐式转换会导致索引失效。如：select name,phone from customer where id &#x3D; ‘111’;</p><p>解读：假设我们在手机号列上添加了索引，然后执行下面的SQL会发生什么？explain SELECT user_name FROM parent WHERE phone&#x3D;13812345678; 很明显就是索引不生效，会全表扫描。</p><h3 id="充分利用表上已经存在的索引"><a href="#充分利用表上已经存在的索引" class="headerlink" title="充分利用表上已经存在的索引"></a>充分利用表上已经存在的索引</h3><p>避免使用双%号的查询条件。</p><p>如a like ‘%123%’，（如果无前置%,只有后置%，是可以用到列上的索引的）</p><p>解读：根据索引的最左前缀原理，%开头的模糊查询无法使用索引，可以使用ES来做检索。</p><p>一个SQL只能利用到复合索引中的一列进行范围查询</p><p>如：有 a,b,c列的联合索引，在查询条件中有a列的范围查询，则在b,c列上的索引将不会被用到，在定义联合索引时，如果a列要用到范围查找的话，就要把a列放到联合索引的右侧。</p><p>使用left join或 not exists来优化not in操作</p><p>因为not in 也通常会使用索引失效。</p><h3 id="数据库设计时，应该要对以后扩展进行考虑"><a href="#数据库设计时，应该要对以后扩展进行考虑" class="headerlink" title="数据库设计时，应该要对以后扩展进行考虑"></a>数据库设计时，应该要对以后扩展进行考虑</h3><h3 id="程序连接不同的数据库使用不同的账号，禁止跨库查询"><a href="#程序连接不同的数据库使用不同的账号，禁止跨库查询" class="headerlink" title="程序连接不同的数据库使用不同的账号，禁止跨库查询"></a>程序连接不同的数据库使用不同的账号，禁止跨库查询</h3><p>1、为数据库迁移和分库分表留出余地</p><p>2、降低业务耦合度</p><p>3、避免权限过大而产生的安全风险</p><h3 id="禁止使用SELECT-必须使用SELECT-lt-字段列表-gt-查询"><a href="#禁止使用SELECT-必须使用SELECT-lt-字段列表-gt-查询" class="headerlink" title="禁止使用SELECT * 必须使用SELECT &lt;字段列表&gt; 查询"></a>禁止使用SELECT * 必须使用SELECT &lt;字段列表&gt; 查询</h3><p>原因：</p><ol><li>消耗更多的CPU和IO以网络带宽资源</li><li>无法使用覆盖索引</li><li>可减少表结构变更带来的影响</li><li>读取不需要的列会增加CPU、IO、NET消耗；</li></ol><h3 id="禁止使用不含字段列表的INSERT语句"><a href="#禁止使用不含字段列表的INSERT语句" class="headerlink" title="禁止使用不含字段列表的INSERT语句"></a>禁止使用不含字段列表的INSERT语句</h3><p>如：insert into values (‘a’,’b’,’c’);</p><p>应使用insert into t(c1,c2,c3) values (‘a’,’b’,’c’);</p><h3 id="避免使用子查询，可以把子查询优化为join操作"><a href="#避免使用子查询，可以把子查询优化为join操作" class="headerlink" title="避免使用子查询，可以把子查询优化为join操作"></a>避免使用子查询，可以把子查询优化为join操作</h3><p>通常子查询在in子句中，且子查询中为简单SQL(不包含union、group by、order by、limit从句)时，才可以把子查询转化为关联查询进行优化。</p><p>子查询性能差的原因：</p><p>1、子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响；</p><p>3、特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大；</p><p>3、由于子查询会产生大量的临时表也没有索引，所以会消耗过多的CPU和IO资源，产生大量的慢查询。</p><h3 id="避免使用JOIN关联太多的表"><a href="#避免使用JOIN关联太多的表" class="headerlink" title="避免使用JOIN关联太多的表"></a>避免使用JOIN关联太多的表</h3><p>对于Mysql来说，是存在关联缓存的，缓存的大小可以由join_buffer_size参数进行设置。</p><p>在Mysql中，对于同一个SQL多关联（join）一个表，就会多分配一个关联缓存，如果在一个SQL中关联的表越多，所占用的内存也就越大。</p><p>如果程序中大量的使用了多表关联的操作，同时join_buffer_size设置的也不合理的情况下，就容易造成服务器内存溢出的情况，就会影响到服务器数据库性能的稳定性。</p><p>同时对于关联操作来说，会产生临时表操作，影响查询效率Mysql最多允许关联61个表，建议不超过5个。</p><h3 id="减少同数据库的交互次数"><a href="#减少同数据库的交互次数" class="headerlink" title="减少同数据库的交互次数"></a>减少同数据库的交互次数</h3><p>数据库更适合处理批量操作 合并多个相同的操作到一起，可以提高处理效率</p><h3 id="对应同一列进行or判断时，使用in代替or"><a href="#对应同一列进行or判断时，使用in代替or" class="headerlink" title="对应同一列进行or判断时，使用in代替or"></a>对应同一列进行or判断时，使用in代替or</h3><p>应尽量避免在WHERE子句中使用or作为连接条件</p><p>in的值不要超过500个in操作可以更有效的利用索引，or大多数情况下很少能利用到索引。</p><p>解读：根据情况可以选择使用UNION ALL来代替OR。</p><h3 id="禁止使用order-by-rand-进行随机排序"><a href="#禁止使用order-by-rand-进行随机排序" class="headerlink" title="禁止使用order by rand() 进行随机排序"></a>禁止使用order by rand() 进行随机排序</h3><p>会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的CPU和IO及内存资源。</p><p>推荐在程序中获取一个随机值，然后从数据库中获取数据的方式</p><h3 id="WHERE从句中禁止对列进行函数转换和计算"><a href="#WHERE从句中禁止对列进行函数转换和计算" class="headerlink" title="WHERE从句中禁止对列进行函数转换和计算"></a>WHERE从句中禁止对列进行函数转换和计算</h3><p>对列进行函数转换或计算时会导致无法使用索引。</p><p>不推荐：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span> <span class="hljs-type">date</span>(create_time)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;20190101&#x27;</span><br></code></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span> create_time <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;20190101&#x27;</span> <span class="hljs-keyword">and</span> create_time <span class="hljs-operator">&lt;</span> <span class="hljs-string">&#x27;20190102&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="在明显不会有重复值时使用UNION-ALL而不是UNION"><a href="#在明显不会有重复值时使用UNION-ALL而不是UNION" class="headerlink" title="在明显不会有重复值时使用UNION ALL而不是UNION"></a>在明显不会有重复值时使用UNION ALL而不是UNION</h3><p>1、UNION会把两个结果集的所有数据放到临时表中后再进行去重操作</p><p>2、UNION ALL不会再对结果集进行去重操作</p><h3 id="拆分复杂的大SQL为多个4-11-1小SQL"><a href="#拆分复杂的大SQL为多个4-11-1小SQL" class="headerlink" title="拆分复杂的大SQL为多个4.11.1小SQL"></a>拆分复杂的大SQL为多个4.11.1小SQL</h3><p>1、大SQL：逻辑上比较复杂，需要占用大量CPU进行计算的SQL</p><p>2、MySQL：一个SQL只能使用一个CPU进行计算</p><p>3、SQL拆分后可以通过并行执行来提高处理效率</p><h3 id="禁止使用外键与级联，一切外键概念必须在应用层解决"><a href="#禁止使用外键与级联，一切外键概念必须在应用层解决" class="headerlink" title="禁止使用外键与级联，一切外键概念必须在应用层解决"></a>禁止使用外键与级联，一切外键概念必须在应用层解决</h3><ul><li>解读：外键与级联更新适用于单机低并发，不适合分布式、高并发集群;级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</li></ul><h2 id="数据库操作行为规范"><a href="#数据库操作行为规范" class="headerlink" title="数据库操作行为规范"></a>数据库操作行为规范</h2><h3 id="超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作"><a href="#超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作" class="headerlink" title="超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作"></a>超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作</h3><p>大批量操作可能会造成严重的主从延迟</p><p>主从环境中，大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间，而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况</p><p>binlog日志为row格式时会产生大量的日志</p><p>大批量写操作会产生大量日志，特别是对于row格式二进制数据而言，由于在row格式中会记录每一行数据的修改，我们一次修改的数据越多，产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因。</p><p>避免产生大事务操作</p><p>大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对MySQL的性能产生非常大的影响。</p><p>特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批。</p><h3 id="4-11-2-对于大表使用pt-online-schema-change修改表结构"><a href="#4-11-2-对于大表使用pt-online-schema-change修改表结构" class="headerlink" title="4.11.2 对于大表使用pt-online-schema-change修改表结构"></a>4.11.2 对于大表使用pt-online-schema-change修改表结构</h3><p>1、避免大表修改产生的主从延迟</p><p>2、避免在对表字段进行修改时进行锁表</p><p>对大表数据结构的修改一定要谨慎，会造成严重的锁表操作，尤其是生产环境，是不能容忍的。</p><p>pt-online-schema-change它会首先建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器。</p><p>把原表中新增的数据也复制到新表中，在行所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉。</p><p>把原来一个DDL操作，分解成多个小的批次进行。</p><h3 id="4-11-3-禁止为程序使用的账号赋予super权限"><a href="#4-11-3-禁止为程序使用的账号赋予super权限" class="headerlink" title="4.11.3 禁止为程序使用的账号赋予super权限"></a>4.11.3 禁止为程序使用的账号赋予super权限</h3><p>当达到最大连接数限制时，还运行1个有super权限的用户连接super权限只能留给DBA处理问题的账号使用。</p><h3 id="4-11-4-对于程序连接数据库账号，遵循权限最小原则"><a href="#4-11-4-对于程序连接数据库账号，遵循权限最小原则" class="headerlink" title="4.11.4 对于程序连接数据库账号，遵循权限最小原则"></a>4.11.4 对于程序连接数据库账号，遵循权限最小原则</h3><p>程序使用数据库账号只能在一个DB下使用，不准跨库 程序使用的账号原则上不准有drop权限。</p><h2 id="接口设计规范"><a href="#接口设计规范" class="headerlink" title="接口设计规范"></a>接口设计规范</h2><h2 id="基本规范"><a href="#基本规范" class="headerlink" title="基本规范"></a>基本规范</h2><h3 id="公共参数"><a href="#公共参数" class="headerlink" title="公共参数"></a>公共参数</h3><p>公共参数是每个接口都要携带的参数，描述每个接口的基本信息，用于统计或其他用途，放在header或url参数中。例如：</p><table><thead><tr><th>字段名称</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>客户端版本。1.0.0</td></tr><tr><td>token</td><td>登录令牌</td></tr><tr><td>os</td><td>手机系统版本。12</td></tr><tr><td>from</td><td>请求来源。android&#x2F;ios&#x2F;h5</td></tr><tr><td>screen</td><td>手机尺寸。1080*1920</td></tr><tr><td>model</td><td>机型。IPhone7</td></tr><tr><td>net</td><td>网络状态。wifi</td></tr></tbody></table><h3 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h3><p>为了方便给客户端响应，响应数据会包含三个属性，状态码（code）,信息描述（message）,响应数据（data）。客户端根据状态码及信息描述可快速知道接口，如果状态码返回成功，再开始处理数据。</p><p>array类型数据。通过list字段，保证data的Object结构。</p><p>分页类型数据。返回总条数，用于判断是否可以加载更多。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// object类型数据</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// array类型数据。</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 分页类型数据。</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;10&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>列表类数据接口，无论是否要求分页，最好支持分页，pageSize&#x3D;Integer.Max即可。</p><p>响应结果定义及常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">793034041048451317L</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 放入响应枚举</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">fillCode</span><span class="hljs-params">(CodeEnum codeEnum)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setCode(codeEnum.getCode());<br>        <span class="hljs-built_in">this</span>.setMessage(codeEnum.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 放入响应码及信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">fillCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String message)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setCode(code);<br>        <span class="hljs-built_in">this</span>.setMessage(message);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理成功，放入自定义业务数据集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">fillData</span><span class="hljs-params">(Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setCode(CodeEnum.SUCCESS.getCode());<br>        <span class="hljs-built_in">this</span>.setMessage(CodeEnum.SUCCESS.getMessage());<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字段类型规范"><a href="#字段类型规范" class="headerlink" title="字段类型规范"></a>字段类型规范</h3><p>统一使用String类型。某些情况，统一使用String可以防止解析失败，减少类型转化操作。</p><p>Boolean类型，1是0否。客户端处理时，非1都是false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(isVip))&#123;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>status类型字段，从1+开始，区别Boolean的0和1。“0”有两种含义，（1）Boolean类型的false，（2）默认的status</p><h3 id="上传-x2F-下载"><a href="#上传-x2F-下载" class="headerlink" title="上传&#x2F;下载"></a>上传&#x2F;下载</h3><p>上传&#x2F;下载，参数增加文件md5，用于完整性校验（传输过程可能丢失数据）。</p><h3 id="避免精度丢失"><a href="#避免精度丢失" class="headerlink" title="避免精度丢失"></a>避免精度丢失</h3><p>缩小单位保存数据，如：钱以分为单位、距离以米为单位。</p><h2 id="调用接口的先决条件-token"><a href="#调用接口的先决条件-token" class="headerlink" title="调用接口的先决条件-token"></a>调用接口的先决条件-token</h2><p>获取token一般会涉及到几个参数<code>appid</code>，<code>appkey</code>，<code>timestamp</code>，<code>nonce</code>，<code>sign</code>。我们通过以上几个参数来获取调用系统的凭证。</p><p><code>appid</code>和<code>appkey</code>可以直接通过平台线上申请，也可以线下直接颁发。<code>appid</code>是全局唯一的，每个<code>appid</code>将对应一个客户，<code>appkey</code>需要高度保密。</p><p><code>timestamp</code>是时间戳，使用系统当前的unix时间戳。时间戳的目的就是为了减轻DOS攻击。防止请求被拦截后一直尝试请求接口。服务器端设置时间戳阀值，如果请求时间戳和服务器时间超过阀值，则响应失败。</p><p><code>nonce</code>是随机值。随机值主要是为了增加<code>sign</code>的多变性，也可以保护接口的幂等性，相邻的两次请求<code>nonce</code>不允许重复，如果重复则认为是重复提交，响应失败。</p><p><code>sign</code>是参数签名，将<code>appkey</code>，<code>timestamp</code>，<code>nonce</code>拼接起来进行md5加密（当然使用其他方式进行不可逆加密也没问题）。</p><p><code>token</code>，使用参数<code>appid</code>，<code>timestamp</code>，<code>nonce</code>，<code>sign</code>来获取token，作为系统调用的唯一凭证。<code>token</code>可以设置一次有效（这样安全性更高），也可以设置时效性，这里推荐设置时效性。如果一次有效的话这个接口的请求频率可能会很高。<code>token</code>推荐加到请求头上，这样可以跟业务参数完全区分开来。</p><h2 id="使用POST作为接口请求方式"><a href="#使用POST作为接口请求方式" class="headerlink" title="使用POST作为接口请求方式"></a>使用POST作为接口请求方式</h2><p>一般调用接口最常用的两种方式就是GET和POST。两者的区别也很明显，GET请求会将参数暴露在浏览器URL中，而且对长度也有限制。为了更高的安全性，所有接口都采用POST方式请求。</p><h3 id="GET、POST、PUT、DELETE对比"><a href="#GET、POST、PUT、DELETE对比" class="headerlink" title="GET、POST、PUT、DELETE对比"></a>GET、POST、PUT、DELETE对比</h3><h4 id="1-GET"><a href="#1-GET" class="headerlink" title="1. GET"></a>1. GET</h4><ul><li>安全且幂等</li><li>获取表示</li><li>变更时获取表示（缓存）<br>适合查询类的接口使用</li></ul><h4 id="2-POST"><a href="#2-POST" class="headerlink" title="2. POST"></a>2. POST</h4><ul><li>不安全且不幂等</li><li>使用服务端管理的（自动产生）的实例号创建资源</li><li>创建子资源</li><li>部分更新资源</li><li>如果没有被修改，则不过更新资源（乐观锁）<br>适合数据提交类的接口使用</li></ul><h4 id="3-PUT"><a href="#3-PUT" class="headerlink" title="3. PUT"></a>3. PUT</h4><ul><li>不安全但幂等</li><li>用客户端管理的实例号创建一个资源</li><li>通过替换的方式更新资源</li><li>如果未被修改，则更新资源（乐观锁）<br>适合更新数据的接口使用</li></ul><h4 id="4-DELETE"><a href="#4-DELETE" class="headerlink" title="4. DELETE"></a>4. DELETE</h4><ul><li>不安全但幂等</li><li>删除资源<br>适合删除数据的接口使用</li></ul><p>列表界面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 静态列表</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20岁&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nickName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小张&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">// 动态列表</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;userInfos&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;姓名&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;张三&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;性别&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;男&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;年龄&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;20岁&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;昵称&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;小张&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>多个boolean可以flag替换</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7&quot;</span> <span class="hljs-comment">// 二进制：111，三位分别表示三个boolean字段</span><br><span class="hljs-punctuation">&#125;</span><br><br>long flag = <span class="hljs-number">7</span>;<br>System.out.println(<span class="hljs-string">&quot;bit=&quot;</span>+Long.toBinaryString(flag));<br>System.out.println(<span class="hljs-string">&quot;第一位=&quot;</span>+((flag&amp;<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;第二位=&quot;</span>+((flag&amp;<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>));<br>System.out.println(<span class="hljs-string">&quot;第三位=&quot;</span>+((flag&amp;<span class="hljs-number">4</span>)==<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p>采用http的状态码进行数据封装，例如200表示请求成功，4xx表示客户端错误，5xx表示服务器内部发生错误。状态码设计参考如下：</p><table><thead><tr><th>分类</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2xx</td><td>成功</td></tr><tr><td>3xx</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4xx</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5xx</td><td>服务端错误</td></tr></tbody></table><p>状态码枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodeEnum</span> &#123;<br><br>    <span class="hljs-comment">// 根据业务需求进行添加</span><br>    SUCCESS(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;处理成功&quot;</span>),<br>    ERROR_PATH(<span class="hljs-number">404</span>,<span class="hljs-string">&quot;请求地址错误&quot;</span>),<br>    ERROR_SERVER(<span class="hljs-number">505</span>,<span class="hljs-string">&quot;服务器内部发生错误&quot;</span>);<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String message;<br>    <br>    CodeEnum(<span class="hljs-type">int</span> code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="正常响应"><a href="#正常响应" class="headerlink" title="正常响应"></a>正常响应</h3><p>响应状态码2xx</p><ul><li>200：常规请求</li><li>201：创建成功</li></ul><h3 id="重定向响应"><a href="#重定向响应" class="headerlink" title="重定向响应"></a>重定向响应</h3><p>响应状态码3xx</p><ul><li>301：永久重定向</li><li>302：暂时重定向</li></ul><h3 id="客户端异常"><a href="#客户端异常" class="headerlink" title="客户端异常"></a>客户端异常</h3><p>响应状态码4xx</p><ul><li>403：请求无权限</li><li>404：请求路径不存在</li><li>405：请求方法不存在</li></ul><h3 id="服务器异常"><a href="#服务器异常" class="headerlink" title="服务器异常"></a>服务器异常</h3><p>响应状态码5xx</p><ul><li>500：服务器异常</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2022/10/09/Java/java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/09/Java/java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>java中有八种数据类型</p><ol><li>byte</li><li>short</li><li>int</li><li>long</li><li>float</li><li>double</li><li>String</li><li>char</li></ol><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>数据类型的转换分为两种：强制转换和自动转换</p><p><strong>自动转换</strong>：例如：int转换为double ，java中规定好的，由低到高的转换，不需要强制执行，java的源码中已经设定好。</p><p><strong>强制转换</strong>：例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">125</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-type">byte</span>(a);<br><br></code></pre></td></tr></table></figure><p>如上，一个int类型的变量被强制转换为byte类型，这是由高到低，因此需要强制转换，即在被转换的变量前加转换后的数据类型。</p><p><strong>注意</strong>：强制数据类型转换存在一个和严重的问题，<em><strong>即内存溢出</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;  <span class="hljs-comment">// int</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-type">byte</span>(a); <span class="hljs-comment">// 会出错，原因是byte数据类型的最大值是127，存在内存溢出</span><br></code></pre></td></tr></table></figure><h3 id="变量、常量、作用域"><a href="#变量、常量、作用域" class="headerlink" title="变量、常量、作用域"></a>变量、常量、作用域</h3><p><strong>变量</strong>：指的是在内存中的一个空间，可以放你想放的任何东西，由于不确定性所以取名变量。</p><p><strong>常量</strong>：用final修饰的一个固定的值，<strong>其中变量的名字需要大写</strong>。</p><p><strong>作用域</strong>： </p><ol><li><p>类的作用域</p><p>static 修饰类的全局作用域，不论是前置还是后置都一样。</p></li><li><p>实例变量作用域<br>String name &#x3D; “李四”；</p></li><li><p>方法的作用域</p></li></ol><p>​main方法里面定义的变量</p><h3 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h3><p><strong>a++</strong>:先自增，后赋值</p><p><strong>++a</strong>：先赋值，后自增</p><h3 id="逻辑运算、位运算"><a href="#逻辑运算、位运算" class="headerlink" title="逻辑运算、位运算"></a>逻辑运算、位运算</h3><p>&amp;&amp; ： 两个都为真，结果才是真</p><p>|| ：有真即真</p><p>！：取反</p><hr><p>&lt;&lt;</p><p>左移，乘以2</p><p>》》</p><p>右移，除以2</p><p>^</p><p>幂</p><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a &lt; <span class="hljs-number">60</span> ? <span class="hljs-string">&quot;及格&quot;</span>:<span class="hljs-string">&quot;不及格&quot;</span>；<br></code></pre></td></tr></table></figure><h3 id="Sanner类"><a href="#Sanner类" class="headerlink" title="Sanner类"></a>Sanner类</h3><ol><li>导入Scanner类</li><li>new出Scanner</li><li>变量接受输入</li><li>关闭Scanner</li></ol><p>next（）：以空格结束</p><p>hasnext（）：以Enter键结束</p><p>判断输入的数据类型方法：</p><p>hasNextInt（）：判断输入的数据是否是int类型</p><p>hasNextfloat（）：判断输入的数据是否是float类型</p><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>java的基本结构就是顺序结构，除非特别申明，否则一定是一行一行执行，同时顺序结构也是最简单的算法结构。</p><h3 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h3><ul><li>if单选择结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br>    <span class="hljs-comment">//如果表达式为true，则执行</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果为false。则执行</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>if多选择结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br>    <span class="hljs-comment">//如果表达式为true，则执行</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>) &#123;<br>     <span class="hljs-comment">//如果表达式1为true，则执行</span><br>    <br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<br>     <span class="hljs-comment">//如果表达式2为true，则执行</span><br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果以上表达式结果均为false。则执行，若有一个表达式为true,则跳过else</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>嵌套if</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">//如果表达式1为true则进入表达式2</span><br>    <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<br>     <span class="hljs-comment">//如果表达式2为true则执行</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Switch选择结构"><a href="#Switch选择结构" class="headerlink" title="Switch选择结构"></a>Switch选择结构</h3><p>多选择结构 switch case,switch中的变量类型可以是：byte 、short、int、char、String（JavaSE7）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123;<br>        <span class="hljs-comment">//switch简单理解为匹配一个值</span><br>    <span class="hljs-keyword">case</span> value:<br>        <span class="hljs-comment">//语句</span><br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//一定要写break，不然会出现break穿透现象，即后续结果都会输出</span><br>    <span class="hljs-keyword">case</span> value :<br>        <span class="hljs-comment">//语句</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="While循环结构"><a href="#While循环结构" class="headerlink" title="While循环结构"></a>While循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔表达式)&#123;<br>    <span class="hljs-comment">//循环内容</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>只要布尔表达式为true，则一直循环</li><li>大多数情况会设置表达式让循环停止</li><li>尽量避免死循环</li></ol><p>例子：输出1+2+3+4+5+….+100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">i=<span class="hljs-number">0</span>;<br>sum = <span class="hljs-number">0</span> ;<br><span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>)&#123;<br>    sum = sum + i;<br>    i++;<br>    Sys.out(i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="DoWhile循环结构"><a href="#DoWhile循环结构" class="headerlink" title="DoWhile循环结构"></a>DoWhile循环结构</h3><p>do…while循环至少会进入循环一次</p><p><strong>与while的区别</strong>：</p><p>​while先判断后执行，dowhile是先执行再判断</p><p>​dowhile至少会执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>    <span class="hljs-comment">//代码语句</span><br>&#125;<span class="hljs-keyword">while</span>(布尔表达式)<br></code></pre></td></tr></table></figure><h3 id="For循环结构"><a href="#For循环结构" class="headerlink" title="For循环结构"></a>For循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化；布尔表达式；更新)&#123;<br>    <span class="hljs-comment">//代码语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：最先执行的初始化步骤，可以声明一种类型，但可初始化一个或者多个循环控制变量，也可以是空语句。</p><p>​然后，检测布尔表达式的值。如果为true，循环体继续，如果为false，循环终止，开始执行循环体后面的语句。</p><p>执行一次循环体以后，更新循环体控制变量。</p><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= j; i++) &#123;<br>            System.out.print(j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(j*i) + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>先写一个for循环,实现第一列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++)&#123;<br>        System.out.println(i+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(<span class="hljs-number">1</span>*i));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>*<span class="hljs-number">1</span>=<span class="hljs-number">1</span><br><span class="hljs-number">1</span>*<span class="hljs-number">2</span>=<span class="hljs-number">2</span><br><span class="hljs-number">1</span>*<span class="hljs-number">3</span>=<span class="hljs-number">3</span><br><span class="hljs-number">1</span>*<span class="hljs-number">4</span>=<span class="hljs-number">4</span><br><span class="hljs-number">1</span>*<span class="hljs-number">5</span>=<span class="hljs-number">5</span><br><span class="hljs-number">1</span>*<span class="hljs-number">6</span>=<span class="hljs-number">6</span><br><span class="hljs-number">1</span>*<span class="hljs-number">7</span>=<span class="hljs-number">7</span><br><span class="hljs-number">1</span>*<span class="hljs-number">8</span>=<span class="hljs-number">8</span><br><span class="hljs-number">1</span>*<span class="hljs-number">9</span>=<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><ol start="2"><li>再写一个for循环包裹上一个for循环</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>        System.out.println(<span class="hljs-number">1</span>+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(<span class="hljs-number">1</span>*i));<br>    &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：此时已经能够输出乘法表，但是有多余的部分，需要去重，即把 1 换成  j</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= j; i++) &#123;<br>             System.out.println(j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(j*i));<br><br>     &#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>此时乘法表已经完成，剩下就是排版，即再输出后面加“\t” 以及 换行即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= j; i++) &#123;<br>             System.out.print(j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+(j*i)+<span class="hljs-string">&quot;\t&quot;</span>);<br><br>     &#125;<br>         System.out.println();<br>     &#125;<br></code></pre></td></tr></table></figure><h3 id="增强For循环"><a href="#增强For循环" class="headerlink" title="增强For循环"></a>增强For循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">int</span> [] numbers = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i :numbers)&#123;<br>        System.out.println(i);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="break、continue、goto"><a href="#break、continue、goto" class="headerlink" title="break、continue、goto"></a>break、continue、goto</h3><p>break: 循环的主体部分， 强制退出循环</p><p>continue：用于终止某一次循环</p><p>goto：保留字，类似前端的锚点</p><h3 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h3><p>方法：语句的集合，即函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">main()&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    Sys.out(c)<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span> <span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法的格式：  修饰符  返回值类型  方法名 （参数类型，参数名 ）{</strong></p><p><strong>。。。</strong></p><p><strong>方法体</strong></p><p><strong>。。。</strong></p><p><strong>return  返回值；</strong></p><p><strong>}</strong></p><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><ul><li>静态方法，static修饰</li></ul><p><strong>类一</strong>实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>     <span class="hljs-keyword">return</span> ;<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>类二</strong>可以直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二种情况</strong>：方法a可以直接调用方法b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//第一种普通方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>  <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>      b();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;   <br>  &#125;<br>&#125;<br><span class="hljs-comment">//第二种静态方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>      b();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：以下情况会报错，原因是static方法与类同时加载，此时b还没有创建，无法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>      b();<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//调用举例1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo02</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo02</span>();<br>        demo.a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>      <span class="hljs-keyword">return</span> a + b;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br><br>  &#125;<br><span class="hljs-comment">//调用举例2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <br>       Demo.a(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>      <span class="hljs-keyword">return</span> a + b;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br><br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>非静态方法</li></ul><p><strong>类一</strong>非静态方法，无法夸类调用，可以实例化这个类，即new 一个类调用方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>     <span class="hljs-keyword">return</span> ;<br> &#125;<br></code></pre></td></tr></table></figure><p><strong>类二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> 类名（）.方法（）<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>().sayHello();<br>    <span class="hljs-comment">// 一般写成这种格式</span><br>    <span class="hljs-comment">// 对象类型  对象名字  = 对象的值</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>()<br>    <span class="hljs-comment">// 使用</span><br>    student.sayHello();<br>     <br>        sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>实参与形参数的类型要一致</strong></em></p><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><p><strong>值传递</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-comment">//值传递</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> a= <span class="hljs-number">1</span>;<br>        System.out.println(a);<span class="hljs-comment">//  1</span><br>        Demo02.change(a);<br>        System.out.println(a);<span class="hljs-comment">// 1,原因是Java中是值传递，change方法中没有返回值，int a 是形参</span><br>    &#125;<br>    <span class="hljs-comment">//注意，此处的返回值为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        a=<span class="hljs-number">10</span>;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">// 输出结果</span><br>Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=<span class="hljs-literal">true</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>引用传递</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-comment">//引用传递：传一个对象，本质还是值传递</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(student.name);<span class="hljs-comment">// null</span><br>        Demo02.change(student);<br>        System.out.println(student.name);<span class="hljs-comment">// Student</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(Student student)</span>&#123;<br>        <span class="hljs-comment">// 此处student是一个对象：指向的是Student这个类-----Student student = new Student();这是</span><br>        <span class="hljs-comment">// 一个具体的类，可以改变属性！</span><br>        student.name = <span class="hljs-string">&quot;Student&quot;</span>;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义了一个Student类，有一个属性：name</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span>&#123;<br>    String name;<span class="hljs-comment">// 默认值是 null</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>重载就是在同一个类中，有相同的函数名称，但是行参不同的函数。</p><p><strong>规则</strong>：</p><ul><li>方法的名称必须相同。</li><li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）。</li><li>方法的返回类型可以相同也可以不同</li><li>仅仅返回类型不同不能够称为方法的重载</li></ul><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul><li>JDK1.5开始，java支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后面加一个省略号（…）。</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMax</span><span class="hljs-params">( <span class="hljs-type">double</span>...numbers)</span>&#123;<br>    <span class="hljs-keyword">if</span>(numbers.length == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;No argument passed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> numbers[<span class="hljs-number">0</span>];<br>    <br>    <span class="hljs-comment">//排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span> ; i&lt;numbers.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(numbers[i]&gt;result)&#123;<br>            result = numbers[i];<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;The max value is &quot;</span>+ result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归讲解"><a href="#递归讲解" class="headerlink" title="递归讲解"></a>递归讲解</h3><p>递归：A方法调用A方法！就是自己调用自己</p><p><strong>结构</strong>：</p><ul><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</li><li>递归体：什么时候需要调用自身方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(f(<span class="hljs-number">10</span>));<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">double</span> n )</span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>相同类型数据的有序集合。</li><li>相同类型的若干个数据，按照一定的先后顺序排列组合而成。</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们。</li></ul><p><strong>数组的声明与创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//变量的类型 变量的名字  = 变量的值;</span><br>      <span class="hljs-comment">//1.定义</span><br>      <span class="hljs-type">int</span> [] nums ;<br>      <span class="hljs-comment">// 这里面可以放10个int类型的数字</span><br>      nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>      <span class="hljs-type">double</span>[] ds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">10</span>];<br>      nums[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>      nums[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>      nums[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>      nums[<span class="hljs-number">3</span>] = <span class="hljs-number">3</span>;<br>      nums[<span class="hljs-number">4</span>] = <span class="hljs-number">4</span>;<br>      nums[<span class="hljs-number">5</span>] = <span class="hljs-number">5</span>;<br>      nums[<span class="hljs-number">6</span>] = <span class="hljs-number">6</span>;<br>      nums[<span class="hljs-number">7</span>] = <span class="hljs-number">7</span>;<br>      nums[<span class="hljs-number">8</span>] = <span class="hljs-number">8</span>;<br>      nums[<span class="hljs-number">9</span>] = <span class="hljs-number">9</span>;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>       sum += nums[i];<br>       System.out.println(sum);          <br>   &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>数组的长度是确定的，数组一旦被创建，其大小就是不可以改变的。</li><li>其元素必须是同类型，不允许出现混合类型。</li><li>数组中的元素可以是任何数据类型，包括基本的数据类型和引用数据类型。</li><li>数组变量属于引用类型，数组也可以看成是对象，数组中的每一个元素相当于该对象的成员变量。</li><li>数组的本身就是对象，java中对象是在堆中的，因此数组无论保存原始数据类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li></ul><h3 id="三种初始化以及内存分析"><a href="#三种初始化以及内存分析" class="headerlink" title="三种初始化以及内存分析"></a>三种初始化以及内存分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//静态初始化</span><br><br>      <span class="hljs-type">int</span> [] a = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br>      <span class="hljs-comment">//动态初始化，包含默认初始化（int类型是0，String 类型是null）</span><br>      <span class="hljs-type">int</span> [] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>      b[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>; <span class="hljs-comment">//赋值</span><br><br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="下标越界"><a href="#下标越界" class="headerlink" title="下标越界"></a>下标越界</h3><p>超出数组长度，会报错（下标越界）</p><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-comment">//反转数组</span><br>    <br>        <span class="hljs-comment">//打印数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>        System.out.println(i);<br>        &#125;<br>        <span class="hljs-comment">//求和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            sum += array[i];<br>            System.out.println(<span class="hljs-string">&quot;求和结果是&quot;</span>+sum);<br>        &#125;<br>        <span class="hljs-comment">// 查找最大元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (array[i]&gt;max) &#123;<br>            max = array[i];<br>            &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>二维数组</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">int</span> [][] a = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br>     System.out.println(a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br> &#125;<br><br></code></pre></td></tr></table></figure><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">int</span> [] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;;<br>       <span class="hljs-type">int</span> [] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>       <span class="hljs-comment">//打印</span><br>       System.out.println(array);<br>       System.out.println(Arrays.toString(array));<br>       <span class="hljs-comment">//排序(升序)</span><br>       Arrays.sort(array);<br>       System.out.println(Arrays.toString(array)) ;<br>       <span class="hljs-comment">//赋值</span><br>       Arrays.fill(b,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br>       System.out.println(Arrays.toString(b));<br>   &#125;<br>   <span class="hljs-comment">// 重写</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">h</span> <span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>       <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>       &#125;<br>    System.out.println(Arrays.toString(array));<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">int</span> [] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">62</span>,<span class="hljs-number">24</span>,<span class="hljs-number">56</span>,<span class="hljs-number">35</span>,<span class="hljs-number">99</span>,<span class="hljs-number">2</span>,<span class="hljs-number">35</span>,<span class="hljs-number">563</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-type">int</span>[] sort = sort(a); <span class="hljs-comment">//调用自己写的方法，返回一个排序后的数组</span><br>        System.out.println(Arrays.toString(sort));<br>    &#125;<br><br>    <span class="hljs-comment">//冒泡排序</span><br>    <span class="hljs-comment">//1.比较数组中，两个相邻的元素，如果第一个比第二个大，我们就想换位置</span><br>    <span class="hljs-comment">//2.每一次比较，都会产生出一个最大或者最小的数字</span><br>    <span class="hljs-comment">//3.下一轮可以少排序一次</span><br>    <span class="hljs-comment">//4.依次循环，直到结束</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span>[] array)&#123;<br>        <span class="hljs-comment">// 临时变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//外层循环，判断需要走多少次</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//减少没有意义的比较</span><br>            <span class="hljs-comment">// 内层循环，比较两个数，如果第一个数比第二个数大，则交换位置</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;array.length-<span class="hljs-number">1</span>-i; j++)&#123;<br>                <span class="hljs-keyword">if</span>(array[j+<span class="hljs-number">1</span>]&lt;array[j])&#123;<br>                temp  = array[j];<br>                array[j] =array[j+<span class="hljs-number">1</span>];<br>                array[j+<span class="hljs-number">1</span>] =temp;<br>                flag = <span class="hljs-literal">true</span>;<br><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag== <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>&#125;<br>            <span class="hljs-keyword">return</span> array;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><ul><li><p>当一个数组中大部分元素为0（五子棋），或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p></li><li><p>稀疏数组的处理方式是：</p><pre><code class="hljs">              1. 记录数组一共有几行几列，有多少个不同的值              1. 把具有不同的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</code></pre></li></ul><p><em><strong>我真牛逼，这都写出来了，自己写的自己都看不懂了</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建一个二维数组 11 × 11  0 ： 没有棋子 ，1 ：  黑棋  2：白棋</span><br>        <span class="hljs-type">int</span> [][] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>        array1[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        array1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//输出原始的数组</span><br>        System.out.println(<span class="hljs-string">&quot;输出原始的数组&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> [] ints : array1) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt: ints) &#123;<br>            System.out.print(anInt+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        <span class="hljs-comment">//转换为稀疏数组</span><br>        <span class="hljs-comment">//拿到有效值的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (array1[i][j]  != <span class="hljs-number">0</span> ) &#123;<br>                sum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;有效值的个数：&quot;</span> + sum);<br><br>        <span class="hljs-comment">// 创建稀疏数组</span><br>    <span class="hljs-type">int</span> [][] array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>    array2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>;<br>    array2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">11</span>;<br>    array2[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<br><br>    <span class="hljs-comment">//遍历二维数组，将非零的值，存放到稀疏数组中</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array1[i].length; j++) &#123;<br><br>                <span class="hljs-keyword">if</span> (array1[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    count++;<br>                    array2[count][<span class="hljs-number">0</span>] = i;<br>                    array2[count][<span class="hljs-number">1</span>] = j;<br>                    array2[count][<span class="hljs-number">2</span>] = array1[i][j];<br>                &#125;<br>            &#125;<br>&#125;<br>        <span class="hljs-comment">// 输出稀疏数组</span><br>        System.out.println(<span class="hljs-string">&quot;稀疏数组&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array2.length; i++)&#123;<br>            System.out.println(array2[i][<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;\t&quot;</span><br>            +array2[i][<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;\t&quot;</span><br>            +array2[i][<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;\t&quot;</span><br>            );<br>        &#125;<br>System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;还原&quot;</span>);<br>        <span class="hljs-comment">// 读取稀疏数组</span><br>        <span class="hljs-type">int</span> [][] array3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][array2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br>        <span class="hljs-comment">// 给元素还原值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;array2.length; i++)&#123;<br>            array3[array2[i][<span class="hljs-number">0</span>]][array2[i][<span class="hljs-number">1</span>]] = array2[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-comment">// 打印</span><br>        System.out.println(<span class="hljs-string">&quot;输出原始的数组&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> [] ints : array3) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt: ints) &#123;<br>                System.out.print(anInt+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p><strong>面向过程思想</strong>：</p><ul><li>步骤清晰简单，第一步做什么，第二步做什么……</li><li>面对过程适合处理一些较为简单的问题</li></ul><p><strong>面向对象思想</strong>：</p><ul><li>物以类聚，分类的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面对过程的思索。</li><li>面对对象适合处理复杂的问题，适合处理需要多人协作的问题！</li></ul><p>对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面象对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</p><p><strong>面向对象编程</strong>：</p><ul><li>以类的方式组织代码，以对象的组织（封装）数据。</li><li>抽象</li><li>三大特性：</li></ul><ol><li>封装</li><li>继承</li><li>多态</li></ol><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p><em><strong>终于搞明白了这个玩意[苦涩][苦涩]</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 类：抽象的，需要实例化</span><br>        <span class="hljs-comment">// 类实例化后会返回一个自己的对象！</span><br>        <span class="hljs-comment">//student 对象就是一个具体的Student类的具体实例</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student1.name = <span class="hljs-string">&quot;xiaoming&quot;</span>;<br>        student1.age =<span class="hljs-number">15</span>;<br>        System.out.println(student1.name);<br>        System.out.println(student1.age);<br><br>        System.out.println(<span class="hljs-string">&quot;================================================================&quot;</span>);<br>        System.out.println(student2.name);<br>        System.out.println(student2.age);<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">// 学生类,这是一个模板，是对象共同拥有的属性，一个模板可以new 很多对象</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-comment">// 属性：  字段</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//方法</span><br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;Student&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//输出</span><br>xiaoming<br><span class="hljs-number">15</span><br>================================================================<br><span class="hljs-literal">null</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ul><li>一个类即使什么都不写，只要被创建了就有一个默认的方法，即构造方法。</li><li>1.必须和类的名字相同</li><li>2.必须没有返回类型，也不能写void</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(student.name);<span class="hljs-comment">// null</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 学生类,这是一个模板，是对象共同拥有的属性，一个模板可以new 很多对象</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span>&#123;<br>    String name;<br>    <span class="hljs-comment">// 1.无参构造,可以实例化初始值</span><br>    <span class="hljs-comment">// 2.使用new关键字必须要有构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// this.name = &quot;Student&quot;;</span><br>    &#125;<br><br>    <span class="hljs-comment">// 有参构造，一旦定义了有参构造，无参必须显示定义  ，即无参中的this.name = &quot;Student&quot;;必须去掉，不然会报错，当new一个对象的时候</span><br>    <span class="hljs-comment">// 因为有两个方法，所以会出现方法的重载，传参数则进入有参构造</span><br><br>    <span class="hljs-comment">// 草了，这是真的神奇，融会贯通了</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-comment">// this.name = name(属性中的String name;)</span><br>        <span class="hljs-comment">//name 指的是形参中的(String name)</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>构造器</strong>：</p><ul><li>和类名相同</li><li>没有返回值</li></ul><p><strong>作用</strong>：</p><ul><li>new 本质在调用构造方法</li><li>初始化对象的值</li></ul><p><strong>注意点</strong>：</p><ol><li>定义参数构造后，如果想使用无参构造，显示的定义一个无参的构造</li></ol><p><img src="/img/newObject.png" alt="对象在内存中的创建过程图"></p><h3 id="类与对象的小结"><a href="#类与对象的小结" class="headerlink" title="类与对象的小结"></a>类与对象的小结</h3><ol><li>类与对象</li></ol><p>​类是一个模板：抽象，对象是一个具体的实例</p><ol start="2"><li>方法</li></ol><p>​定义与调用</p><ol start="3"><li>对象的引用</li></ol><p>​引用类型： 基本类型（8）</p><p>​对象是通过引用来操作的：栈—-&gt;堆</p><ol start="4"><li>属性：字段Filed 成员变量</li></ol><p>​默认初始化：</p><p>​数字：0   0.0</p><p>​char ： u0000</p><p>​boolean ： false</p><p>​引用： null</p><p>修饰符  属性类型 属性名 &#x3D; 属性值！</p><ol start="5"><li><p>对象的创建和使用</p><ul><li>必须使用new  关键字创造对象，构造器  Student student &#x3D; new Student（）；</li><li>对象的属性    student.name</li><li>对象的方法   student.say();</li></ul><ol start="6"><li><p>类：</p><p>静态的属性      属性</p><p>动态的方法      方法</p></li></ol></li></ol><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li><p>该露的露，该藏的藏</p><p>我们设计要追求 “高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</p></li><li><p>封装（数据的隐藏）</p><p>通常，应禁止直接访问一个对象中数据的实际表示，而应该通过操作接口来访问</p></li><li><p>属性私有：Get&#x2F;Set</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.woniu;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;Student&quot;</span>);<br>        System.out.println(student.getName());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String  email;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//属性</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>    <span class="hljs-comment">//无参方法</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>    <span class="hljs-comment">//Get</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-comment">//Set 注意：可以设置属性，进行判断 age</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(age&lt;<span class="hljs-number">20</span> || age &gt;<span class="hljs-number">100</span>)&#123;<br>            age = <span class="hljs-number">18</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护增加了</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extends的意思是“扩展”。子类是父类的扩展</li><li>java中只有单继承，没有多继承！</li><li>继承是类与类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的两个类，一个为子类（派生类），一个是父类（基类）。子类继承父类，使用关键字extends来表示。</li><li>子类与父类之间，从意义上讲应该具有“is a”的关系。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.say();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>&#125;<br><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>object类</li><li>super</li><li>方法重写</li></ul><h3 id="Supper"><a href="#Supper" class="headerlink" title="Supper"></a>Supper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">//student.test(&quot;test&quot;);</span><br>       <span class="hljs-comment">// student.test1();</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Student&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 隐藏代码，调用了父类的无参构造方法</span><br>        <span class="hljs-built_in">super</span>();<span class="hljs-comment">//调用了父类的构造方法，必须在子类的第一行</span><br>        System.out.println(<span class="hljs-string">&quot;子类无参&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello,world!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(name);<br>        System.out.println(<span class="hljs-built_in">this</span>.name);<br>        System.out.println(<span class="hljs-built_in">super</span>.name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>     say1();<br>     <span class="hljs-built_in">this</span>.say1();<br>     <span class="hljs-built_in">super</span>.say();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类无参&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Johnny&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>supper注意点：</p><ol><li>supper调用父类的构造方法，必须在构造方法中的地一个</li><li>supper 必须只能出现在子类的方法中或者构造方法中</li><li>supper 和 this 不能同时调用构造方法</li></ol><p>Vs  this ：</p><ul><li>代表的对象不同：</li></ul><p>​this ： 本身调用者这个对象</p><p>​supper： 代表父类对象的应用</p><ul><li><p>前提</p><p>​this：没有继承也可以使用</p><p>​supper：只能在继承中使用</p></li><li><p>构造方法</p><p>​    this（）：本类的构造</p><p>​supper（）：父类的构造</p></li></ul><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//静态的方法和非静态的方法区别很大！</span><br>        <span class="hljs-comment">// 静态方法 ： 方法的调用只和左边，定义的数</span><br>        <span class="hljs-comment">// 非静态方法：重写</span><br>        <span class="hljs-type">Demo03</span> <span class="hljs-variable">demo03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        demo03.say();<br>        <span class="hljs-type">Demo04</span> <span class="hljs-variable">demo04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        demo04.say();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//继承</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Demo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <br>    <span class="hljs-comment">// @Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo03===&gt;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo04===&gt;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br><br><br>Demo03===&gt;Hello World<br>Demo04===&gt;Hello World<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>重写</strong>：</p><ul><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大但不能缩小：  pubilic &gt;Protected&gt;Default&gt;private</li><li>抛出的异常：范围，可以缩小，但不能扩大： ClassNoFoundException –&gt; Exception(大)</li></ul><p><strong>重写</strong>，子类的方法和父类不需要一致：方法体不同！</p><p><em><strong>为什么要重写：父类的功能，子类不一定需要，或者不一定满足！</strong></em></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>动态编译： 类型 ：可扩展性</li><li>即同一方法可以根据发送的对象的不同而采取多种不同的行为方式</li><li>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多</li><li>多态存在的条件<ol><li>有继承关系</li><li>子类重写父类的方法</li><li>父类引用指向子类对象</li></ol></li><li><strong>注意</strong>：<ol><li>多态是方法的多态，属性没有多态性</li><li>父类和子类，有联系 类型转换异常！ ClassCastException！</li><li>存在条件 ：继承关系，方法需要重写，父类引用指向子类对象     Father   f1  &#x3D; new Son（）；</li><li>以下没有多态<br>- static 方法<br>- final 常量<br>- private方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//一个对象的实际类型是确定的</span><br>        <span class="hljs-comment">// new Demo03（）;</span><br>        <span class="hljs-comment">// new Demo04();</span><br>        <br>        <span class="hljs-comment">// 可以指向的引用数据类型就不确定了 ： 父类的引用指向子类</span><br><br>        <span class="hljs-comment">// Demo03 能够调用的方法都是自己的或者是继承父类的！</span><br>        <span class="hljs-type">Demo03</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        <span class="hljs-comment">// Demo04 父类型，可以指向子类，但是不能调用子类独有的方法</span><br>        <span class="hljs-type">Demo04</span> <span class="hljs-variable">demo2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">demo3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo03</span>();<br>        <span class="hljs-comment">// 对象能够执行哪些方法，主要看对象左边的类型，和右边的关系不大！</span><br>        demo.say();<br>        demo2.say();<br>        demo.run();<br>        <span class="hljs-comment">// 强制转换</span><br>        ((Demo03)demo2).run();<br>        <span class="hljs-comment">//子类重写了父类的方法，执行子类的方法</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//继承</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Demo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo03===&gt;son&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 子类独有的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Run demo&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo04===&gt;father&quot;</span>);<br>    &#125;<br>&#125;<br><br><br>Demo03===&gt;son<br>Demo03===&gt;son<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h3><p>instanceof 判断类之间的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// object &gt; String</span><br>        <span class="hljs-comment">// object &gt; Person &gt; Teacher</span><br>        <span class="hljs-comment">// object &gt; Person &gt; Student</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Teacher); <span class="hljs-comment">//false</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>        System.out.println(object <span class="hljs-keyword">instanceof</span> String); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;================================================================&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Teacher); <span class="hljs-comment">//false</span><br>        System.out.println(person <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//System.out.println(person instanceof String); // 编译报错</span><br>       System.out.println(<span class="hljs-string">&quot;================================================================&quot;</span>);<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Student); <span class="hljs-comment">//true</span><br>       <span class="hljs-comment">// System.out.println(student instanceof Teacher); //false</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Person); <span class="hljs-comment">//true</span><br>        System.out.println(student <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Runnable&quot;</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br><br>&#125;<br><br><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br>================================================================<br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br>================================================================<br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// object &gt; String</span><br>        <span class="hljs-comment">// object &gt; Person &gt; Teacher</span><br>        <span class="hljs-comment">// object &gt; Person &gt; Student</span><br><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">// 类之间的转换   父     子</span><br>        <span class="hljs-comment">// 高                低</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">// student 将这个对象转换为Student类型，我们就可以使用Student类型的方法！</span><br>        <span class="hljs-comment">// 低               高</span><br>        ((Student)student).go();<br>    &#125; <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Runnable&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;GO&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>父类引用指向子类的对象</li><li>把子类转换为父类，向上转型</li><li>把父类转换为子类，向下转型；<strong>强制转换，丢失精度（丢失方法）</strong></li><li>方便方法的调用，减少重复的代码！</li></ul><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(<span class="hljs-string">&quot;================================================&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-comment">// 默认，赋初始值</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;默认代码块&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-comment">//只执行一次</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</p></li><li><p>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</p></li><li><p>抽象类，不能使用new 关键字来创建对象，它是用来让子类继承的。</p></li><li><p>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</p></li><li><p>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// abstrack 抽象类： 类  extends： 单继承～ （接口可以多继承）</span><br><span class="hljs-keyword">public</span> abstrack <span class="hljs-keyword">class</span> <span class="hljs-title class_">Action</span>&#123;<br>    <br>    <span class="hljs-comment">//抽象类相当于约束，子类或者子子类去实现它： 约束！</span><br>    <span class="hljs-comment">// 抽象类中可以写普通方法～</span><br>    <span class="hljs-comment">// 抽象方法必须在抽象类中</span><br>    <span class="hljs-comment">// 抽象的抽象： 约束</span><br>    <br>    <span class="hljs-comment">//new 一个抽象类，抽象类是有构造方法的。 因为，虽然抽象类不能直接被实例化，但是继承抽象类的子类毫无疑问能被实例化，在其子类被实例化时，必然执行子类的构造方法， 接口是没有构造方法的。</span><br>    <span class="hljs-comment">// </span><br>    <span class="hljs-keyword">public</span> abstracct <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类存在的意义和作用"><a href="#抽象类存在的意义和作用" class="headerlink" title="抽象类存在的意义和作用"></a>抽象类存在的意义和作用</h3><ul><li><p>抽象是将共性抽离出来，产生抽象性概念非具体。</p></li><li><p>抽象类和抽象方法作用： 使类的抽象性明确起来，告诉用户和编译器打算怎么使用他们。抽象类还是很有用的重构工具，因为它们使得我们可以很容易地将公共方法沿着继承层次结构向上移动。</p></li><li><p>抽象类不可实例化，抽象类包含普通方法和抽象方法。抽象方法只需声明无需方法体。</p></li><li><p>子类继承抽象类，父类的抽象方法必须被子类重写，普通方法可不需要重写。</p></li></ul><h3 id="接口的定义与实现"><a href="#接口的定义与实现" class="headerlink" title="接口的定义与实现"></a>接口的定义与实现</h3><ul><li><p>普通类：只有具体的实现</p></li><li><p>抽象类：具体实现和规范（抽象方法）都有！</p></li><li><p>接口：只有规范！</p></li><li><p>接口就是规范，定义的是一组规则</p></li><li><p>接口的本质是契约，规定好后大家都接受。</p></li></ul><p><strong>作用</strong>：</p><ul><li>约束</li><li>定义一些方法，让不同的人实现～ 10 ———  1</li><li>public abstract</li><li>public statis final</li><li>接口不能被实例化～，接口中没有构造方法～</li><li>implemments可以实现多个接口</li><li>必须重写接口中的方法</li></ul><p><strong>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// interface  定义关键字 ，接口都需要有实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <br>    <span class="hljs-comment">// 接口中的所有定义的方法其实都是抽象的 public abstract </span><br>    <span class="hljs-keyword">void</span>  <span class="hljs-title function_">add</span><span class="hljs-params">(String username)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String username)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String username)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String username)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象类： extends</span><br><span class="hljs-comment">// 类 可以实现接口 implements 接口</span><br><span class="hljs-comment">// 实现了接口的类，就需要重写接口中的方法～</span><br><br><span class="hljs-comment">// 多继承～ 利用接口实现多继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">(String username)</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="N种内部类"><a href="#N种内部类" class="headerlink" title="N种内部类"></a>N种内部类</h3><ul><li>内部类就是在一个类的内部再定义一个类，比如，A类中定义了一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了</li></ul><ol><li>成员内部类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-variable">radius</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>    &#125;<br>     <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Draw</span> &#123;     <span class="hljs-comment">//内部类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawSahpe</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(radius);  <span class="hljs-comment">//外部类的private成员</span><br>            System.out.println(count);   <span class="hljs-comment">//外部类的静态成员</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.局部内部类</p><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">People</span><span class="hljs-params">()</span> &#123;<br>         <br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Man</span><span class="hljs-params">()</span>&#123;<br>         <br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> People <span class="hljs-title function_">getWoman</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Woman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;   <span class="hljs-comment">//局部内部类</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Woman</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.匿名内部类</p><p>匿名内部类应该是平时我们编写代码时用得最多的，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。下面这段代码是一段Android事件监听代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">scan_bt.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnClickListener</span>() &#123;<br>             <br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-comment">// TODO Auto-generated method stub</span><br>                 <br>            &#125;<br>        &#125;);<br>         <br>        history_bt.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnClickListener</span>() &#123;<br>             <br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>                <span class="hljs-comment">// TODO Auto-generated method stub</span><br>                 <br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>4.静态内部类</p><p>　　静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        Outter.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outter</span>.Inner();<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Outter</span><span class="hljs-params">()</span> &#123;<br>         <br>    &#125;<br>     <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Inner</span><span class="hljs-params">()</span> &#123;<br>             <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2022-10-09  午</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown文档学习</title>
    <link href="/2022/10/06/Java/MarkDown%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/10/06/Java/MarkDown%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="MarkDown文档学习"><a href="#MarkDown文档学习" class="headerlink" title="MarkDown文档学习"></a>MarkDown文档学习</h1><p>一级标题#+空格+文字即一级标题</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>二级标题 ##+空格+文字即二级标题</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>三级标题 ###+空格+文字</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>四级标题 ####+空格+文字</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>Hello World ！！！</strong></p><p>字体加粗 字体两边+**</p><p><em>Hello World ！！！</em></p><p>字体倾斜 字体两边加+*</p><p><em><strong>Hello World ！！！</strong></em></p><p>字体倾斜且加粗 字体两边加+***</p><p><del>Hello World ！！！</del></p><p>字体删除线 字体两边加+～～</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>love is give </p></blockquote><p>引用   &gt;+空格</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>方式一：—</p><hr><p>方式二：***</p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>图片：![名字]+（路径）</p><p><img src="/img/09b.jpg" alt="图片"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>超链接：[名字]+(地址)</p><p><a href="www.baidu.com">baidu</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>有序列表：1+.+空格</p><ol><li>A</li><li>b</li><li>c</li></ol><p>无序列表：-+空格</p><ul><li>a</li><li>b</li><li>c</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>举例：1|2|3——表头</p><p>​  4|5|6——内容</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>例子：&#96;&#96;&#96;</p><p>例子：&#96; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>登山，等一半</title>
    <link href="/2022/10/04/%E9%9A%8F%E6%83%B3/%E7%99%BB%E5%B1%B1/"/>
    <url>/2022/10/04/%E9%9A%8F%E6%83%B3/%E7%99%BB%E5%B1%B1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-PwNKODlb" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="478507889" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme=" #1da496"    ></div><p><strong>此时我已经登上了这座山，比我想象中的难，也比我想象中的容易，难是因为坡度很大，容易是因为两个小时就上来了，似乎有点惨，这意味着我要在这里吹四个小时的风，想来这么久的时间，已经够我整理最近的思绪了，爬山的队友很菜，所以我一个人先走了，这对我来说，是一种幸运。我喜欢这种感觉，一个人去完成一些事情，特别是我对这件事赋予了自己的意义。</strong><br><strong>哈哈哈哈，刚我写到这里还在想写什么，有人问这个老板，最近的厕所在哪里，老板估计看他是个男的，直接用手指着周围划了一圈说，都可以，笑死我了。</strong><br><strong>之所以要出去转转，有很多原因，其中有一种是某天可以和你一起，哈哈哈，这确实是件开心的事。</strong><br><strong>无论是海也好，爬山看日出也好，其中的体会我感受良多，下次，像我们约好的，会一起去感受到山与海，我想这会有不一样的意义，我想要是等到我迟暮，想起某些事情，这一件值得我得意🙃。</strong><br><strong>我们是两个不同性格的人，我以我的观点出发，我感觉到你并不快乐，或者说，你的快乐里面少了一点东西，也许这是你快乐的方式吧，也许是我的偏见，但我想，我应该告诉你，并不是为了想说我发现你不快乐，而是生活中还是有许多的人关心我们，关注我们，我想这也是能够支撑大家走下去的原因，总有人喜欢你，有人讨厌你，期待你会能够保持热爱，开心。(如果我感觉错了，忽略这点)</strong><br><strong>一起加油吧，为生活，为各自的梦想，去成为我们各自想成为的人。</strong><br><em><strong>2022&#x2F;10&#x2F;04&#x2F;凌晨</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>愤怒</title>
    <link href="/2022/09/29/%E9%9A%8F%E6%83%B3/%E6%84%A4%E6%80%92/"/>
    <url>/2022/09/29/%E9%9A%8F%E6%83%B3/%E6%84%A4%E6%80%92/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="160e3836e1080babcbbea859b8bf72a4f947ffc58e25772c16dfc0a8625893ee"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>私密文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>O Captain! My Captain!</title>
    <link href="/2022/09/27/%E9%9A%8F%E6%83%B3/%E8%88%B9%E9%95%BF%EF%BC%8C%E6%88%91%E7%9A%84%E8%88%B9%E9%95%BF%EF%BC%81/"/>
    <url>/2022/09/27/%E9%9A%8F%E6%83%B3/%E8%88%B9%E9%95%BF%EF%BC%8C%E6%88%91%E7%9A%84%E8%88%B9%E9%95%BF%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-mJzSonUH" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="478507889" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme=" #1da496"    ></div><p>在过去的几年中，互联网对我产生了有很大的影响，我在其中感受到了许多。人类以奇特的智慧创造出互联网<br>互联网用奇迹创造了一个又一个的奇迹，如今琳琅满目的产·品不断迭代，消费模式的升级，生产力提高等诸多因素，互联网已经是<br>一个自成一方天地，让刚进入的人们如同刘姥姥进大观园，每天被不同的消息所刺激，作出反应。在这中间我也见识到了互联网世界中<br>不同的好与坏。<br>今天，许多的感触终于汇聚到了一起，使我终于有力量能够写下一点什么了。我想说的是互联网进步中，不可缺少的一个群体，他们不是组织，<br><em>不是公会，没有公司，他们来自五湖四海，世界各地。他们有许多的称号，比起那些，我更加愿意称他们为“船长”，一群有信念，积极的，热切的”船长”.就像那首诗歌——*<em>“O Captain,My Captain”</em></em>,作为一个船长，一代一代的发扬和继承船长的精神，担当起了船长的责任，引领人们去追寻自己心中的热爱。*</p><h4 id="发现船长"><a href="#发现船长" class="headerlink" title="发现船长"></a>发现船长</h4><h4 id="跟随船长"><a href="#跟随船长" class="headerlink" title="跟随船长"></a>跟随船长</h4><h4 id="模仿船长"><a href="#模仿船长" class="headerlink" title="模仿船长"></a>模仿船长</h4><h4 id="成为船长"><a href="#成为船长" class="headerlink" title="成为船长"></a>成为船长</h4><p>网络是个大世界，能看到许多不同与我们生活的面貌<br>互联网的开源精神<br>衍生出的黑客精神<br>归根结底是一群带着一个狂热的心的人们<br>做一个这样的人，学习这样的精神</p><p>真的重要的东西是免费的，无法用任何一样东西去衡量，我们只能去称赞，崇拜<br>大师的回馈，回馈到社会<br>大师有大师的责任<br>互联网的东西时刻都在更新，改变，但那群人的精神永远在路上。</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>船长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二</title>
    <link href="/2022/09/15/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%BA%8C/"/>
    <url>/2022/09/15/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>远方来信，你的信我还没有收到，但我已经想写点什么了，特别是在晚上，这个时间段总是让人容易感性，想来距离上次写信已经有月余了，在这期间，我经历了一场友谊的大起大落，也正在经历一场异性之间的错误，也许要经历完了，在灰暗的时刻我竟没有大哭的勇气，现在想来，确实十分怀念能够大哭的日子。思来想去，却总是和你说一些丧气的话，实在是不够尊重你，想来你我之间不应该是以一种树洞之间的交流，写信的这一步，我们都迈出了，接下来，我们可以试着走出新的一步。这是什么，我不知道。<br>我确是落后于人太多了，但我任然坚信在三年以后，我会改变我现在的状况，等工作小有成就，我会准备自考，自考后我会考研。未来的计划暂时止步于此，届时我已经二十过半，是时候为我的人生大事考虑了。<br>我时常生活在各种混乱的观念之中，但偶尔也能够感受到一丝契机，那种属于我，个人的，独特的思想，这是我快乐的源泉之一，可惜确实不常见，这种契机却只有孤独，才能够捕捉到。与自我的对话，我偶尔会看不同种类的书，也许是禁书，也许是正书，我也不知道好坏，也许不止有好的和坏的，也许没有什么好坏，也许什么都可以模棱两可，也许什么都可以以模糊定义，放我想到这里，我笑了，我很庆幸现在在改变这种想法，因为这是错的，从开始的把好的和坏的否定，模糊掉概念。若以次出发，由一到多，如此，不是所有的东西都可以改变吗，这是不对的，好的就是好的，所有的东西都要有原本的“一”，才能衍生到“多”，但其实这中间还是有其他的问题，苏格拉底说，没有绝对的坏，所有的坏都是一种对好的偏离，如此，如果没有一种什么是好的概念，想来也没有坏的存在了，这一点能够感受到，东西的方的文化有许多的共同之处，道生一，一升二，二生三，三生万物想必就是如此。道家说:吾以观复。夫物芸芸，各复归其根。如果灵魂能够轮回，那我岂不是活了几百年，这个苏格拉底的说法倒是有些一致，他说我们学习知识并不是真的在学习，只是为了唤醒我们本来的记忆，彼时的东西方还没有交流，却能够想到一致，实在是让人惊叹不已！<br>我们继续说好坏之间的概念，如果说接受了以上的想法，而进入了崇拜好的观念这却又陷入了一个困境，我粗浅的比喻一下，在好的观念里面，可以比作完全的理想主义者，一些看起来都是那么的美好，想着美好的希望出发，可惜啊，现实总会把它击的粉碎，如此，崇高的理想主义就演变成了一个不可能完成的任务，巨大的失落感充斥着你的心灵，为了解救自我，你开始劝自己，没什么，没必要，这不重要，最后就回到了没有什么是好的的起点，于是陷入了虚无，陷入了毁灭。<br>所以借此我又想到一个问题，这是自我意识阶段的好，以好为目标出发，那么，在更高的一个层面上，我们应该去推动他吗，我们应该呼吁吗，这是需要我们思考的，关于这点道德经上说的好啊，天下皆知美之为美，斯恶（è）已；皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和（hè），前后相随。是以圣人处无为之事，行不言之教，万物作焉而不辞，生而不有，为而不恃，功成而弗居。夫（fú）唯弗居，是以不去。 但这时候却也有一个问题，那么，那些真的需要被引导的人，却因为没有人引导又应该怎么办呢，那些从来就没有这些概念的人又要如何生活呢，这是我们要思考的啊！如果你帮助他，这时候礼记就来了:行修言道，礼之质也。礼闻取于人，不闻取人。礼闻来学，不闻往教。那我们不应该帮助吗，这是我所困惑的。<br>写到此处不免有些悲哀，执古之道而御今啊，唉</p><p>缘起性空，缘起性空啊，缘不知道何处起，不能说一往情深，是情，皆非情，所以是情啊！男女之间情，古来的诗词都已经说通了，我却不曾达到那种高度，但确还是有一点感性与理性之间的抗争，缘已经起了，何时才能空掉呢，啊，原来缘分来了，情就生出来了，缘分散了，情就会消散了吗？我何尝有不是那个理想主义者的映射之一呢，只是我确是不知道什么时候会陷入虚无，然后奔向死亡。<br>说了一些话，却不是我故意说的如此高雅，想来你是能够明白的，实在是只有和你说，我才不会显得如此张扬。有人认为这些没有用，无法通过这个得到报酬，但我坚信，只有思想上的成长才是我长久的收入，这比财富我无法与任何一个人共同感受，但我希望你能够透过这些许的文字，来感受这个宏伟的世界啊！也许这样，我不会这么孤独，是的，有时候我感受到了孤独。<br>夜深了，我应该睡觉了，大多时候我都能知道我应该做什么，但有小部分时候我希望我不应该这么做，这样的话，也许我会变得怪异。</p><p>2022&#x2F;09&#x2F;15   子夜</p>]]></content>
    
    
    <categories>
      
      <category>远方来信</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>隐入城烟————与欢天才的分享</title>
    <link href="/2022/08/30/%E9%9A%8F%E6%83%B3/%E9%9A%90%E5%85%A5%E5%9F%8E%E7%83%9F/"/>
    <url>/2022/08/30/%E9%9A%8F%E6%83%B3/%E9%9A%90%E5%85%A5%E5%9F%8E%E7%83%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="隐入城烟"><a href="#隐入城烟" class="headerlink" title="隐入城烟"></a>隐入城烟</h4><p>心中思绪万千，下笔无言。</p><p><img src="/img/yin-j.jpeg"></p><p>这是一部很棒的电影，十分庆幸能有缘分遇见，电影里要表现的东西太多太多了，我就一下我感触比较深的点和你分享下，哈哈哈，第一次哈，不要笑我</p><p><img src="/img/yin-h.jpeg"></p><p><img src="/img/yin-a.jpeg"></p><p><img src="/img/yin-b.jpeg"></p><p><img src="/img/yin-g.jpeg"><br><img src="/img/yin-d.jpeg"><br><img src="/img/yin-i.jpeg"><br><img src="/img/yin-k.jpeg"></p><p><img src="/img/yin-f.jpeg"></p><p>这导演太狗了，要寄刀片给他就好，让稍有起色的生活，把我的希冀拉入深渊，看这种电影太痛苦了，活着是这样，平凡的世界是这样，这部电影也是，太写实了，我无法忍受太多的真实，这会让人感到很痛苦，所以在我心里，他们就是幸福的去市里生活了——我不管，包括平凡的世界里也是，女主都没有死，我说的 ：)！</p><p>电影里面有很多的意象：比如小麦的命数（我觉得的暗示女主的命运）、鸡（女主不能生育，特喜欢小孩小孩）、驴（这个不知道）、燕子（我觉得是希望）还有那段对话：种子在地里，有脚的人却走不开</p><p>然后他的婚姻到爱情——除了村里人羡慕，我们又何尝不羡慕呢……（狗导演）</p><p>我对抽血有些许的想法，不知道对不的：有钱的人抽穷人的血，几乎没有回报（些许的回报）这让我想到————资本家、地主的压迫剥削，总有一天资本家会吊死在路灯上的，（这里不能细说，保命.jpg）</p><p>最有感触的就是平凡的人生，我想，也许应该叫苦难的人生，即使如此他还是那么的爱他老婆（我也想有一个，我丢），苦难就是苦难，它不值得被歌颂，如果可以，没有人想经历苦难，而他们都是生活的强者，不论在平凡的世界中，还是活着，或是这部电影，都让我感受的了一股无语论比的力量，仿佛中我看到老人与海的那一慕：来吧，海浪再大些吧，我什么都不怕，来吧！我想这也是电影想让我们真的感受的情感吧，<strong>对生活的不屈，平凡的人生中，活出自己的故事</strong>，虽然主角在这其中有迫于生活的无奈，因为没有选择，但恰恰也是一种选择，有时候，我觉得我有很多选择，却无往不再枷锁之中，做出了最坏的选择。设身处地，我做不到。同时，我也会想，我的路又在哪里呢。。。。。。</p><p>女主的死：唉，狗导演，她没死，记住，没死，他两一起去市里了，我说的（我说的！！！） </p><p>最后想到罗翔老师说过的一句话：<strong>演好自己的剧本</strong></p><p><em><strong>与君共勉</strong></em></p><p>​2022年08&#x2F;30  夜</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>与朋友交呼</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>狐狸</title>
    <link href="/2022/08/30/%E9%9A%8F%E6%83%B3/%E7%8B%90%E7%8B%B8/"/>
    <url>/2022/08/30/%E9%9A%8F%E6%83%B3/%E7%8B%90%E7%8B%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="狐狸"><a href="#狐狸" class="headerlink" title="狐狸"></a>狐狸</h2><p>　　就在这当儿，跑来了一只狐狸。<br><img src="https://pprince.top/article/p-41.jpg"></p><p>　　“你好。”狐狸说。</p><p>　　“你好。”小王子很有礼貌地回答道。他转过身来，但什么也没有看到。</p><p>　　“我在这儿，在苹果树下。”那声音说。</p><p>　　“你是谁？”小王子说，“你很漂亮。”</p><p>　　“我是一只狐狸。”狐狸说。</p><p>　　“来和我一起玩吧，”小王子建议道，“我很苦恼……”</p><p>　　“我不能和你一起玩，”狐狸说，“我还没有被驯服呢。”</p><p>　　“啊！真对不起。”小王子说。</p><p>　　思索了一会儿，他又说道：“什么叫‘驯服’呀？”</p><p>　　“你不是此地人。”狐狸说，“你来寻找什么？”</p><p>　　“我来找人。”小王子说，“什么叫‘驯服’呢？”</p><p>　　“人，”狐狸说，“他们有枪，他们还打猎，这真碍事！他们唯一的可取之处就是他们也养鸡，你是来寻找鸡的吗？你”</p><p>　　“不，”小王子说，“我是来找朋友的。什么叫‘驯服’呢？”</p><p>　　“这是已经早就被人遗忘了的事情，”狐狸说，“它的意思就是‘建立联系’。”</p><p>　　“建立联系？”</p><p>　　“一点不错，”狐狸说。“对我来说，你还只是一个小男孩，就像其他千万个小男孩一样。我不需要你。你也同样用不着我。对你来说，我也不过是一只狐狸，和其他千万只狐狸一样。但是，如果你驯服了我，我们就互相不可缺少了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了。”</p><p><img src="https://pprince.top/article/p-43.jpg"></p><p>　　“我有点明白了。”小王子说，“有一朵花……，我想，她把我驯服了……”</p><p>　　“这是可能的。”狐狸说，“世界上什么样的事都可能看到……”</p><p>　　“啊，这不是在地球上的事。”小王子说。</p><p>　　狐狸感到十分蹊跷。</p><p>　　“在另一个星球上？”</p><p>　　“是的。”</p><p>　　“在那个星球上，有猎人吗？”</p><p>　　“没有。”</p><p>　　“这很有意思。那么，有鸡吗？”</p><p>　　“没有。”</p><p>　　“没有十全十美的。”狐狸叹息地说道。<br>    <img src="https://pprince.top/article/p-49.jpg"></p><p>　　可是，狐狸又把话题拉回来：“我的生活很单调。我捕捉鸡，而人又捕捉我。所有的鸡全都一样，所有的人也全都一样。因此，我感到有些厌烦了。但是，如果你要是驯服了我，我的生活就一定会是欢快的。我会辨认出一种与众不同的脚步声。其他的脚步声会使我躲到地下去，而你的脚步声就会象音乐一样让我从洞里走出来。再说，你看！你看到那边的麦田没有？我不吃面包，麦子对我来说，一点用也没有。我对麦田无动于衷。而这，真使人扫兴。但是，你有着金黄色的头发。那么，一旦你驯服了我，这就会十分美妙。麦子，是金黄色的，它就会使我想起你。而且，我甚至会喜欢那风吹麦浪的声音……”</p><h5 id="我喜欢那风吹麦浪的声音……这让我想念你，相见亦无事，别后常思君。"><a href="#我喜欢那风吹麦浪的声音……这让我想念你，相见亦无事，别后常思君。" class="headerlink" title="我喜欢那风吹麦浪的声音……这让我想念你，相见亦无事，别后常思君。"></a>我喜欢那风吹麦浪的声音……这让我想念你，相见亦无事，别后常思君。</h5>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我喜欢的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写给儿子刘云帆</title>
    <link href="/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E5%86%99%E7%BB%99%E5%84%BF%E5%AD%90%E5%88%98%E4%BA%91%E5%B8%86/"/>
    <url>/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E5%86%99%E7%BB%99%E5%84%BF%E5%AD%90%E5%88%98%E4%BA%91%E5%B8%86/</url>
    
    <content type="html"><![CDATA[<h4 id="这首《写给儿子刘云帆》的作品，诗人刘年曾说，算是他的成名作"><a href="#这首《写给儿子刘云帆》的作品，诗人刘年曾说，算是他的成名作" class="headerlink" title="这首《写给儿子刘云帆》的作品，诗人刘年曾说，算是他的成名作."></a>这首《写给儿子刘云帆》的作品，诗人<a href="https://baike.baidu.com/item/%E5%88%98%E5%B9%B4/19458549">刘年</a>曾说，算是他的成名作.</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>突然想到了身后的事<br>写几句话给儿子</p><p>其实，火葬最干净<br>只是我们这里没有<br>不要开追悼会<br>这里，没有一个人懂得我的一生。</p><p>不要请道士<br>他们唱的实在不好听</p><p>放三天吧<br>我等一个人，很远<br>三天过后没来，就算了<br>有的人，永远都是错过</p><p>棺材里，不用装那么多衣服<br>土里，应该感觉不到人间的炎凉了。</p><p>忘记说碑的事了<br>弄一个最简单的和尚碑</p><p>抬碑的人辛苦<br>可以多给些工钱</p><p>碑上，刻个墓志铭<br>刻什么呢，我想一想<br>就刻个痛字吧<br>这一生，我一直忍着没有说出来</p><p>凿的时候<br>叫石匠师傅轻一点。</p><p>清明时候<br>事情不多，就来坐一坐<br>这里的风不冷</p><p>不用烧纸钱<br>不用挂青<br>我没有能力保佑你<br>一切靠自己</p><p>说说家事<br>说说那盆兰花开了没有<br>说说最近看了什么书<br>交了女朋友没有</p><p>不要提往事<br>我没有忘记<br>你看石碑上的那个字<br>刻得那么深</p><p>不要提国事<br>我早已料到<br>你看看，石碑上的那个字<br>刻得那么深。</p>]]></content>
    
    
    <categories>
      
      <category>现代诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>现代诗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我</title>
    <link href="/2022/08/30/%E9%9A%8F%E6%83%B3/%E6%9C%89%E8%AE%B0/"/>
    <url>/2022/08/30/%E9%9A%8F%E6%83%B3/%E6%9C%89%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-DuCHKuOt" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="478507889" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme=" #1da496"    ></div><ul><li>今天没有学到什么东西，配置环境，下载了几个docker镜像，时间就过去了，看起来学到了一些东西，其实都是拓展罢了，<br>但这不足以促使我来写点什么，真的让我恐慌的是，突如其来的人，连一点准备都没有，突然出现在我在城市，让我手足无措，这是我曾经期盼的，期盼已久的，但不是这种突入其来的，我感觉到了退缩，感觉到压力，我不希望去承担这样一份突如其来的惊喜，我大抵是个<br>不太负责任的人，怯懦时常有的事，发生在现在确实让我感到了羞愧，我不知道要用什么样的态度去面对，</li><li>我想说的是，我不是害怕得到，大概是害怕失去，可我却也没有拥有，不知道要说什么，确实感到了躁动，我时常活在过去，留恋我失去的，于是拼命抓住了一些时间的碎片，陶醉在其中，把希望寄托在了久久的未来，今天我会想起，在昨天的时候，我总想着有一天我会怎么样，我要怎么样，总是生活的抽象，丢失了具体，除了喜欢T是这件具体的事情我忘记不了，却也是失败，过去了很久，时间走了，人也走了，只有我留在原地，在一定的范围内循环。只活在自己臆想的世界里，兜兜转转，有人回作短暂的停留，有人告诉我外面的世界，有人要带我出去，我错过可一次又一次，找了一个又一个理由。停留了一年又一年，总在自欺欺人，有人问我为什么不出去，可能一开始没有走出去，后来就一直缺失走出去的勇气了，而今，似乎我又得到了眷顾，在我的不远处，有人偏着头，笑着问了我一句，你会试着走出来吗？</li><li>也有人对我说，你不走出去吗？而我在想，我真的会出去吗！</li></ul>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我迷惘的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>翻身</title>
    <link href="/2022/08/30/%E9%9A%8F%E6%83%B3/%E7%BF%BB%E8%BA%AB/"/>
    <url>/2022/08/30/%E9%9A%8F%E6%83%B3/%E7%BF%BB%E8%BA%AB/</url>
    
    <content type="html"><![CDATA[<ul><li><p>进站下楼梯，看见几个女人，提着箱子一步一踱，明显有些吃力，我要做点什么的时候，看到一个青年，白衣休闲裤，背书包，看来是个学生，他是不是也要做点什么，看来现在的年轻人，还是很有助人之心的，我看他快步下楼梯，眼神注意到了几个女人，脚步放慢，他伸出手了，他要帮助离得近的一个女人了，看来今天又是快乐的一天，我继续看去，他已经走远，经过女人身边时，恰好提了提书包，往前走去，还有一个需要帮助的女人，她的行李明显比前面的女的重，也许他会帮助她，他确实注意到她了，我确信，他下楼的时候视线飞快的扫过，目光在女人身上停留，他又匆匆走过，我跟了上去，我要看看他在想什么。</p></li><li><p>上车后坐在一个角落，看起来有点孤单，不，也可能是为了逃避罪恶感。我看他带上耳机，眼神之中略显疲惫，透过车窗看到几个女人也下来了，他的目光聚集在她们身上，他是想帮忙的，也许他他是能帮忙的，他没有。看来他只是，内心的虚荣，脱离土地</p></li><li><h4 id="没写完的，有点忙，有空再写"><a href="#没写完的，有点忙，有空再写" class="headerlink" title="没写完的，有点忙，有空再写"></a>没写完的，有点忙，有空再写</h4></li></ul>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我看见的</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我喜爱一切不彻底的事物</title>
    <link href="/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E6%88%91%E5%96%9C%E7%88%B1%E4%B8%80%E5%88%87%E4%B8%8D%E5%BD%BB%E5%BA%95%E7%9A%84%E4%BA%8B%E7%89%A9/"/>
    <url>/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E6%88%91%E5%96%9C%E7%88%B1%E4%B8%80%E5%88%87%E4%B8%8D%E5%BD%BB%E5%BA%95%E7%9A%84%E4%BA%8B%E7%89%A9/</url>
    
    <content type="html"><![CDATA[<h4 id="中国现代文学馆研究员张定浩"><a href="#中国现代文学馆研究员张定浩" class="headerlink" title="中国现代文学馆研究员张定浩"></a>中国现代文学馆研究员<a href="https://baike.baidu.com/item/%E5%BC%A0%E5%AE%9A%E6%B5%A9/19840123">张定浩</a></h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>我喜爱一切不彻底的事物<br>细雨中的日光，春天的冷<br>秋千摇碎大风，<br>堤岸上河水荡漾。<br>总是第二乐章<br>在半开的房间里盘桓；<br>有些水果不会腐烂，它们干枯成<br>轻盈的纪念品。</p><p>我喜爱一切不彻底的事物。<br>琥珀里的时间，微暗的火，<br>一生都在半途而废，<br>一生都怀抱热望。<br>夹竹桃掉落在青草上，<br>是刚刚醒来的风车；<br>静止多年的水<br>轻轻晃动成冰。<br>我喜爱你忽然捂住我喋喋不休的口<br>教我沉默。</p>]]></content>
    
    
    <categories>
      
      <category>现代诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>现代诗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>是鲸鱼安慰了大海</title>
    <link href="/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E9%B2%B8%E9%B1%BC%E5%AE%89%E6%85%B0%E4%BA%86%E5%A4%A7%E6%B5%B7/"/>
    <url>/2022/08/30/%E7%8E%B0%E4%BB%A3%E8%AF%97%E6%AD%8C/%E9%B2%B8%E9%B1%BC%E5%AE%89%E6%85%B0%E4%BA%86%E5%A4%A7%E6%B5%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="诗人燕七"><a href="#诗人燕七" class="headerlink" title="诗人燕七"></a>诗人<a href="https://baike.baidu.com/item/%E9%B2%B8%E9%B1%BC%E5%AE%89%E6%85%B0%E4%BA%86%E5%A4%A7%E6%B5%B7/24219310#2">燕七</a></h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>不是所有的树</p><p>都能在自己的家乡终老</p><p>不是所有的轨道</p><p>都通往春暖花开的方向</p><p>不是所有的花都会盛开</p><p>不是所有约定的人都会到来</p><p>我知道，是流星赞美了黑夜</p><p>鲸鱼安慰了大海</p>]]></content>
    
    
    <categories>
      
      <category>现代诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>现代诗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再读平凡的世界有感</title>
    <link href="/2022/08/29/%E9%9A%8F%E6%83%B3/%E5%86%8D%E8%AF%BB%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%96%E7%95%8C%E6%9C%89%E6%84%9F/"/>
    <url>/2022/08/29/%E9%9A%8F%E6%83%B3/%E5%86%8D%E8%AF%BB%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%96%E7%95%8C%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>这一生，我要做什么，你要到哪里去，你热爱什么，这是我在寻找的，我一次次的自己给自己规划好了失败，却把希望寄托在遥远的明天，明天离我很近，只有时间的距离，明天又无比的遥远，昨天事情我还是时常难以忘记，今天又在胡思乱想，少年啊，早长莺飞的春天已经过去了，又一年时间也会过去，少年啊，你要长大了吗，你到底要做什么啊，你总是在期待着，在试探着，在徘徊着，勇敢一点吧，平凡的少年。<br>少年啊，没有意义的少年，生活赋予了你很多的意义，你喜欢吗？你不会喜欢的，少年的肩膀要开始挑起生活的责任了，快些准备吧，短暂的时光会流逝的。<br>赤诚些吧，认真些吧，让爱多一点吧，再善良些吧，挑起你的责任，带上你自己，开始你的人生吧，少年啊，你只是一个平凡的人，放过自己吧，过上实际的生活吧，带着你的梦想。<br>我重读一本书，有新的感受，书却没有新的结局，人生在世到死去，若能平平淡淡的走过这些许的岁月，已然是万要庆幸的事情，生活少一点快乐吧，就像那句名言：生活中所有的快乐，都要用孤寂来偿还，少年啊，过上平凡的生活，连着梦，向这片土地扎根</p><p> 2022&#x2F;08&#x2F;29 子时</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一</title>
    <link href="/2022/08/05/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%B8%80/"/>
    <url>/2022/08/05/%E8%BF%9C%E6%96%B9%E6%9D%A5%E4%BF%A1/%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>见字如面，来信悉知。<br>迷惘是一件好事，我总是在迷惘中又会陷入到另一个迷惘，当我发现我走出来以后，后面发现，不过是从一口小小的井，换到了一口大点的井，发生改变了吗，没有，没有改变，我们终究在最大的井里面，又活在每个自己的小井中，活出自己的偏见。有，有改变，至少我渐渐了解到，学习就是一个不断否定的过程，这是个悖论。<br>在我看来，你不必只选择一份工作，你经营一份谋生，一份生活，谋生让你活着，活着让你生活，这两者不冲突，如果，很幸运的话，两者能够耦合，那却是再好不过了，不能也没有关系，一切都是命运的安排，我们能觉得的事情很少，努力会取得一部分成功，成功会让你失去失败，不论好与坏，都是收获。相对来说，人生是没有意义的，一切的不确定，不完美赋予了一定的意义，但人生没有痛苦就是最大的幸福，快乐以后就是痛苦，也许这叫乐极生悲。我想，能平安的，尽量少的经历痛苦，经历快乐，走过几十年的时间，到达人生终点，这算是最大的幸福。<br>我说的，不一定适合你，但你自己可以寻找你需要什么，你有时间，但是不多，你可以寻找，但不能太久，边走边思考吧，也许在路上你会寻找到答案，试错也是对的开始。<br>又一个开始，别里太多希望给同学身上，少点期盼没那么痛苦，如果能避免室友之间的矛盾确实再好不过，我认为最重要的时间，时间很重要，不必再浪费在其他的事情上，也不必期盼明天，慢慢的，走出昨天吧，今天，是我的早晨，下雨，我知道今天我会做什么，这很重要，你今天会做什么呢？<br>太耀眼，优秀，不好，这样没有时间去经营自己，也需要去承担一定的责任，社会责任。<br>还有很多想说的，但是没有时间了，</p>]]></content>
    
    
    <categories>
      
      <category>远方来信</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>烦</title>
    <link href="/2022/07/13/%E9%9A%8F%E6%83%B3/%E7%83%A6/"/>
    <url>/2022/07/13/%E9%9A%8F%E6%83%B3/%E7%83%A6/</url>
    
    <content type="html"><![CDATA[<h6 id="看到你们活着都是这个叼样，我就放心了"><a href="#看到你们活着都是这个叼样，我就放心了" class="headerlink" title="看到你们活着都是这个叼样，我就放心了-__-!!!"></a><em>看到你们活着都是这个叼样，我就放心了-__-!!!</em></h6>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>烦心事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022.08.15演讲</title>
    <link href="/2021/12/03/%E9%9A%8F%E6%83%B3/2022.08.15%E6%BC%94%E8%AE%B2/"/>
    <url>/2021/12/03/%E9%9A%8F%E6%83%B3/2022.08.15%E6%BC%94%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e47c11f6929beb13a4ebf37805d157c795f49cb40c7b34af7e52c6324c629755"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>私密文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
